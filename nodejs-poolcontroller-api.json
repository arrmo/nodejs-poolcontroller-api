{
    "item": [
        {
            "id": "ba9b20d7-6d1f-4cd1-81f6-38025f10a454",
            "name": "config",
            "item": [
                {
                    "id": "a3facc1b-8783-451f-9f5b-89b56dbbe7a2",
                    "name": "Shortcut for /config/all",
                    "request": {
                        "name": "Shortcut for /config/all",
                        "description": {
                            "content": "Shortcut for /config/all",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "6cbe82ec-bbe3-40d4-83aa-e8de4f458798",
                            "name": "poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "eab8d3bb-2758-40b6-8bd2-a7cfb3539079",
                    "name": "circuits",
                    "item": [
                        {
                            "id": "42762bd7-9889-411a-9aac-494f4997f343",
                            "name": "Get an array of all circuit objects with config data",
                            "request": {
                                "name": "Get an array of all circuit objects with config data",
                                "description": {
                                    "content": "Array of circuit config objects",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "79fdb131-966f-4c0d-9bd1-71018e5734b0",
                                    "name": "Circuit config array",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"isOn\": \"<boolean>\",\n  \"nameId\": \"<string>\",\n  \"isActive\": \"<boolean>\",\n  \"freeze\": \"<boolean>\",\n  \"showInFeatures\": \"<boolean>\",\n  \"eggTimer\": \"<integer>\",\n  \"equipmentType\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"isOn\": \"<boolean>\",\n  \"nameId\": \"<string>\",\n  \"isActive\": \"<boolean>\",\n  \"freeze\": \"<boolean>\",\n  \"showInFeatures\": \"<boolean>\",\n  \"eggTimer\": \"<integer>\",\n  \"equipmentType\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "316b8f38-06db-4738-acae-7e07d8feba70",
                            "name": "Get a list of valid controller names for circuits (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object in\n/config/options/circuits or /config/options/features instead.",
                            "request": {
                                "name": "Get a list of valid controller names for circuits (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object in\n/config/options/circuits or /config/options/features instead.",
                                "description": {
                                    "content": "Get a list of valid controller names for circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        "names",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "59073989-7c79-4259-ab3e-1433e638196e",
                                    "name": "Array of controller function objects valid for names",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                "names",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "1f2870c8-1870-4d4c-9f90-84175745d554",
                            "name": "Get a list of valid controller functions for circuits\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                            "request": {
                                "name": "Get a list of valid controller functions for circuits\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                                "description": {
                                    "content": "Get a list of valid controller functions for circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        "functions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "a33a95a6-6ff8-44b6-89ac-3404b939fcff",
                                    "name": "Array of controller function objects valid for circuits",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                "functions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "29f5454a-3d69-433f-aff3-d09c37f9229d",
                    "name": "body",
                    "item": [
                        {
                            "id": "2a2ee1fb-e785-4c7f-a76f-3f50c7c07b03",
                            "name": "Set options related to the \"Body\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Body\" section in poolConfig.json",
                                "description": {
                                    "content": "To set body settings, send an object with the values you want to change from /config/options/bodies.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "body",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "16782fa9-a28f-426f-b004-733e59c225d0",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 2,\n \"name\": \"Spa\",\n \"type\": 0,\n \"isActive\": true,\n \"heatMode\": 3,\n \"circuit\": 1,\n \"setPoint\": 95\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "bc9d7ed0-e454-4763-997b-fd568badef57",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "240f374f-b84b-4299-a9f5-63d2fc539e49",
                            "name": "Get heat modes for the body specified by the id",
                            "request": {
                                "name": "Get heat modes for the body specified by the id",
                                "description": {
                                    "content": "Get heat modes for the body specified by the id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "body",
                                        ":id",
                                        "heatModes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "id of the body",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "095c285a-e21a-4ed4-a9e5-ad034b3beb3d",
                                    "name": "Array of heat mode objects",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                "<integer>",
                                                "heatModes",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4a2124ca-8bcc-4bb0-b26c-b616194df387",
                    "name": "circuit",
                    "item": [
                        {
                            "id": "452f7a3e-88f8-4516-a338-fbede9271bfb",
                            "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the values you want to change from /config/options/bodies.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "39bcfb5c-50cc-4fa3-a236-009dfa566bf1",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": 1,\n \"isActive\": true,\n \"freeze\": false,\n \"showInFeatures\": true,\n \"eggTimer\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "80acd64d-8ce8-4667-b191-8a5eb5500b91",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "9f7e9ae0-a57c-4f20-a18e-6f51d0fe89c6",
                            "name": "Delete a circuit at the specified id",
                            "request": {
                                "name": "Delete a circuit at the specified id",
                                "description": {
                                    "content": "Delete a circuit at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "4f7426b8-3f41-416d-8e12-bb9b24253112",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "cd889198-ef19-4ff4-9086-de95b2664452",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "786b87dc-05d9-48b8-8980-13456b680d2a",
                            "name": "Get all available names (built-in and custom).  (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object \nin /config/options/circuits or /config/options/features instead.",
                            "request": {
                                "name": "Get all available names (built-in and custom).  (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object \nin /config/options/circuits or /config/options/features instead.",
                                "description": {
                                    "content": "Get all available names (built-in and custom).  (*Touch only)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        "names",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "f7c91dc6-778f-46bd-a58e-6cb59eaa3f0e",
                                    "name": "Array of name objects",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                "names",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": 1,\n  \"name\": \"aerator\",\n  \"desc\": \"Aerator\"\n },\n {\n  \"val\": 2,\n  \"name\": \"airblower\",\n  \"desc\": \"Air Blower\"\n },\n {\n  \"val\": 3,\n  \"name\": \"aux1\",\n  \"desc\": \"AUX 1\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "2c44243d-0cd4-402d-af51-b88b980e5500",
                            "name": "Get an array of objects that can include circuits, features, groups, virtual circuits.",
                            "request": {
                                "name": "Get an array of objects that can include circuits, features, groups, virtual circuits.",
                                "description": {
                                    "content": "Get an array of objects that can include circuits, features, groups, virtual circuits.  Any parameter not\nincluded will be included (must specify false to exclude values)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        "references",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Include/exclude circuitss in the references object",
                                            "key": "circuits",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude features in the references object",
                                            "key": "features",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude groupss in the references object",
                                            "key": "groups",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude virtuals in the references object",
                                            "key": "virtual",
                                            "value": "<boolean>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "6b72449c-158d-45f4-b340-1a4e0912dbe7",
                                    "name": "Array of circuits/features/groups/virtual circuit objects.",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                "references",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "circuits",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "features",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "groups",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "virtual",
                                                    "value": "<boolean>"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": 11,\n  \"name\": \"Spillway\",\n  \"type\": 14,\n  \"equipmentType\": \"feature\",\n  \"nameId\": 79\n },\n {\n  \"id\": 12,\n  \"name\": \"Waterfall 1\",\n  \"type\": 0,\n  \"equipmentType\": \"feature\",\n  \"nameId\": 87\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "410478a2-143d-4516-956b-6a80b8a687e7",
                    "name": "options",
                    "item": [
                        {
                            "id": "fbaa5b4c-db2a-4094-be5b-f4a90fca5608",
                            "name": "Get all available options needed to configure general options",
                            "request": {
                                "name": "Get all available options needed to configure general options",
                                "description": {
                                    "content": "Retrieves: countries, tempUnits, timeZones, clockSources, clockModes, pool, sensors",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "58f9a123-0c78-4edb-b70a-99b3249d162b",
                                    "name": "Object containing all available general options for the pool type",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "general",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"countries\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"tempUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"timeZones\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"loc\": \"<string>\",\n   \"abbrev\": \"<string>\",\n   \"utcOffset\": \"<integer>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"loc\": \"<string>\",\n   \"abbrev\": \"<string>\",\n   \"utcOffset\": \"<integer>\"\n  }\n ],\n \"clockSources\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"clockModes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"pool\": {\n  \"options\": {\n   \"adjustDST\": \"<boolean>\",\n   \"clockMode\": \"<integer>\",\n   \"clockSource\": \"<string>\",\n   \"pumpDelay\": \"<boolean>\",\n   \"manualHeat\": \"<boolean>\",\n   \"units\": \"<integer>\"\n  },\n  \"owner\": {\n   \"name\": \"<string>\",\n   \"phone\": \"<string>\",\n   \"email\": \"<string>\",\n   \"email2\": \"<string>\",\n   \"phone2\": \"<string>\"\n  },\n  \"location\": {\n   \"address\": \"<string>\",\n   \"city\": \"<string>\",\n   \"state\": \"<string>\",\n   \"zip\": \"<string>\",\n   \"country\": \"<string>\",\n   \"latitude\": \"<string>\",\n   \"longitude\": \"<string>\",\n   \"timeZone\": \"<integer>\"\n  },\n  \"alias\": \"<string>\"\n },\n \"sensors\": [\n  {\n   \"name\": \"<string>\",\n   \"temp\": \"<integer>\",\n   \"tempAdj\": \"<integer>\",\n   \"binding\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"temp\": \"<integer>\",\n   \"tempAdj\": \"<integer>\",\n   \"binding\": \"<string>\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "626587ee-2374-4c78-96f9-c59f854db0a2",
                            "name": "Get all available options to set circuits",
                            "request": {
                                "name": "Get all available options to set circuits",
                                "description": {
                                    "content": "Returns: maxCircuits, invalidIds, equipmentIds, equipmentNames, functions, circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "circuits",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "66576add-bccd-4f1c-8d56-cb89ba6e8dc8",
                                    "name": "Object containing all available general options for the circuits",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "circuits",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"invalidIds\": [\n  \"<integer>\",\n  \"<integer>\"\n ],\n \"equipmentIds\": {\n  \"start\": \"<integer>\",\n  \"stop\": \"<integer>\"\n },\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"functions\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"maxCircuits\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "13a7019c-dde1-4b51-bf7a-1e3e04729832",
                            "name": "Get all options needed to set circuit groups",
                            "request": {
                                "name": "Get all options needed to set circuit groups",
                                "description": {
                                    "content": "Get all options needed to set circuit groups",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "circuitGroups",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "cec8a4b2-84cb-4c12-a3de-2d46a2ff2824",
                                    "name": "Object containing all available general options for the circuit groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "circuitGroups",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"circuitGroups\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    }\n   ]\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    }\n   ]\n  }\n ],\n \"maxCircuitGroups\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "c573cba0-e5cd-4f9c-b6e8-4314e5232d0b",
                            "name": "Get all available options to set lightGroups",
                            "request": {
                                "name": "Get all available options to set lightGroups",
                                "description": {
                                    "content": "Returns: maxLightGroups, invalidIds, equipmentIds, equipmentNames, functions, features",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "lightGroups",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "32b2cf85-2cae-4bd1-b071-00410e98d0a7",
                                    "name": "Object containing all available general options for the light groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "lightGroups",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"maxLightGroups\": 1,\n \"equipmentNames\": [\n  {\n   \"val\": 1,\n   \"name\": \"aerator\",\n   \"desc\": \"Aerator\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"airblower\",\n   \"desc\": \"Air Blower\"\n  },\n  {\n   \"val\": 3,\n   \"name\": \"aux1\",\n   \"desc\": \"AUX 1\"\n  },\n  {\n   \"val\": 4,\n   \"name\": \"aux2\",\n   \"desc\": \"AUX 2\"\n  }\n ],\n \"themes\": [\n  {\n   \"val\": 0,\n   \"name\": \"off\",\n   \"desc\": \"Off\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 1,\n   \"name\": \"on\",\n   \"desc\": \"On\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 128,\n   \"name\": \"colorsync\",\n   \"desc\": \"Color Sync\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 144,\n   \"name\": \"colorswim\",\n   \"desc\": \"Color Swim\",\n   \"type\": \"intellibrite\"\n  }\n ],\n \"colors\": [\n  {\n   \"val\": 0,\n   \"name\": \"white\",\n   \"desc\": \"White\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"lightgreen\",\n   \"desc\": \"Light Green\"\n  },\n  {\n   \"val\": 4,\n   \"name\": \"green\",\n   \"desc\": \"Green\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": 2,\n   \"name\": \"Pool LtDeep\",\n   \"type\": 16,\n   \"equipmentType\": \"circuit\",\n   \"nameId\": 205\n  },\n  {\n   \"id\": 7,\n   \"name\": \"Spa Light\",\n   \"type\": 16,\n   \"equipmentType\": \"circuit\",\n   \"nameId\": 74\n  }\n ],\n \"lightGroups\": [\n  {\n   \"id\": 192,\n   \"circuits\": [\n    {\n     \"id\": 1,\n     \"circuit\": 2,\n     \"position\": 2,\n     \"color\": 6,\n     \"swimDelay\": 0,\n     \"isActive\": true\n    },\n    {\n     \"id\": 2,\n     \"circuit\": 7,\n     \"position\": 2,\n     \"color\": 14,\n     \"swimDelay\": 2,\n     \"isActive\": true\n    },\n    {\n     \"id\": 3,\n     \"circuit\": 8,\n     \"position\": 3,\n     \"color\": 2,\n     \"swimDelay\": 4,\n     \"isActive\": true\n    }\n   ],\n   \"isActive\": true,\n   \"name\": \"Intellibrite\",\n   \"type\": 3,\n   \"lightingTheme\": 195\n  }\n ],\n \"functions\": [\n  {\n   \"val\": 0,\n   \"name\": \"generic\",\n   \"desc\": \"Generic\"\n  },\n  {\n   \"val\": 1,\n   \"name\": \"spa\",\n   \"desc\": \"Spa\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"pool\",\n   \"desc\": \"Pool\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "8d9cf679-61fd-4f99-a26d-d8ebc9ee1ef5",
                            "name": "Get all available options to set features",
                            "request": {
                                "name": "Get all available options to set features",
                                "description": {
                                    "content": "Returns: maxCircuitGroups, equipmentNames, circuits, circuitGroups",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "features",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "3ff24137-b43e-4bd0-978e-3e98a89b1594",
                                    "name": "Object containing all available general options for the circuit groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "features",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"invalidIds\": [\n  \"<integer>\",\n  \"<integer>\"\n ],\n \"equipmentIds\": {\n  \"start\": \"<integer>\",\n  \"stop\": \"<integer>\"\n },\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"functions\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"features\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"nameId\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"macro\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"nameId\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"macro\": \"<boolean>\"\n  }\n ],\n \"maxFeatures\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "b5685583-f87e-4639-a887-783369ad940b",
                            "name": "Get all available options to set bodies",
                            "request": {
                                "name": "Get all available options to set bodies",
                                "description": {
                                    "content": "Returns: maxBodies, bodyTypes, bodies",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "bodies",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "255be6bf-3788-478b-b2ab-7d130cf4797f",
                                    "name": "Object containing all available general options for the bodies",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "bodies",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"bodyTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  }\n ],\n \"maxBodies\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "59fce324-8f71-4917-9a87-f0480caf26e2",
                            "name": "Get all available options to set valves",
                            "request": {
                                "name": "Get all available options to set valves",
                                "description": {
                                    "content": "Returns: maxValves, valveTypes, circuits, valves",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "valves",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "1423dcde-a1f8-47a4-a15e-b6e3ecab1591",
                                    "name": "Object containing all available general options for the valves",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "valves",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"valveTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"valves\": [\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"isIntake\": \"<boolean>\",\n   \"isReturn\": \"<boolean>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"isIntake\": \"<boolean>\",\n   \"isReturn\": \"<boolean>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"maxValves\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "262c745a-3be0-43c4-973c-743e8f94023a",
                            "name": "Get all available options to set pumps",
                            "request": {
                                "name": "Get all available options to set pumps",
                                "description": {
                                    "content": "Returns: maxPumps, pumpUnits, pumpTypes, models, circuits, bodies, pumps",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "pumps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "4043b0fb-b84a-4d29-b264-c61972f803bd",
                                    "name": "Object containing all available general options for the pumps",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "pumps",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"pumpUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"pumpTypes\": {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\",\n  \"maxCircuits\": \"<integer>\",\n  \"hasAddress\": \"<boolean>\",\n  \"hasBody\": \"<boolean>\"\n },\n \"models\": {\n  \"ss\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"ds\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vs\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vf\": [\n   {\n    \"ss\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"ds\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vf\": [\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     },\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     }\n    ],\n    \"vsf\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vssvrs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ]\n   },\n   {\n    \"ss\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"ds\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vf\": [\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     },\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     }\n    ],\n    \"vsf\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vssvrs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ]\n   }\n  ],\n  \"vsf\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vssvrs\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ]\n },\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  }\n ],\n \"pumps\": [\n  {\n   \"id\": \"<integer>\",\n   \"model\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    }\n   ],\n   \"flowStepSize\": \"<integer>\",\n   \"minFlow\": \"<integer>\",\n   \"maxFlow\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"primingTime\": \"<integer>\",\n   \"speedStepSize\": \"<integer>\",\n   \"minSpeed\": \"<integer>\",\n   \"maxSpeed\": \"<integer>\",\n   \"primingSpeed\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"model\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    }\n   ],\n   \"flowStepSize\": \"<integer>\",\n   \"minFlow\": \"<integer>\",\n   \"maxFlow\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"primingTime\": \"<integer>\",\n   \"speedStepSize\": \"<integer>\",\n   \"minSpeed\": \"<integer>\",\n   \"maxSpeed\": \"<integer>\",\n   \"primingSpeed\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"maxPumps\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a4816791-a1db-4caf-a8d2-8c9bea0e9156",
                            "name": "Get all available options to set schedules",
                            "request": {
                                "name": "Get all available options to set schedules",
                                "description": {
                                    "content": "Returns: maxSchedules, tempUnits, scheduleTimeTypes, schedules, scheduleTypes, scheduleDays,",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "schedules",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "f38115cf-4ccd-46d1-9442-a010bcc0bd2d",
                                    "name": "Object containing all available general options for the schedules",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "schedules",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"tempUnits\": {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n \"scheduleTimeTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"scheduleTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\",\n   \"startDate\": \"<boolean>\",\n   \"startTime\": \"<boolean>\",\n   \"endTime\": \"<boolean>\",\n   \"days\": \"<string>\",\n   \"heatSource\": \"<boolean>\",\n   \"heatSetpoint\": \"<boolean>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\",\n   \"startDate\": \"<boolean>\",\n   \"startTime\": \"<boolean>\",\n   \"endTime\": \"<boolean>\",\n   \"days\": \"<string>\",\n   \"heatSource\": \"<boolean>\",\n   \"heatSetpoint\": \"<boolean>\"\n  }\n ],\n \"scheduleDays\": [\n  {\n   \"val\": \"<integer>\",\n   \"days\": {\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"down\": \"<integer>\"\n   }\n  },\n  {\n   \"val\": \"<integer>\",\n   \"days\": {\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"down\": \"<integer>\"\n   }\n  }\n ],\n \"heatSources\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"schedules\": [\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"startTime\": \"<integer>\",\n   \"endTime\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"scheduleDays\": \"<integer>\",\n   \"runOnce\": \"<integer>\",\n   \"scheduleType\": \"<integer>\",\n   \"startTimeType\": \"<integer>\",\n   \"endTimeType\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"startTime\": \"<integer>\",\n   \"endTime\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"scheduleDays\": \"<integer>\",\n   \"runOnce\": \"<integer>\",\n   \"scheduleType\": \"<integer>\",\n   \"startTimeType\": \"<integer>\",\n   \"endTimeType\": \"<integer>\"\n  }\n ],\n \"maxSchedules\": \"<integer>\",\n \"clockMode\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7a56345b-b882-43a9-a6dc-ab921251551d",
                            "name": "Get all available options to set heaters",
                            "request": {
                                "name": "Get all available options to set heaters",
                                "description": {
                                    "content": "Returns: maxHeaters, heaters, heaterTypes, heatModes",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "heaters",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "a5bad24d-b6d0-471a-8386-1d8d8d4b5dda",
                                    "name": "Object containing all available general options for the heaters",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "heaters",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"heatModes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"heaterTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"heaters\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"freeze\": \"<boolean>\",\n   \"coolingEnabled\": \"<boolean>\",\n   \"startTempDelta\": \"<integer>\",\n   \"stopTempDelta\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"freeze\": \"<boolean>\",\n   \"coolingEnabled\": \"<boolean>\",\n   \"startTempDelta\": \"<integer>\",\n   \"stopTempDelta\": \"<integer>\"\n  }\n ],\n \"maxHeaters\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "2c26f926-01e1-49c3-a741-a59863ab193a",
                            "name": "Get a list of custom names (*Touch only)",
                            "request": {
                                "name": "Get a list of custom names (*Touch only)",
                                "description": {
                                    "content": "Returns: customNames, maxCustomNames. (*Touch only)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "c21f41b4-8493-46d3-a47c-5519f7ded1ab",
                                    "name": "Object with maxCustomNames and customNames",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "customNames",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"maxCustomNames\": 10,\n \"customNames\": [\n  {\n   \"id\": 0,\n   \"name\": \"WtrFall 1\"\n  },\n  {\n   \"id\": 1,\n   \"name\": \"WtrFall 1.5\"\n  },\n  {\n   \"id\": 2,\n   \"name\": \"WtrFall 2\"\n  },\n  {\n   \"id\": 3,\n   \"name\": \"WtrFall 3\"\n  },\n  {\n   \"id\": 4,\n   \"name\": \"Pool High\"\n  },\n  {\n   \"id\": 5,\n   \"name\": \"Pool LtDeep\"\n  },\n  {\n   \"id\": 8,\n   \"name\": \"USERNAME-09\"\n  },\n  {\n   \"id\": 9,\n   \"name\": \"USERNAME-aa\"\n  },\n  {\n   \"id\": 6,\n   \"name\": \"Pool LtShlw\"\n  },\n  {\n   \"id\": 7,\n   \"name\": \"USERNAME-08\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d995f5df-e557-457f-aa76-5a0f98c66338",
                            "name": "Get all available options to set chem controllers",
                            "request": {
                                "name": "Get all available options to set chem controllers",
                                "description": {
                                    "content": "Returns: types, bodies, tempUnits, status, status1, status2, waterflow, controllers, maxChemControllers",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "chemControllers",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "947f14bb-bc82-4afd-9d86-030d164eab4e",
                                    "name": "Object containing all available general options for the chlorinators",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "chemControllers",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"types\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"tempUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"status\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"status1\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"status2\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"waterFlow\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"controllers\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"isVirtual\": \"<boolean>\",\n   \"name\": \"<integer>\",\n   \"phSetpoint\": \"<number>\",\n   \"orpSetpoint\": \"<boolean>\",\n   \"alkalinity\": \"<integer>\",\n   \"calciumHardness\": \"<integer>\",\n   \"cyanuricAcid\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"isVirtual\": \"<boolean>\",\n   \"name\": \"<integer>\",\n   \"phSetpoint\": \"<number>\",\n   \"orpSetpoint\": \"<boolean>\",\n   \"alkalinity\": \"<integer>\",\n   \"calciumHardness\": \"<integer>\",\n   \"cyanuricAcid\": \"<integer>\"\n  }\n ],\n \"maxChemControllers\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "432d201b-0699-4a0e-81a8-e0aefd812282",
                            "name": "Get all available options to set chlorinators",
                            "request": {
                                "name": "Get all available options to set chlorinators",
                                "description": {
                                    "content": "Returns: types, bodies, chlorinators, maxChlorinators",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "chlorinators",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "542913a7-3fbb-4e95-8eab-18dab387355e",
                                    "name": "Object containing all available general options for the chlorinators",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "chlorinators",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"types\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"chlorinators\": [\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"spaSetpoint\": \"<integer>\",\n   \"poolSetpoint\": \"<integer>\",\n   \"superChlor\": \"<boolean>\",\n   \"superChlorHours\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"spaSetpoint\": \"<integer>\",\n   \"poolSetpoint\": \"<integer>\",\n   \"superChlor\": \"<boolean>\",\n   \"superChlorHours\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\"\n  }\n ],\n \"maxChlorinators\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "62c07b04-f8c4-4e37-ada0-ef3150b370d8",
                            "name": "Get days of week that are valid for the current OCP.  This can also be retrieved as `scheduleDays` in the /config/options/schedules object.",
                            "request": {
                                "name": "Get days of week that are valid for the current OCP.  This can also be retrieved as `scheduleDays` in the /config/options/schedules object.",
                                "description": {
                                    "content": "Get Days of week; info now contained in /config/options/schedules",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "c15b72cc-1202-42f9-bb25-850d2406c0ca",
                                    "name": "Array of days",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "dateTime",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "76fac80a-39e3-40b6-b9e7-085f31fba5cc",
                    "name": "Set options related to the \"Pool\" section in poolConfig.json.",
                    "request": {
                        "name": "Set options related to the \"Pool\" section in poolConfig.json.",
                        "description": {
                            "content": "To set general settings, send an object with the value you want to change from /config/options/general.",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "general",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "44c153f0-3933-4c12-ae1b-b27c3939d600",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"adjustDST\": \"<boolean>\",\n \"clockMode\": \"<integer>\",\n \"clockSource\": \"<string>\",\n \"pumpDelay\": \"<boolean>\",\n \"manualHeat\": \"<boolean>\",\n \"units\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e84fe4ca-3ceb-47fd-990a-df2e17053650",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "14a53f1b-3e60-4dc1-8666-359c0c6853b5",
                    "name": "Set options related to the \"Valve\" section in poolConfig.json",
                    "request": {
                        "name": "Set options related to the \"Valve\" section in poolConfig.json",
                        "description": {
                            "content": "To set valve settings, send an object with the values you want to change from /config/options/general.",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "valve",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "6d809abd-7fc5-4197-91dc-d097ab8aaa61",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "valve",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"circuit\": 128,\n \"isActive\": true,\n \"name\": \"Solar\",\n \"type\": 0,\n \"isReturn\": false,\n \"isIntake\": false\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "67432d9d-7d03-4f19-aae0-2fcfac52d44e",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "valve",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6e12febc-fbbf-479c-a375-84b6e5758c71",
                    "name": "feature",
                    "item": [
                        {
                            "id": "9cb28367-21a0-48fb-9bb2-34f51fb36360",
                            "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/features.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "feature",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "30b05635-3dd3-4c83-b030-2252946f6673",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 12,\n \"name\": \"Waterfall 1\",\n \"nameId\": 87,\n \"type\": 0,\n \"isActive\": true,\n \"freeze\": false,\n \"showInFeatures\": true,\n \"eggTimer\": 420,\n \"macro\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ce2b28a3-db6b-4522-a373-9005de95677d",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "369aecde-6ce2-4d1c-8d37-cc0e461f1c7e",
                            "name": "Delete a feature at the specified id",
                            "request": {
                                "name": "Delete a feature at the specified id",
                                "description": {
                                    "content": "Delete a feature at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "feature",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "9e8c3548-63e5-462e-8352-eb6a210cf7b2",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "17686721-7a0c-4497-9624-5debb98e2552",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a41b8394-cd9e-4b22-829b-a492176e6b32",
                    "name": "circuit Group",
                    "item": [
                        {
                            "id": "7fda77a0-1ffa-4ce5-952e-e4d0abe678be",
                            "name": "Set options related to the \"Circuit Groups\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit Groups\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/circuitGroups.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "f9f0398c-11d8-441a-90f0-3cb784875a03",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"Need Example\": null\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "fb86c2c9-9c5c-45dd-9155-eb9724594ce4",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "1871bad8-36d5-4ebf-953d-fef16b44f7ee",
                            "name": "Delete a circuit group at the specified id",
                            "request": {
                                "name": "Delete a circuit group at the specified id",
                                "description": {
                                    "content": "Delete a circuit group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "0d579114-9137-44ee-a489-9ce8613f096e",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "40b50df3-d071-4e52-aed0-ed6849ab6b68",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "10cd17d1-64d1-4cb2-b6dc-0e265dd03395",
                            "name": "Get a single circuit group at the specified id",
                            "request": {
                                "name": "Get a single circuit group at the specified id",
                                "description": {
                                    "content": "Get a single circuit group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "88981225-58d5-448e-9470-08de802318d1",
                                    "name": "Circuit group extended object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "ff4591d4-942a-4a22-9551-e721546c23c3",
                    "name": "light Group",
                    "item": [
                        {
                            "id": "428dde25-c9d9-4396-9f68-d4757cd12f76",
                            "name": "Set options related to the \"lightGroups\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"lightGroups\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/lightGroups.\n\n*NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, \nsend an empty array `[]`.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "80282659-a5cd-4434-b129-f21a63717d0d",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": 2,\n   \"position\": 2,\n   \"color\": 6,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": 7,\n   \"position\": 2,\n   \"color\": 14,\n   \"swimDelay\": 2,\n   \"isActive\": true\n  },\n  {\n   \"id\": 3,\n   \"circuit\": 8,\n   \"position\": 3,\n   \"color\": 2,\n   \"swimDelay\": 4,\n   \"isActive\": true\n  }\n ],\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": 3,\n \"lightingTheme\": 195\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "0f15f104-5622-430c-aca2-22e52d70c4b4",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a0beed48-ab9a-417c-8618-9d64595669b0",
                            "name": "Delete a light group at the specified id",
                            "request": {
                                "name": "Delete a light group at the specified id",
                                "description": {
                                    "content": "Delete a light group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "b03a9741-3f36-4d40-a186-cc7516e2c43f",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ce32b919-4fcd-4649-b906-7dc93e9802cf",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "22e167fe-1a3c-416e-b331-dc22d274a768",
                            "name": "{id}",
                            "item": [
                                {
                                    "id": "b1239d45-4a07-411c-863b-da1f8cc178d4",
                                    "name": "Get a single lightGroup at the specified id This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                    "request": {
                                        "name": "Get a single lightGroup at the specified id This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                        "description": {
                                            "content": "Get a single lightGroup at the specified id",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ":id",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "b5ab365f-fe2d-4ed3-a9e6-1cbda2288185",
                                            "name": "Object with deep linking",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "config",
                                                        "lightGroup",
                                                        "<integer>",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "text/plain"
                                                }
                                            ],
                                            "body": "",
                                            "cookie": [],
                                            "_postman_previewlanguage": "text"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "6f7fad87-50ae-4be8-a935-799ddaff1169",
                                    "name": "set lg attribs\nThis endpoint is going away.  Use /config/lightGroup instead.",
                                    "request": {
                                        "name": "set lg attribs\nThis endpoint is going away.  Use /config/lightGroup instead.",
                                        "description": {
                                            "content": "",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ":id",
                                                "setColors",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "05d08da6-a476-4b6a-b97d-fb22963e2bac",
                                            "name": "Array of",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "config",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "setColors",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "text/plain"
                                                }
                                            ],
                                            "body": "",
                                            "cookie": [],
                                            "_postman_previewlanguage": "text"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6dc0c543-aa0d-4e2d-bf92-65af0c2485db",
                            "name": "Get lightgroup colors, theme, action\nThis endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                            "request": {
                                "name": "Get lightgroup colors, theme, action\nThis endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                "description": {
                                    "content": "Get lightgroup colors, theme, action",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        "colors",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "f71dc1be-58ad-49bd-81a9-2d0aa53f3aab",
                                    "name": "Object of items...",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                "colors",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "60ff1be3-8f19-48d0-a046-f81cc34bcd40",
                    "name": "pump",
                    "item": [
                        {
                            "id": "eea5add5-891c-44f3-8804-474062db2424",
                            "name": "Set options related to the \"pumps\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"pumps\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/pumps.\n\n*NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, \nsend an empty array `[]`.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "6066dfd5-88dc-405b-a7a2-be0130bfad48",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"type\": 128,\n \"address\": 96,\n \"isActive\": true,\n \"model\": 0,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": 255,\n   \"speed\": 1830,\n   \"units\": 0\n  },\n  {\n   \"id\": 2,\n   \"circuit\": 4,\n   \"speed\": 2460,\n   \"units\": 0\n  }\n ],\n \"primingSpeed\": 3000,\n \"primingTime\": 1,\n \"minSpeed\": 450,\n \"maxSpeed\": 3450,\n \"speedStepSize\": 10,\n \"name\": \"Pool\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "1967e281-f843-4556-8b12-5b4ac5af440a",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "2a14a3a9-2b7b-4ea9-a7fb-a28774d8cc46",
                            "name": "Delete a pump at the specified id",
                            "request": {
                                "name": "Delete a pump at the specified id",
                                "description": {
                                    "content": "Delete a pump at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "78dcd115-1166-4142-ab37-18cb64930348",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d2176079-a64e-4e27-a0af-9aca833954f0",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "bd9379f4-afd1-4452-a333-fe3dfadefa37",
                            "name": "Delete a pump at the specified Id",
                            "request": {
                                "name": "Delete a pump at the specified Id",
                                "description": {
                                    "content": "Delete a pump at the specified Id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ":pumpId",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "2fc17465-51bf-4c8e-9d0a-8251b69b3031",
                                    "name": "Array of",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ":pumpId",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "pumpId"
                                                }
                                            ]
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "af72a402-7eb1-4ff0-8abe-f490a8888446",
                    "name": "Set custom names on OCP (*Touch only)",
                    "request": {
                        "name": "Set custom names on OCP (*Touch only)",
                        "description": {
                            "content": "Set custom names on OCP (*Touch only)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "customNames",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                        }
                    },
                    "response": [
                        {
                            "id": "20262e1f-51e2-4030-aa6b-28facc4ff26f",
                            "name": "Object with custom name",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "3afc5f16-f200-4b28-9972-4a2a63f6b1da",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "39f99d6a-a59a-44f2-abda-7955f048f9a9",
                    "name": "Set a single custom names on OCP (*Touch only)",
                    "request": {
                        "name": "Set a single custom names on OCP (*Touch only)",
                        "description": {
                            "content": "Set a single custom names on OCP (*Touch only)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "customName",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "7852f530-e53d-4385-ab68-633669905af8",
                            "name": "Object with custom name",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customName",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "89e3f148-a698-4e9d-ab37-dd7c780cdcc2",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customName",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6020f9c9-77c7-4a5c-9236-a62ee39da7f1",
                    "name": "schedule",
                    "item": [
                        {
                            "id": "06201f44-cfa8-414d-b7b4-95c3c0207536",
                            "name": "Set options related to the \"schedules\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"schedules\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/schedules.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "642dcc64-0f0e-4ca9-b731-31b692b43281",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"circuit\": 6,\n \"startTime\": 495,\n \"endTime\": 960,\n \"isActive\": true,\n \"scheduleDays\": 127,\n \"runOnce\": 128,\n \"scheduleType\": 128,\n \"startTimeType\": 0,\n \"endTimeType\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "47596eba-6651-4e0b-bc5e-bd5f2cf4f519",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6f362c38-8a35-4acd-97ee-ba8bbf9fe2c2",
                            "name": "Delete a schedule at the specified id",
                            "request": {
                                "name": "Delete a schedule at the specified id",
                                "description": {
                                    "content": "Delete a schedule at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "51b2a4b7-1bfa-4759-a558-291b2554b854",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "404fe1f8-8517-4faa-b233-fbf0433e958c",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "fc93bc84-0e10-4f83-a4c8-fc80a93e4599",
                            "name": "Get an individual schedule\nThis endpoint will be going away.  Please use /config/schedules or /config/options/schedules instead.",
                            "request": {
                                "name": "Get an individual schedule\nThis endpoint will be going away.  Please use /config/schedules or /config/options/schedules instead.",
                                "description": {
                                    "content": "Get an individual schedule",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "3b015875-8a8e-4709-99b0-fcf8a006b6c6",
                                    "name": "Circuit object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\",\n \"isOn\": \"<boolean>\",\n \"nameId\": \"<string>\",\n \"isActive\": \"<boolean>\",\n \"freeze\": \"<boolean>\",\n \"showInFeatures\": \"<boolean>\",\n \"eggTimer\": \"<integer>\",\n \"equipmentType\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "43e0e143-cc58-4fbd-8eec-8b857de74416",
                    "name": "chlorinator",
                    "item": [
                        {
                            "id": "842719f8-6fc9-40bf-ad4c-23a0030ef261",
                            "name": "Set options related to the \"chlorinators\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"chlorinators\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/chlorinators.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinator",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a62ba97d-6a1f-4269-a222-916a3885c2f8",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"address\": 80,\n \"isActive\": true,\n \"body\": 32,\n \"spaSetpoint\": 15,\n \"poolSetpoint\": 2,\n \"superChlor\": true,\n \"superChlorHours\": 10,\n \"name\": \"Intellichlor--40\",\n \"type\": 2\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "dcbe76d7-0773-46ec-9df2-7f746763cf43",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "12d91a5f-4eff-43cd-b52d-650217012f31",
                            "name": "Get a single chlorinator object",
                            "request": {
                                "name": "Get a single chlorinator object",
                                "description": {
                                    "content": "Get a single chlorinator object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinator",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d68762f0-9fb7-4cb1-bbf7-d06f48d08089",
                                    "name": "Chlorinator object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ":id",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"<integer>\",\n \"address\": \"<integer>\",\n \"isActive\": \"<boolean>\",\n \"body\": \"<integer>\",\n \"spaSetpoint\": \"<integer>\",\n \"poolSetpoint\": \"<integer>\",\n \"superChlor\": \"<boolean>\",\n \"superChlorHours\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "bb1a7468-d713-49d6-a705-4bdca8d468a4",
                    "name": "Get a list of valid controller functions for features\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                    "request": {
                        "name": "Get a list of valid controller functions for features\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                        "description": {
                            "content": "Get a list of valid controller functions for features",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "features",
                                "functions",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "65ca8f8a-2907-4f52-a82c-4d37a127439a",
                            "name": "Array of controller function objects valid for features",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "features",
                                        "functions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "fb2b12f2-fa00-48c1-ab94-0aa37da16e1d",
                    "name": "Start a search for standalone chlorinators",
                    "request": {
                        "name": "Start a search for standalone chlorinators",
                        "description": {
                            "content": "Start a search for standalone chlorinators",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "chlorinators",
                                "search",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "67302ac0-464e-4afe-8468-7d573598acdb",
                            "name": "Chlorinator object (isActive and isVirtual should be checked)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinators",
                                        "search",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": \"<integer>\",\n \"address\": \"<integer>\",\n \"isActive\": \"<boolean>\",\n \"body\": \"<integer>\",\n \"spaSetpoint\": \"<integer>\",\n \"poolSetpoint\": \"<integer>\",\n \"superChlor\": \"<boolean>\",\n \"superChlorHours\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "7afde741-2858-4da2-817d-226f7c2d7b10",
                    "name": "Set date and time options",
                    "request": {
                        "name": "Set date and time options",
                        "description": {
                            "content": "Set date and time options",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "dateTime",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "a681cd5a-cb1a-46aa-be1d-99fbe4c67c23",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"min\": \"<integer>\",\n \"hour\": \"<integer>\",\n \"date\": \"<integer>\",\n \"month\": \"<integer>\",\n \"year\": \"<integer>\",\n \"dow\": \"<integer>\",\n \"dst\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "71b67e61-f605-4088-8826-50b6255b023a",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4353a8ec-18c4-4728-b690-d735781809b7",
                    "name": "Get a list of light group themes \nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                    "request": {
                        "name": "Get a list of light group themes \nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                        "description": {
                            "content": "Get a list of light group themes",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "lightGroups",
                                "themes",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "38b9e0b0-d59c-4637-848f-611d934ff24e",
                            "name": "Array of",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroups",
                                        "themes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "c3cefe10-9e4f-4e55-9656-47b4b6377288",
                    "name": "Get lightGroup themes - can be retrieved with /config/options/lightGroups; also it sends enumerated state info and not just identifiers.\nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                    "request": {
                        "name": "Get lightGroup themes - can be retrieved with /config/options/lightGroups; also it sends enumerated state info and not just identifiers.\nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                        "description": {
                            "content": "",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "intellibrite",
                                "themes",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "83088a78-29df-45c3-8f10-e1f09a57d66b",
                            "name": "Array of",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "intellibrite",
                                        "themes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "af6b31a7-9aa9-42e1-8403-b9b0f4fc6899",
                    "name": "chem Controller",
                    "item": [
                        {
                            "id": "c943133c-9f4a-40d9-8325-3cdf0842c4c0",
                            "name": "Set options related to the \"chemControllers\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"chemControllers\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/chemControllers.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chemController",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "672cf568-a8b3-402f-956f-f6c8ca508a91",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"type\": 3,\n \"isActive\": true,\n \"isVirtual\": true,\n \"name\": \"Chem Controller\",\n \"pHSetpoint\": 7.4,\n \"orpSetpoint\": 660,\n \"alkalinity\": 40,\n \"calciumHardness\": 710,\n \"cyanuricAcid\": 10\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "21494ed1-75e7-42f0-82d3-2a41fae37839",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a148251e-ff41-4236-b5a4-967f6cd9670d",
                            "name": "NOT IMPLEMENTED YET.  Begin a search on the server for any chem controllers",
                            "request": {
                                "name": "NOT IMPLEMENTED YET.  Begin a search on the server for any chem controllers",
                                "description": {
                                    "content": "Begin a search on the server for any chem controllers",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chemController",
                                        "search",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "51003d81-12cc-4845-a8b7-43a62ce0ecbd",
                                    "name": "Searching for chem controllers.",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                "search",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "2ec461d4-160e-4586-89a7-60e7289677a2",
                    "name": "Return a section of poolConfig.json",
                    "request": {
                        "name": "Return a section of poolConfig.json",
                        "description": {
                            "content": "Return a section of poolConfig.json",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                ":section",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "all",
                                    "key": "section"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "df8a7314-485f-42a0-beb8-85b6a04de665",
                            "name": "{Section} of poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "cac2ab26-d1eb-4c20-b173-a9efe66348a4",
            "name": "app",
            "item": [
                {
                    "id": "6b1dd094-df29-41f5-87e1-b5037c4fcfb6",
                    "name": "Get all available options to set logger",
                    "request": {
                        "name": "Get all available options to set logger",
                        "description": {
                            "content": "Returns: app logger",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "app",
                                "options",
                                "logger",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "03ecfef8-bb73-448c-9816-cf742aca8aa8",
                            "name": "Object containing all available options for the logger",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "options",
                                        "logger",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"logger\": {\n  \"packet\": {\n   \"enabled\": true,\n   \"logToConsole\": false,\n   \"logToFile\": false,\n   \"filename\": \"packetLog\",\n   \"invalid\": true,\n   \"broadcast\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"pump\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"chlorinator\": {\n    \"enabled\": false,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"intellichem\": {\n    \"enabled\": true,\n    \"includeActions\": [],\n    \"exclueActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"intellivalve\": {\n    \"enabled\": true,\n    \"includeActions\": [],\n    \"exclueActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"unidentified\": {\n    \"enabled\": true,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"unknown\": {\n    \"enabled\": true,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   }\n  },\n  \"app\": {\n   \"enabled\": true,\n   \"level\": \"debug\",\n   \"captureForReplay\": false\n  }\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "83241747-d11b-4c4e-8403-050c2db73623",
                    "name": "logger",
                    "item": [
                        {
                            "id": "37fc70e3-c883-4698-b273-e640eef7b6a5",
                            "name": "Set options related to the \"log\" section in config.json",
                            "request": {
                                "name": "Set options related to the \"log\" section in config.json",
                                "description": {
                                    "content": "To set logger settings, send an object with the values you want to change from /config/options/logger.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "logger",
                                        "setOptions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "4b60b60f-02f5-4ea6-8a57-28df00faab91",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "setOptions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"logger\": {\n  \"packet\": {\n   \"enabled\": true,\n   \"logToConsole\": false,\n   \"logToFile\": false,\n   \"filename\": \"packetLog\",\n   \"invalid\": true,\n   \"broadcast\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   }\n  },\n  \"app\": {\n   \"enabled\": true,\n   \"level\": \"debug\",\n   \"captureForReplay\": false\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "0d8c6b33-1902-422a-ba19-8a2b2b63b0b9",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "setOptions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "469a58ee-9076-4f92-b1f4-41ae33b02d61",
                            "name": "Delete current logfile from disk",
                            "request": {
                                "name": "Delete current logfile from disk",
                                "description": {
                                    "content": "Delete current logfile from disk",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "logger",
                                        "clearMessages",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "4c6a2bbd-a93f-4a8f-9242-dd2bd1fde3ef",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "clearMessages",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "9409a965-2537-4ffe-a156-bac172c2dec7",
                    "name": "Get all broadcast packets identifiers",
                    "request": {
                        "name": "Get all broadcast packets identifiers",
                        "description": {
                            "content": "Get all broadcast packets identifiers",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "app",
                                "message",
                                "broadcast",
                                "actions",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "321babfd-1dbe-40a7-80d9-d9c40afde624",
                            "name": "Array of broadcast actions",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "message",
                                        "broadcast",
                                        "actions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e150c16b-dfe1-4299-83bf-026cc4104329",
                    "name": "config",
                    "item": [
                        {
                            "id": "633d7f4e-4205-48e4-8242-cbaad11ca8a2",
                            "name": "Reload the app with files from disk",
                            "request": {
                                "name": "Reload the app with files from disk",
                                "description": {
                                    "content": "Reload the app with files from disk",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "reload",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "26dc405d-dd61-4406-a788-70dea994fed3",
                                    "name": "Successful Reload",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "reload",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ecfdf34d-e325-40b4-83c4-97e88fc531cb",
                            "name": "Starts a packet capture on the server WITHOUT a reset",
                            "request": {
                                "name": "Starts a packet capture on the server WITHOUT a reset",
                                "description": {
                                    "content": "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "startPacketCapture",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "1228ebbb-9a95-464f-a648-ed3da745845b",
                                    "name": "OK",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "startPacketCapture",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "3cfaa102-72e1-4cd0-b16d-b9e9bd34d66a",
                            "name": "Starts a packet capture on the server WITH a reset",
                            "request": {
                                "name": "Starts a packet capture on the server WITH a reset",
                                "description": {
                                    "content": "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "startPacketCaptureWithoutReset",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "ebb83c17-aa3d-431c-bf51-54be62670b09",
                                    "name": "OK",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "startPacketCaptureWithoutReset",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ad4d24a2-87ee-4747-ab05-8478525e317e",
                            "name": "Stop an in-progress packet capture and download a zipped file",
                            "request": {
                                "name": "Stop an in-progress packet capture and download a zipped file",
                                "description": {
                                    "content": "Stop an in-progress packet capture and download a zipped file",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "stopPacketCapture",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "8e3d210c-b612-4fbe-81ae-411399ffa208",
                                    "name": "Zip file of packet capture",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "stopPacketCapture",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "zip"
                                        }
                                    ],
                                    "body": "<binary>",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "31a7a5a4-c97e-4f49-b303-6701e0973b11",
            "name": "state",
            "item": [
                {
                    "id": "481fd45c-edfd-4874-99f9-fa3fc241af7d",
                    "name": "Return all sections for the current state of the pool",
                    "request": {
                        "name": "Return all sections for the current state of the pool",
                        "description": {
                            "content": "Retrieve a JSON object of all sections",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "all",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "abda32b5-61d0-4a36-a743-9c0d4c194271",
                            "name": "JSON Object",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "88963190-9b77-46d0-99aa-420f1350818d",
                    "name": "Return a section of poolState.json",
                    "request": {
                        "name": "Return a section of poolState.json",
                        "description": {
                            "content": "Return a section of poolState.json",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                ":section",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "all",
                                    "key": "section"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "c0b69a95-3d04-42e6-9f5f-5a639014073e",
                            "name": "{Section} of poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "3bf705cd-1416-45ee-a0d1-b838a31432b0",
                    "name": "Return an individual chem controller object",
                    "request": {
                        "name": "Return an individual chem controller object",
                        "description": {
                            "content": "Return an individual chem controller object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "chemController",
                                ":id",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "Id of the chem controller",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "<integer>",
                                    "key": "id"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "111a656c-223d-4228-891b-01614d55ff50",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chemController",
                                        "<integer>",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"type\": {\n  \"val\": 3,\n  \"name\": \"homegrown\",\n  \"desc\": \"Homegrown\"\n },\n \"name\": \"Chem Controller\",\n \"status\": {\n  \"val\": 1,\n  \"name\": \"nocomms\",\n  \"desc\": \"No Communication\"\n },\n \"saltLevel\": 2900,\n \"status1\": {\n  \"val\": 101,\n  \"name\": \"monitoring\",\n  \"desc\": \"Monitoring\"\n },\n \"status2\": {\n  \"val\": 20,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"temp\": 86,\n \"tempUnits\": {\n  \"val\": 0,\n  \"name\": \"F\",\n  \"desc\": \"Fahrenheit\"\n },\n \"acidTankLevel\": 6,\n \"orpTankLevel\": 6,\n \"pHLevel\": 7.166,\n \"orpLevel\": 818.3,\n \"waterFlow\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"pHDosingTime\": 217,\n \"orpDosingTime\": 219,\n \"saturationIndex\": -0.034,\n \"equipmentType\": \"chemController\",\n \"alkalinity\": 40,\n \"body\": {\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"calciumHardness\": 710,\n \"cyanuricAcid\": 10,\n \"orpSetpoint\": 660,\n \"pHSetpoint\": 7.4\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f9afc54d-6079-4d79-9faf-8aea5bccc9a5",
                    "name": "Return an individual chem controller object",
                    "request": {
                        "name": "Return an individual chem controller object",
                        "description": {
                            "content": "Return an individual chem controller object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "chemControllers",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "4096730d-c6d6-4c1c-9ec0-11a90757556b",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chemControllers",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"type\": \"array\",\n \"items\": {\n  \"$ref\": \"#/components/examples/stateChemController\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "cdcf6621-e66f-4e54-906d-1f08bcd3eeb0",
                    "name": "chlorinator",
                    "item": [
                        {
                            "id": "df7b7996-3223-4863-adeb-afa14776186d",
                            "name": "Set attributes for a given chlorinator",
                            "request": {
                                "name": "Set attributes for a given chlorinator",
                                "description": {
                                    "content": "See /config/options/chlorinators for values that can be sent",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "5afb9136-9b0e-40f4-ba15-47fb3e2a6724",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "8e1e75a7-9c79-4b6d-8cda-4972634bb7c3",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "07e9928d-81b3-4ac8-9af1-ffff532601d4",
                            "name": "Return an individual chlorinator object",
                            "request": {
                                "name": "Return an individual chlorinator object",
                                "description": {
                                    "content": "Return an individual chlorinator object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "Id of the chlorinator",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "a1a97249-3e10-48e0-8967-c7f673245d86",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d6c14e08-d31d-4aa7-90d3-09d57b73e5a7",
                            "name": "Set attributes for a given chlorinator.  Duplicate of /state/chlorinator.",
                            "request": {
                                "name": "Set attributes for a given chlorinator.  Duplicate of /state/chlorinator.",
                                "description": {
                                    "content": "See /config/options/chlorinators for values that can be sent",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "setChlor"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "fe11e156-ad1b-4104-81e1-d5241e7613bb",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "setChlor"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"Chlorinator State\": {\n  \"$ref\": \"#/components/examples/stateChlorinator\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ea082af7-c704-4219-97b2-218a0e125fe6",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "setChlor"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "09f2fd42-2bea-404b-8641-f17058f36b33",
                            "name": "Set super chlorinate true for a chlorinator.",
                            "request": {
                                "name": "Set super chlorinate true for a chlorinator.",
                                "description": {
                                    "content": "Set super chlorinate true for a chlorinator.  Will set superChlorHours to 24.  Attributes can be set via /state/setChlor.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "superChlorinate"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "9e20b55a-b1ac-450a-b208-f235e818d410",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorinate"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "b35c1850-fd85-4ed8-b421-cb52bd1d059a",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorinate"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "1e0d3c18-ee75-445c-81d8-b34a1fdb9ec3",
                            "name": "Set super chlorinate hours for a chlorinator.",
                            "request": {
                                "name": "Set super chlorinate hours for a chlorinator.",
                                "description": {
                                    "content": "Set super chlorinate hours for a chlorinator.  Will set superChlor to true.\nAttributes can be set via /state/setChlor.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "superChlorHours"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "970541a2-666c-4367-8c34-7f2f163e2d5a",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorHours"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "a874b97a-f051-45ef-ae8e-44e8ba5aaf99",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorHours"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "16fb4329-54ad-4e5c-ac2b-266f97595cfd",
                            "name": "Set pool Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                            "request": {
                                "name": "Set pool Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                                "description": {
                                    "content": "Set poolSetpoint for a chlorinator",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "poolSetpoint"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "5fed288d-4586-4692-8fa5-1fda8f387ff5",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "poolSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "bd15e49b-8573-4525-ae82-cfed050a6f81",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "poolSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d41da3e2-f2bc-4206-a0e5-edf627b1357d",
                            "name": "Set spa Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                            "request": {
                                "name": "Set spa Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                                "description": {
                                    "content": "Set spa Setpoint for a chlorinator",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "spaSetpoint"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "ca9eb1b2-9b51-4970-a825-c6e6bc6f56b8",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "spaSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "2f48ebfb-8c8e-4175-89e3-d41fc576f000",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "spaSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "893f06e8-ad43-4cbe-8685-a9a1cfa976c2",
                    "name": "circuit",
                    "item": [
                        {
                            "id": "1e6182b6-b9d2-4fed-9cc6-bc74d29185c5",
                            "name": "Return an individual circuit object",
                            "request": {
                                "name": "Return an individual circuit object",
                                "description": {
                                    "content": "Return an individual circuit object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "Id of the circuit",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "ccc095c4-479d-42cd-b696-388d13523ce3",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6dfa2b93-0173-450b-843a-9c01523f0366",
                            "name": "Set options for a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a circuit in poolState.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "21a96a64-9d42-4c82-afe3-b06212fde898",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ac018662-a5ec-42f8-ae03-db8fbc41a38f",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "329d447b-0341-4134-a6e4-1a0dec83a6d7",
                            "name": "Set options for a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a circuit in poolState.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the id and it will be toggled.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "toggleState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "fe0eb53b-8544-4804-89fa-02def48bb143",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ab786d8c-98a3-4b90-90a9-bad18478370b",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "43169cc5-6935-4093-bb49-5c13b83ab76a",
                            "name": "Set options for a theme of a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a theme of a circuit in poolState.json",
                                "description": {
                                    "content": "To set theme of a circuit settings, send an object with the id and theme.  Themes are found in /config/options/lightGroups.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setTheme",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "1e1242fc-4bf1-49ea-823b-2744ca9a8501",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 193,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"circuit\",\n  \"desc\": \"Circuit\"\n },\n \"isOn\": true,\n \"equipmentType\": \"circuitGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaPUMP\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 200,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 2,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaCTRL\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 215,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 9,\n   \"circuit\": {\n    \"id\": 9,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa Low\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 75,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 10,\n   \"circuit\": {\n    \"id\": 10,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa High\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 73,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "a11aa635-4af8-444a-ba81-9a88d6a13aeb",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "b988d8ec-464f-43d2-af73-d660cb87dfad",
                            "name": "Set options for the dimmer levels of a circuit in poolState.json",
                            "request": {
                                "name": "Set options for the dimmer levels of a circuit in poolState.json",
                                "description": {
                                    "content": "To set dimmer level of a circuit settings, send an object with the id and level.  \n\n*EXPERIMENTAL* - Should work on IntelliCenter; needs testing on *Touch.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setDimmerLevel",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a9bc9227-f5eb-4256-bffc-2e54d62cbdfe",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setDimmerLevel",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "cae3b5d5-eff1-494a-8ce8-36ef383d627c",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setDimmerLevel",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4c62acf4-5d60-4491-9fc2-6a6dd2ecbc72",
                    "name": "Return an individual pump object",
                    "request": {
                        "name": "Return an individual pump object",
                        "description": {
                            "content": "Return an individual pump object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "pump",
                                ":id",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "Id of the pump",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "<integer>",
                                    "key": "id"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "58689b81-fc61-4465-b8e7-3f54297c62e8",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "pump",
                                        "<integer>",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"command\": 10,\n \"mode\": 0,\n \"driveState\": 0,\n \"watts\": 693,\n \"rpm\": 2250,\n \"flow\": 0,\n \"ppc\": 0,\n \"status\": {\n  \"name\": \"ok\",\n  \"desc\": \"Ok\",\n  \"val\": 1\n },\n \"time\": 929,\n \"type\": {\n  \"val\": 128,\n  \"name\": \"vs\",\n  \"desc\": \"Intelliflo VS\",\n  \"maxPrimingTime\": 6,\n  \"minSpeed\": 450,\n  \"maxSpeed\": 3450,\n  \"maxCircuits\": 8,\n  \"hasAddress\": true\n },\n \"name\": \"Pool\",\n \"equipmentType\": \"pump\",\n \"minSpeed\": 450,\n \"maxSpeed\": 3450,\n \"speedStepSize\": 10,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 0,\n    \"equipmentType\": \"circuit\",\n    \"name\": \"Not Used\",\n    \"speed\": 0\n   },\n   \"speed\": 1830,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 4,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Cleaner\",\n    \"type\": {\n     \"val\": 5,\n     \"name\": \"mastercleaner\",\n     \"desc\": \"Master Cleaner\"\n    },\n    \"nameId\": 22,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 2460,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 3,\n   \"circuit\": {\n    \"id\": 11,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spillway\",\n    \"type\": {\n     \"val\": 14,\n     \"name\": \"spillway\",\n     \"desc\": \"Spillway\"\n    },\n    \"nameId\": 79,\n    \"equipmentType\": \"feature\"\n   },\n   \"speed\": 2500,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 4,\n   \"circuit\": {\n    \"id\": 6,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Pool\",\n    \"type\": {\n     \"val\": 2,\n     \"name\": \"pool\",\n     \"desc\": \"Pool\"\n    },\n    \"nameId\": 61,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 1800,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 5,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 72,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 1750,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 6,\n   \"circuit\": {\n    \"id\": 128,\n    \"isOn\": true,\n    \"type\": {\n     \"val\": 128,\n     \"name\": \"solar\",\n     \"desc\": \"Solar\",\n     \"assignableToPumpCircuit\": true\n    },\n    \"name\": \"Solar\",\n    \"equipmentType\": \"virtualCircuit\"\n   },\n   \"speed\": 2250,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 7,\n   \"circuit\": {\n    \"id\": 131,\n    \"isOn\": false,\n    \"type\": {\n     \"val\": 131,\n     \"name\": \"spaHeater\",\n     \"desc\": \"Spa Heater\",\n     \"assignableToPumpCircuit\": true\n    },\n    \"name\": \"Spa Heater\",\n    \"equipmentType\": \"virtualCircuit\"\n   },\n   \"speed\": 2650,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 8,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Jets\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 46,\n    \"equipmentType\": \"feature\"\n   },\n   \"speed\": 3050,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f0a526f4-c58a-4675-8234-3a0d2a3e4657",
                    "name": "feature",
                    "item": [
                        {
                            "id": "a44f8478-72c9-4754-9fd2-225424244c9a",
                            "name": "Set options for a feature in poolState.json",
                            "request": {
                                "name": "Set options for a feature in poolState.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "feature",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "c1806f9b-862c-486f-8528-65e9d0ff4d79",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 11,\n \"showInFeatures\": true,\n \"isOn\": false,\n \"name\": \"Spillway\",\n \"type\": {\n  \"val\": 14,\n  \"name\": \"spillway\",\n  \"desc\": \"Spillway\"\n },\n \"nameId\": 79,\n \"equipmentType\": \"feature\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "39c273e6-eef8-4dd0-b290-2340fc331732",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a2bbe424-53a7-4430-9737-124c19609e62",
                            "name": "Set options for a feature in poolState.json",
                            "request": {
                                "name": "Set options for a feature in poolState.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the id and it will be toggled.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "feature",
                                        "toggleState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "10a45390-753f-4356-ba90-3a624f0609ab",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "6e5efa36-05b9-4a6b-956d-0b87ee872a7f",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "85a1f585-9cc3-4a45-ad35-b337a1abe569",
                    "name": "Set options for a circuitgroup in poolState.json",
                    "request": {
                        "name": "Set options for a circuitgroup in poolState.json",
                        "description": {
                            "content": "To set circuitGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "circuitGroup",
                                "setState",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "4951ad4c-862b-45bf-ba78-02a950465fda",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuitGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 193,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"circuit\",\n  \"desc\": \"Circuit\"\n },\n \"isOn\": true,\n \"equipmentType\": \"circuitGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaPUMP\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 200,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 2,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaCTRL\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 215,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 9,\n   \"circuit\": {\n    \"id\": 9,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa Low\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 75,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 10,\n   \"circuit\": {\n    \"id\": 10,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa High\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 73,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c84bc206-985b-425e-ac71-3e935d28474f",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuitGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e4781f43-641e-454a-9643-d5c66de51b63",
                    "name": "light Group",
                    "item": [
                        {
                            "id": "de74307a-4e9b-44d5-900b-f9f912c747b6",
                            "name": "Set options for a lightGroup in poolState.json",
                            "request": {
                                "name": "Set options for a lightGroup in poolState.json",
                                "description": {
                                    "content": "To set lightGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "lightGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "0b62265e-b457-445a-a4c3-67d26444bef0",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"action\": {\n  \"val\": 0,\n  \"name\": \"ready\",\n  \"desc\": \"Ready\"\n },\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": {\n  \"val\": 3,\n  \"name\": \"intellibrite\",\n  \"desc\": \"IntelliBrite\"\n },\n \"equipmentType\": \"lightGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 15,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 74,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Entry Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 28,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  }\n ],\n \"lightingTheme\": {\n  \"val\": 196,\n  \"name\": \"white\",\n  \"desc\": \"White\",\n  \"type\": \"intellibrite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d44b7d6f-fa5d-4662-bc1b-5d869e15111b",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "48c9ef45-0541-4088-a659-09a803816701",
                            "name": "Set options for a lightGroup in poolState.json",
                            "request": {
                                "name": "Set options for a lightGroup in poolState.json",
                                "description": {
                                    "content": "To set lightGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "lightGroup",
                                        "setTheme",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "fcd58eaa-65d4-4bb0-8991-30057c6d0479",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"action\": {\n  \"val\": 0,\n  \"name\": \"ready\",\n  \"desc\": \"Ready\"\n },\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": {\n  \"val\": 3,\n  \"name\": \"intellibrite\",\n  \"desc\": \"IntelliBrite\"\n },\n \"equipmentType\": \"lightGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 15,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 74,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Entry Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 28,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  }\n ],\n \"lightingTheme\": {\n  \"val\": 196,\n  \"name\": \"white\",\n  \"desc\": \"White\",\n  \"type\": \"intellibrite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "85a993b3-e065-4709-985e-c9e39699adea",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d91bbc1a-d028-45e5-9fab-1d5932d9dca6",
                            "name": "{id}",
                            "item": [
                                {
                                    "id": "5584078e-26f3-41e3-a515-7f237d81b425",
                                    "name": "Set lightGroup at specified Id to colorSync mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to colorSync mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to colorSync mode.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSync",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "8e12ef0c-cfb5-47ab-8543-66f4c59d652a",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.  ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSync",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "4509d895-dab7-42b8-8d50-dc8cc9f648b2",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSync",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "e2728298-6f34-49c8-8932-9b37978e61d5",
                                    "name": "Set lightGroup at specified Id to color mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to color mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to color mode.  Obtain valid colors from /config/options/lightGroups",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSet",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "bea0fab8-5d2c-456d-9d82-bcf805c4f8cf",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.      ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSet",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "31b63444-a748-47a0-b840-e65e85b96704",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSet",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "5eb2d3f1-4c3e-4dcf-9d42-96602bbc61f1",
                                    "name": "Set lightGroup at specified Id to colorSwim mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to colorSwim mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to colorSwim mode. ",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSwim",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "4b1aacfe-5ce9-48f7-99d7-1dde7761691d",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.      ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSwim",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "4661157f-f0a6-4bc6-ba7a-41b75d4039c4",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSwim",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "3950bf3a-cbae-4590-a0d1-d575d4050468",
                    "name": "Manually input temperatures.  This is only for virtual/standalone controllers.  Values will be overwritten by any OCP",
                    "request": {
                        "name": "Manually input temperatures.  This is only for virtual/standalone controllers.  Values will be overwritten by any OCP",
                        "description": {
                            "content": "To adjust the temperature, send an object with the current temp.  If there is an offset stored in sys.general.options it will be applied to the input temperature.  (`air` or `solar` can bu used in place of airSensor1/solarSensor1.)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "temps",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "5e7e1a3f-0c7b-4ba4-adf1-33a45c11ea53",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "temps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"units\": {\n  \"val\": 0,\n  \"name\": \"F\",\n  \"desc\": \"Fahrenheit\"\n },\n \"waterSensor1\": 80,\n \"bodies\": [\n  {\n   \"id\": 1,\n   \"heatMode\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"setPoint\": 92,\n   \"temp\": 80,\n   \"isOn\": true,\n   \"name\": \"Pool\",\n   \"circuit\": 6,\n   \"heatStatus\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"heaterOptions\": {\n    \"total\": 2,\n    \"gas\": 1,\n    \"solar\": 1,\n    \"heatpump\": 0,\n    \"ultratemp\": 0,\n    \"hybrid\": 0\n   }\n  },\n  {\n   \"id\": 2,\n   \"isOn\": false,\n   \"heatMode\": {\n    \"val\": 1,\n    \"name\": \"heater\",\n    \"desc\": \"Heater\"\n   },\n   \"name\": \"Spa\",\n   \"circuit\": 1,\n   \"heatStatus\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"heaterOptions\": {\n    \"total\": 2,\n    \"gas\": 1,\n    \"solar\": 1,\n    \"heatpump\": 0,\n    \"ultratemp\": 0,\n    \"hybrid\": 0\n   },\n   \"setPoint\": 99\n  }\n ],\n \"air\": 64,\n \"solar\": 99,\n \"equipmentType\": \"temps\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "aaf15212-1153-47d5-96bb-9c03e7856bcd",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "temps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "9a0a7706-1df9-4c7a-9bce-96269fba97cc",
                    "name": "body",
                    "item": [
                        {
                            "id": "da97c4a8-06f8-44bb-a13f-22dd90fad139",
                            "name": "Set heat mode for a body in poolState.json",
                            "request": {
                                "name": "Set heat mode for a body in poolState.json",
                                "description": {
                                    "content": "To set heat mode of a body, send an object with the id and mode.  `mode` can be a numeric value or string value as referenced in /config/options/heaters.  ",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "body",
                                        "heatMode",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "13cb9bca-ffc6-4a50-8461-8eb2ef0ada7c",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "heatMode",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f5cac150-daef-48cb-955c-2c32b066a596",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "heatMode",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "df004e77-8b70-4b73-b17a-c06f3030d652",
                            "name": "Set temp for a body in poolState.json",
                            "request": {
                                "name": "Set temp for a body in poolState.json",
                                "description": {
                                    "content": "To set temp of a body, send an object with the id and identifier for the body (name, id or circuit).  See schema example. ",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "body",
                                        "setPoint",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "bac269af-4523-4b76-927a-c46fe268a88f",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "setPoint",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"heatMode\": {\n  \"val\": 0,\n  \"name\": \"off\",\n  \"desc\": \"Off\"\n },\n \"name\": \"Pool\",\n \"circuit\": 6,\n \"heatStatus\": {\n  \"val\": 0,\n  \"name\": \"off\",\n  \"desc\": \"Off\"\n },\n \"isOn\": false,\n \"setPoint\": 89\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f0f9b5a5-a916-4c60-b908-885a44c34d9c",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "setPoint",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4dfa7fbe-7e80-4502-b08d-69fcb851d9a1",
                    "name": "Cancel all delays on OCP",
                    "request": {
                        "name": "Cancel all delays on OCP",
                        "description": {
                            "content": "Cancel all delays on OCP",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "cancelDelay",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "ab3cbd9a-9c02-4d65-982a-01b68c15a5c8",
                            "name": "OK",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "cancelDelay",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "4c168cc5-967e-46e9-95a1-246b48ea14db",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "cancelDelay",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        }
    ],
    "event": [],
    "variable": [
        {
            "id": "protocol",
            "description": {
                "content": "undefined (is one of https,http)",
                "type": "text/plain"
            },
            "type": "any",
            "value": "https"
        },
        {
            "id": "server",
            "description": {
                "content": "undefined",
                "type": "text/plain"
            },
            "type": "any",
            "value": "server"
        },
        {
            "id": "port",
            "description": {
                "content": "undefined",
                "type": "text/plain"
            },
            "type": "any",
            "value": "4201"
        },
        {
            "id": "baseUrl",
            "type": "string",
            "value": "{{protocol}}://{{server}}:{{port}}/"
        }
    ],
    "info": {
        "_postman_id": "42849f24-ac3b-4d9a-b64b-369425bb5323",
        "name": "nodejs-poolController API",
        "version": {
            "raw": "6.0.0",
            "major": 6,
            "minor": 0,
            "patch": 0,
            "prerelease": [],
            "build": [],
            "string": "6.0.0"
        },
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": {
            "content": "API's to access, manage and control your pool equipment.  You can find the main project at [nodejs-poolController](https://github.com/tagyoureit/nodejs-poolController/).\nThe data structures are defined in the main app's [wiki](https://github.com/tagyoureit/nodejs-poolController/wiki/Version-6-Data-Structures).\n\nThese api's are `live` in the sense that you can execute any of them against your local nodejs-poolController app(*).  \n1. Select one of the default servers or enter your server:port into the Server Variables area\n1. Open up any endpoint\n1. Click on \"Try it out\"\n1. If there are Parameters or JSON variables that need to be included in the request, fill them out\n1. Click execute and you can see the live results from your server \"To set body settings, send an object with the values you want to change from /config/options/bodies.\"\n\n* Note: If you are trying to access your njsPC app on any machine other than `localhost` you will need to connect to it over `https` due to [CORS](https://swagger.io/docs/open-source-tools/swagger-ui/usage/cors/) restrictions.\n** Note2: There is currently a bug with the `https` service in njsPC.  It will be fixed shortly.\n\nThere are options for running the API documentation locally on your computer:\n1. You can also download a [Postman collection](https://github.com/tagyoureit/nodejs-poolcontroller-api/blob/master/nodejs-poolcontroller-api.json) you can download and import into your local app.\n1. Download the [YAML](https://github.com/tagyoureit/nodejs-poolcontroller-api/blob/master/nodejs-poolcontroller-api.yaml) and paste it in http://editor.swagger.io\n1. Download a code editor like VSCode and use a [Swagger Preview Extension](https://marketplace.visualstudio.com/items?itemName=Arjun.swagger-viewer)\n\nWant to help?\n1. Clone the [nodejs-poolcontroller-api repository](https://github.com/tagyoureit/nodejs-poolcontroller-api)\n1. Create a new branch\n1. Make changes\n1. Open a Pull Request\n(Or, just open up an issue and it will get fixed)",
            "type": "text/plain"
        }
    }
}