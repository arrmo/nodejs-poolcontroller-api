{
    "item": [
        {
            "id": "e0c774a8-a7d8-42f7-8102-d946c09cbf8d",
            "name": "config",
            "item": [
                {
                    "id": "68522d6a-87d9-450e-9433-f5b8bc5c4972",
                    "name": "Shortcut for /config/all",
                    "request": {
                        "name": "Shortcut for /config/all",
                        "description": {
                            "content": "Shortcut for /config/all",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "d6829b77-d8ca-411a-90f6-815c1a776223",
                            "name": "poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "cb9cb13a-0174-47f0-8855-0a147c5d582c",
                    "name": "circuits",
                    "item": [
                        {
                            "id": "b7bb73b0-fe24-475b-b35d-7002b26acb53",
                            "name": "Get an array of all circuit objects with config data",
                            "request": {
                                "name": "Get an array of all circuit objects with config data",
                                "description": {
                                    "content": "Array of circuit config objects",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "cbaaab74-214e-44c9-92bb-a7ef91264280",
                                    "name": "Circuit config array",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"isOn\": \"<boolean>\",\n  \"nameId\": \"<string>\",\n  \"isActive\": \"<boolean>\",\n  \"freeze\": \"<boolean>\",\n  \"showInFeatures\": \"<boolean>\",\n  \"eggTimer\": \"<integer>\",\n  \"equipmentType\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"isOn\": \"<boolean>\",\n  \"nameId\": \"<string>\",\n  \"isActive\": \"<boolean>\",\n  \"freeze\": \"<boolean>\",\n  \"showInFeatures\": \"<boolean>\",\n  \"eggTimer\": \"<integer>\",\n  \"equipmentType\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "70192dfa-25ab-4fe2-85ff-e8a4e2eb7da1",
                            "name": "Get a list of valid controller names for circuits (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object in\n/config/options/circuits or /config/options/features instead.",
                            "request": {
                                "name": "Get a list of valid controller names for circuits (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object in\n/config/options/circuits or /config/options/features instead.",
                                "description": {
                                    "content": "Get a list of valid controller names for circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        "names",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "16ae746c-83e4-4179-86fc-7917c8aaf8b7",
                                    "name": "Array of controller function objects valid for names",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                "names",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "5ea8479b-0e80-4655-99bd-2c4666a481ec",
                            "name": "Get a list of valid controller functions for circuits\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                            "request": {
                                "name": "Get a list of valid controller functions for circuits\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                                "description": {
                                    "content": "Get a list of valid controller functions for circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        "functions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "eb9754dd-6c56-47c0-969f-e5a20596992a",
                                    "name": "Array of controller function objects valid for circuits",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                "functions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "9a419130-c7fa-43be-ac24-d35ebb4e77dc",
                    "name": "body",
                    "item": [
                        {
                            "id": "e8ef978d-e944-40df-8c65-93ea83efac08",
                            "name": "Set options related to the \"Body\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Body\" section in poolConfig.json",
                                "description": {
                                    "content": "To set body settings, send an object with the values you want to change from /config/options/bodies.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "body",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "fbfb9c31-2e88-4327-b403-d56bf51e9766",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 2,\n \"name\": \"Spa\",\n \"type\": 0,\n \"isActive\": true,\n \"heatMode\": 3,\n \"circuit\": 1,\n \"setPoint\": 95\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "c6e26a04-0d73-410c-9ff0-c4a8497f5c2d",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0e0e07d4-e909-467c-8f9e-ed8fabc99ab4",
                            "name": "Get heat modes for the body specified by the id",
                            "request": {
                                "name": "Get heat modes for the body specified by the id",
                                "description": {
                                    "content": "Get heat modes for the body specified by the id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "body",
                                        ":id",
                                        "heatModes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "id of the body",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "fe5627f6-ca66-4a9c-a43b-8d46ded37d49",
                                    "name": "Array of heat mode objects",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                "<integer>",
                                                "heatModes",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "03467f83-5f43-41f2-ba03-641ce37df259",
                    "name": "circuit",
                    "item": [
                        {
                            "id": "2d4cc84c-e1c9-4c13-a166-2be9f4784679",
                            "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the values you want to change from /config/options/bodies.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "c3f8f54e-5648-4c86-8085-ba8de3668782",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": 1,\n \"isActive\": true,\n \"freeze\": false,\n \"showInFeatures\": true,\n \"eggTimer\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "faf73919-54df-46ff-9039-4ac7abb23390",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "bbf47854-43fa-493a-ad2f-e07870e588f4",
                            "name": "Delete a circuit at the specified id",
                            "request": {
                                "name": "Delete a circuit at the specified id",
                                "description": {
                                    "content": "Delete a circuit at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "5ebd3a74-dc06-434d-8ea9-503966d11efe",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f666182f-1cea-49ff-ad08-297f67b047d4",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "e8fb6a77-6839-4b9f-9c56-e463d16858d0",
                            "name": "Get all available names (built-in and custom).  (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object \nin /config/options/circuits or /config/options/features instead.",
                            "request": {
                                "name": "Get all available names (built-in and custom).  (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object \nin /config/options/circuits or /config/options/features instead.",
                                "description": {
                                    "content": "Get all available names (built-in and custom).  (*Touch only)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        "names",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "056b72b3-d037-4e69-8ebf-8ec7049d550d",
                                    "name": "Array of name objects",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                "names",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": 1,\n  \"name\": \"aerator\",\n  \"desc\": \"Aerator\"\n },\n {\n  \"val\": 2,\n  \"name\": \"airblower\",\n  \"desc\": \"Air Blower\"\n },\n {\n  \"val\": 3,\n  \"name\": \"aux1\",\n  \"desc\": \"AUX 1\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "f30b8ad0-c5be-42e9-ab5a-0218ad0be59e",
                            "name": "Get an array of objects that can include circuits, features, groups, virtual circuits.",
                            "request": {
                                "name": "Get an array of objects that can include circuits, features, groups, virtual circuits.",
                                "description": {
                                    "content": "Get an array of objects that can include circuits, features, groups, virtual circuits.  Any parameter not\nincluded will be included (must specify false to exclude values)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        "references",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Include/exclude circuitss in the references object",
                                            "key": "circuits",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude features in the references object",
                                            "key": "features",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude groupss in the references object",
                                            "key": "groups",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude virtuals in the references object",
                                            "key": "virtual",
                                            "value": "<boolean>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "5ba34dce-9be7-401e-b8ee-b4805c4a674f",
                                    "name": "Array of circuits/features/groups/virtual circuit objects.",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                "references",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "circuits",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "features",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "groups",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "virtual",
                                                    "value": "<boolean>"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": 11,\n  \"name\": \"Spillway\",\n  \"type\": 14,\n  \"equipmentType\": \"feature\",\n  \"nameId\": 79\n },\n {\n  \"id\": 12,\n  \"name\": \"Waterfall 1\",\n  \"type\": 0,\n  \"equipmentType\": \"feature\",\n  \"nameId\": 87\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "af928919-b331-483f-ab0a-f2ac34a9b7d8",
                    "name": "options",
                    "item": [
                        {
                            "id": "bf342c83-7df8-4582-9f7b-6aa86f66f11c",
                            "name": "Get all available options needed to configure general options",
                            "request": {
                                "name": "Get all available options needed to configure general options",
                                "description": {
                                    "content": "Retrieves: countries, tempUnits, timeZones, clockSources, clockModes, pool, sensors",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "0f51ff37-8913-4f17-b110-325d4133de8c",
                                    "name": "Object containing all available general options for the pool type",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "general",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"countries\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"tempUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"timeZones\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"loc\": \"<string>\",\n   \"abbrev\": \"<string>\",\n   \"utcOffset\": \"<integer>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"loc\": \"<string>\",\n   \"abbrev\": \"<string>\",\n   \"utcOffset\": \"<integer>\"\n  }\n ],\n \"clockSources\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"clockModes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"pool\": {\n  \"options\": {\n   \"adjustDST\": \"<boolean>\",\n   \"clockMode\": \"<integer>\",\n   \"clockSource\": \"<string>\",\n   \"pumpDelay\": \"<boolean>\",\n   \"manualHeat\": \"<boolean>\",\n   \"units\": \"<integer>\"\n  },\n  \"owner\": {\n   \"name\": \"<string>\",\n   \"phone\": \"<string>\",\n   \"email\": \"<string>\",\n   \"email2\": \"<string>\",\n   \"phone2\": \"<string>\"\n  },\n  \"location\": {\n   \"address\": \"<string>\",\n   \"city\": \"<string>\",\n   \"state\": \"<string>\",\n   \"zip\": \"<string>\",\n   \"country\": \"<string>\",\n   \"latitude\": \"<string>\",\n   \"longitude\": \"<string>\",\n   \"timeZone\": \"<integer>\"\n  },\n  \"alias\": \"<string>\"\n },\n \"sensors\": [\n  {\n   \"name\": \"<string>\",\n   \"temp\": \"<integer>\",\n   \"tempAdj\": \"<integer>\",\n   \"binding\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"temp\": \"<integer>\",\n   \"tempAdj\": \"<integer>\",\n   \"binding\": \"<string>\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "cbea70bc-62ae-4325-b7cf-87b607eb5a0f",
                            "name": "Get all available options to set circuits",
                            "request": {
                                "name": "Get all available options to set circuits",
                                "description": {
                                    "content": "Returns: maxCircuits, invalidIds, equipmentIds, equipmentNames, functions, circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "circuits",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "47ccedee-1479-415f-b564-6f7fd59378f5",
                                    "name": "Object containing all available general options for the circuits",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "circuits",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"invalidIds\": [\n  \"<integer>\",\n  \"<integer>\"\n ],\n \"equipmentIds\": {\n  \"start\": \"<integer>\",\n  \"stop\": \"<integer>\"\n },\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"functions\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"maxCircuits\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "500646f6-bcd4-45c6-b264-c98d8bc6bb21",
                            "name": "Get all options needed to set circuit groups",
                            "request": {
                                "name": "Get all options needed to set circuit groups",
                                "description": {
                                    "content": "Get all options needed to set circuit groups",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "circuitGroups",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "2a0019c7-05a4-48d3-b5b8-072451894070",
                                    "name": "Object containing all available general options for the circuit groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "circuitGroups",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"circuitGroups\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    }\n   ]\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    }\n   ]\n  }\n ],\n \"maxCircuitGroups\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "e9ec91f5-a5d9-431f-8169-b340ee055046",
                            "name": "Get all available options to set lightGroups",
                            "request": {
                                "name": "Get all available options to set lightGroups",
                                "description": {
                                    "content": "Returns: maxLightGroups, invalidIds, equipmentIds, equipmentNames, functions, features",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "lightGroups",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "55812c7e-d666-4a44-8559-808cadb8f01b",
                                    "name": "Object containing all available general options for the light groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "lightGroups",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"maxLightGroups\": 1,\n \"equipmentNames\": [\n  {\n   \"val\": 1,\n   \"name\": \"aerator\",\n   \"desc\": \"Aerator\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"airblower\",\n   \"desc\": \"Air Blower\"\n  },\n  {\n   \"val\": 3,\n   \"name\": \"aux1\",\n   \"desc\": \"AUX 1\"\n  },\n  {\n   \"val\": 4,\n   \"name\": \"aux2\",\n   \"desc\": \"AUX 2\"\n  }\n ],\n \"themes\": [\n  {\n   \"val\": 0,\n   \"name\": \"off\",\n   \"desc\": \"Off\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 1,\n   \"name\": \"on\",\n   \"desc\": \"On\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 128,\n   \"name\": \"colorsync\",\n   \"desc\": \"Color Sync\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 144,\n   \"name\": \"colorswim\",\n   \"desc\": \"Color Swim\",\n   \"type\": \"intellibrite\"\n  }\n ],\n \"colors\": [\n  {\n   \"val\": 0,\n   \"name\": \"white\",\n   \"desc\": \"White\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"lightgreen\",\n   \"desc\": \"Light Green\"\n  },\n  {\n   \"val\": 4,\n   \"name\": \"green\",\n   \"desc\": \"Green\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": 2,\n   \"name\": \"Pool LtDeep\",\n   \"type\": 16,\n   \"equipmentType\": \"circuit\",\n   \"nameId\": 205\n  },\n  {\n   \"id\": 7,\n   \"name\": \"Spa Light\",\n   \"type\": 16,\n   \"equipmentType\": \"circuit\",\n   \"nameId\": 74\n  }\n ],\n \"lightGroups\": [\n  {\n   \"id\": 192,\n   \"circuits\": [\n    {\n     \"id\": 1,\n     \"circuit\": 2,\n     \"position\": 2,\n     \"color\": 6,\n     \"swimDelay\": 0,\n     \"isActive\": true\n    },\n    {\n     \"id\": 2,\n     \"circuit\": 7,\n     \"position\": 2,\n     \"color\": 14,\n     \"swimDelay\": 2,\n     \"isActive\": true\n    },\n    {\n     \"id\": 3,\n     \"circuit\": 8,\n     \"position\": 3,\n     \"color\": 2,\n     \"swimDelay\": 4,\n     \"isActive\": true\n    }\n   ],\n   \"isActive\": true,\n   \"name\": \"Intellibrite\",\n   \"type\": 3,\n   \"lightingTheme\": 195\n  }\n ],\n \"functions\": [\n  {\n   \"val\": 0,\n   \"name\": \"generic\",\n   \"desc\": \"Generic\"\n  },\n  {\n   \"val\": 1,\n   \"name\": \"spa\",\n   \"desc\": \"Spa\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"pool\",\n   \"desc\": \"Pool\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "e152c288-d324-4c0e-a7a7-610396ee0d41",
                            "name": "Get all available options to set features",
                            "request": {
                                "name": "Get all available options to set features",
                                "description": {
                                    "content": "Returns: maxCircuitGroups, equipmentNames, circuits, circuitGroups",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "features",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d83ea1e3-6377-4adf-a670-108f8fe00d88",
                                    "name": "Object containing all available general options for the circuit groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "features",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"invalidIds\": [\n  \"<integer>\",\n  \"<integer>\"\n ],\n \"equipmentIds\": {\n  \"start\": \"<integer>\",\n  \"stop\": \"<integer>\"\n },\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"functions\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"features\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"nameId\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"macro\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"nameId\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"macro\": \"<boolean>\"\n  }\n ],\n \"maxFeatures\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "46389fab-42f3-48e6-98e1-3c28656246ae",
                            "name": "Get all available options to set bodies",
                            "request": {
                                "name": "Get all available options to set bodies",
                                "description": {
                                    "content": "Returns: maxBodies, bodyTypes, bodies",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "bodies",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "dcad7e45-a6e1-4cd4-b872-653447b0b7bd",
                                    "name": "Object containing all available general options for the bodies",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "bodies",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"bodyTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  }\n ],\n \"maxBodies\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "9bce267a-14e4-4847-b036-2481543d1138",
                            "name": "Get all available options to set valves",
                            "request": {
                                "name": "Get all available options to set valves",
                                "description": {
                                    "content": "Returns: maxValves, valveTypes, circuits, valves",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "valves",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "906baacb-c2f0-4d6d-8e1e-705a3cd3d62d",
                                    "name": "Object containing all available general options for the valves",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "valves",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"valveTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"valves\": [\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"isIntake\": \"<boolean>\",\n   \"isReturn\": \"<boolean>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"isIntake\": \"<boolean>\",\n   \"isReturn\": \"<boolean>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"maxValves\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7dcea3cf-7d77-458a-a553-8398704f2346",
                            "name": "Get all available options to set pumps",
                            "request": {
                                "name": "Get all available options to set pumps",
                                "description": {
                                    "content": "Returns: maxPumps, pumpUnits, pumpTypes, models, circuits, bodies, pumps",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "pumps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "b2fe8134-4905-4f31-ba49-251cffa47048",
                                    "name": "Object containing all available general options for the pumps",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "pumps",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"pumpUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"pumpTypes\": {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\",\n  \"maxCircuits\": \"<integer>\",\n  \"hasAddress\": \"<boolean>\",\n  \"hasBody\": \"<boolean>\"\n },\n \"models\": {\n  \"ss\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"ds\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vs\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vf\": [\n   {\n    \"ss\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"ds\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vf\": [\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     },\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     }\n    ],\n    \"vsf\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vssvrs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ]\n   },\n   {\n    \"ss\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"ds\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vf\": [\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     },\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     }\n    ],\n    \"vsf\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vssvrs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ]\n   }\n  ],\n  \"vsf\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vssvrs\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ]\n },\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  }\n ],\n \"pumps\": [\n  {\n   \"id\": \"<integer>\",\n   \"model\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    }\n   ],\n   \"flowStepSize\": \"<integer>\",\n   \"minFlow\": \"<integer>\",\n   \"maxFlow\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"primingTime\": \"<integer>\",\n   \"speedStepSize\": \"<integer>\",\n   \"minSpeed\": \"<integer>\",\n   \"maxSpeed\": \"<integer>\",\n   \"primingSpeed\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"model\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    }\n   ],\n   \"flowStepSize\": \"<integer>\",\n   \"minFlow\": \"<integer>\",\n   \"maxFlow\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"primingTime\": \"<integer>\",\n   \"speedStepSize\": \"<integer>\",\n   \"minSpeed\": \"<integer>\",\n   \"maxSpeed\": \"<integer>\",\n   \"primingSpeed\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"maxPumps\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7813f47c-1cfb-4fc7-9387-9353a36f7094",
                            "name": "Get all available options to set schedules",
                            "request": {
                                "name": "Get all available options to set schedules",
                                "description": {
                                    "content": "Returns: maxSchedules, tempUnits, scheduleTimeTypes, schedules, scheduleTypes, scheduleDays,",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "schedules",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "5a06c03c-557d-4fc4-ab3f-9e674a3cf80a",
                                    "name": "Object containing all available general options for the schedules",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "schedules",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"tempUnits\": {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n \"scheduleTimeTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"scheduleTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\",\n   \"startDate\": \"<boolean>\",\n   \"startTime\": \"<boolean>\",\n   \"endTime\": \"<boolean>\",\n   \"days\": \"<string>\",\n   \"heatSource\": \"<boolean>\",\n   \"heatSetpoint\": \"<boolean>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\",\n   \"startDate\": \"<boolean>\",\n   \"startTime\": \"<boolean>\",\n   \"endTime\": \"<boolean>\",\n   \"days\": \"<string>\",\n   \"heatSource\": \"<boolean>\",\n   \"heatSetpoint\": \"<boolean>\"\n  }\n ],\n \"scheduleDays\": [\n  {\n   \"val\": \"<integer>\",\n   \"days\": {\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"down\": \"<integer>\"\n   }\n  },\n  {\n   \"val\": \"<integer>\",\n   \"days\": {\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"down\": \"<integer>\"\n   }\n  }\n ],\n \"heatSources\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"schedules\": [\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"startTime\": \"<integer>\",\n   \"endTime\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"scheduleDays\": \"<integer>\",\n   \"runOnce\": \"<integer>\",\n   \"scheduleType\": \"<integer>\",\n   \"startTimeType\": \"<integer>\",\n   \"endTimeType\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"startTime\": \"<integer>\",\n   \"endTime\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"scheduleDays\": \"<integer>\",\n   \"runOnce\": \"<integer>\",\n   \"scheduleType\": \"<integer>\",\n   \"startTimeType\": \"<integer>\",\n   \"endTimeType\": \"<integer>\"\n  }\n ],\n \"maxSchedules\": \"<integer>\",\n \"clockMode\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a7ea3557-4c4f-46e9-a5b4-951a23a57d79",
                            "name": "Get all available options to set heaters",
                            "request": {
                                "name": "Get all available options to set heaters",
                                "description": {
                                    "content": "Returns: maxHeaters, heaters, heaterTypes, heatModes",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "heaters",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "a9406225-0018-4719-887c-9344541a4b7a",
                                    "name": "Object containing all available general options for the heaters",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "heaters",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"heatModes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"heaterTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"heaters\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"freeze\": \"<boolean>\",\n   \"coolingEnabled\": \"<boolean>\",\n   \"startTempDelta\": \"<integer>\",\n   \"stopTempDelta\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"freeze\": \"<boolean>\",\n   \"coolingEnabled\": \"<boolean>\",\n   \"startTempDelta\": \"<integer>\",\n   \"stopTempDelta\": \"<integer>\"\n  }\n ],\n \"maxHeaters\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "dcee6ec3-61a7-4231-af6c-78533800890c",
                            "name": "Get a list of custom names (*Touch only)",
                            "request": {
                                "name": "Get a list of custom names (*Touch only)",
                                "description": {
                                    "content": "Returns: customNames, maxCustomNames. (*Touch only)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "19b315ea-2d6e-485a-85e3-82d26adfc726",
                                    "name": "Object with maxCustomNames and customNames",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "customNames",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"maxCustomNames\": 10,\n \"customNames\": [\n  {\n   \"id\": 0,\n   \"name\": \"WtrFall 1\"\n  },\n  {\n   \"id\": 1,\n   \"name\": \"WtrFall 1.5\"\n  },\n  {\n   \"id\": 2,\n   \"name\": \"WtrFall 2\"\n  },\n  {\n   \"id\": 3,\n   \"name\": \"WtrFall 3\"\n  },\n  {\n   \"id\": 4,\n   \"name\": \"Pool High\"\n  },\n  {\n   \"id\": 5,\n   \"name\": \"Pool LtDeep\"\n  },\n  {\n   \"id\": 8,\n   \"name\": \"USERNAME-09\"\n  },\n  {\n   \"id\": 9,\n   \"name\": \"USERNAME-aa\"\n  },\n  {\n   \"id\": 6,\n   \"name\": \"Pool LtShlw\"\n  },\n  {\n   \"id\": 7,\n   \"name\": \"USERNAME-08\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "1c89a44f-a6cd-4993-8a78-cb6321802cb4",
                            "name": "Get all available options to set chem controllers",
                            "request": {
                                "name": "Get all available options to set chem controllers",
                                "description": {
                                    "content": "Returns: types, bodies, tempUnits, status, alarms, warnings, controllers, maxChemControllers",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "chemControllers",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "8c7d42c0-6e58-4c3b-81d2-a5867c500836",
                                    "name": "Object containing all available general options for the chlorinators",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "chemControllers",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"types\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"tempUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"status\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"dosingStatus\": {\n  \"value\": \"reference #/components/schemas/stateChemControllerDosingStatus not found in the api spec\"\n },\n \"warnings\": {\n  \"value\": \"reference #/components/schemas/stateChemControllerWarnings not found in the api spec\"\n },\n \"alams\": {\n  \"value\": \"reference #/components/schemas/stateChemControllerAlarms not found in the api spec\"\n },\n \"controllers\": [\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"isVirtual\": \"<boolean>\",\n   \"name\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"phSetpoint\": \"<number>\",\n   \"orpSetpoint\": \"<boolean>\",\n   \"alkalinity\": \"<integer>\",\n   \"calciumHardness\": \"<integer>\",\n   \"cyanuricAcid\": \"<integer>\",\n   \"isFlowDelayMode\": \"<boolean>\",\n   \"phManualDosing\": \"<boolean>\",\n   \"isIntelliChlorUsed\": \"<boolean>\",\n   \"HMIAdvancedDisplay\": \"<boolean>\",\n   \"isAcidBaseDosing\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"isVirtual\": \"<boolean>\",\n   \"name\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"phSetpoint\": \"<number>\",\n   \"orpSetpoint\": \"<boolean>\",\n   \"alkalinity\": \"<integer>\",\n   \"calciumHardness\": \"<integer>\",\n   \"cyanuricAcid\": \"<integer>\",\n   \"isFlowDelayMode\": \"<boolean>\",\n   \"phManualDosing\": \"<boolean>\",\n   \"isIntelliChlorUsed\": \"<boolean>\",\n   \"HMIAdvancedDisplay\": \"<boolean>\",\n   \"isAcidBaseDosing\": \"<boolean>\"\n  }\n ],\n \"maxChemControllers\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "df26a63e-2718-4770-b413-97a2ae00c27e",
                            "name": "Get all available options to set chlorinators",
                            "request": {
                                "name": "Get all available options to set chlorinators",
                                "description": {
                                    "content": "Returns: types, bodies, chlorinators, maxChlorinators",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "chlorinators",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "b4763538-0689-42e5-9741-64fc6a115154",
                                    "name": "Object containing all available general options for the chlorinators",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "chlorinators",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"types\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"chlorinators\": [\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"spaSetpoint\": \"<integer>\",\n   \"poolSetpoint\": \"<integer>\",\n   \"superChlor\": \"<boolean>\",\n   \"superChlorHours\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"spaSetpoint\": \"<integer>\",\n   \"poolSetpoint\": \"<integer>\",\n   \"superChlor\": \"<boolean>\",\n   \"superChlorHours\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\"\n  }\n ],\n \"maxChlorinators\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "3205b632-6e21-4ba7-b375-9511e3a200a2",
                            "name": "Get days of week that are valid for the current OCP.  This can also be retrieved as `scheduleDays` in the /config/options/schedules object.",
                            "request": {
                                "name": "Get days of week that are valid for the current OCP.  This can also be retrieved as `scheduleDays` in the /config/options/schedules object.",
                                "description": {
                                    "content": "Get Days of week; info now contained in /config/options/schedules",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "5bd9af78-01e3-476b-9c8f-6983c7ccc07c",
                                    "name": "Array of days",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "dateTime",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "38c7a07d-3203-45a9-9071-acf4e8ffe7fc",
                    "name": "Set options related to the \"Pool\" section in poolConfig.json.",
                    "request": {
                        "name": "Set options related to the \"Pool\" section in poolConfig.json.",
                        "description": {
                            "content": "To set general settings, send an object with the value you want to change from /config/options/general.",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "general",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "b60f38bd-4bb1-471f-9387-0c21e4724ece",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"adjustDST\": \"<boolean>\",\n \"clockMode\": \"<integer>\",\n \"clockSource\": \"<string>\",\n \"pumpDelay\": \"<boolean>\",\n \"manualHeat\": \"<boolean>\",\n \"units\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "85a6d3b9-fb66-4878-b7e6-0dfcfba0d502",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "698c5f0a-ef77-4c20-93b9-fa31c51d7964",
                    "name": "Set options related to the \"Valve\" section in poolConfig.json",
                    "request": {
                        "name": "Set options related to the \"Valve\" section in poolConfig.json",
                        "description": {
                            "content": "To set valve settings, send an object with the values you want to change from /config/options/general.",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "valve",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "61a20023-4612-499d-a140-096fb210da04",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "valve",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"circuit\": 128,\n \"isActive\": true,\n \"name\": \"Solar\",\n \"type\": 0,\n \"isReturn\": false,\n \"isIntake\": false\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "bdfa8509-9b76-4bd3-8af8-c7e94b899853",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "valve",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "92f0e68e-7480-460e-a24a-3cb43f6bfbd5",
                    "name": "feature",
                    "item": [
                        {
                            "id": "3278921b-87bf-41de-b548-dea2aa72805f",
                            "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/features.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "feature",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "37a8bf54-5b41-4320-9bbe-8b368c3ed0b6",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 12,\n \"name\": \"Waterfall 1\",\n \"nameId\": 87,\n \"type\": 0,\n \"isActive\": true,\n \"freeze\": false,\n \"showInFeatures\": true,\n \"eggTimer\": 420,\n \"macro\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "eb05e1b2-c463-465c-8b67-9a031df048fd",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "fecde0a9-6d34-46e8-8bd6-75da8401cf17",
                            "name": "Delete a feature at the specified id",
                            "request": {
                                "name": "Delete a feature at the specified id",
                                "description": {
                                    "content": "Delete a feature at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "feature",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "e5e1536b-2e38-4e35-a9fe-a907052a174f",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "76f9ef7f-6164-4b5e-a6b2-704d792c6b81",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d6413147-9f0c-4e27-87fc-5648f37f92dd",
                    "name": "circuit Group",
                    "item": [
                        {
                            "id": "0908d274-8448-4795-a33a-3357a65a2681",
                            "name": "Set options related to the \"Circuit Groups\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit Groups\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/circuitGroups.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "80913913-f7c8-46d4-8244-adde12752539",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"Need Example\": null\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e997f546-9cdb-40c7-a50e-b27572c5e52c",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "32dea8ba-3ad5-473a-aad7-3468236a2c7c",
                            "name": "Delete a circuit group at the specified id",
                            "request": {
                                "name": "Delete a circuit group at the specified id",
                                "description": {
                                    "content": "Delete a circuit group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "546694dd-4e87-4449-b827-2e9b2d0d00c7",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "9af75835-a531-49d7-bdc6-dd6dc5ad8c99",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "654da3dd-a6dd-4161-b377-79f9ccf87412",
                            "name": "Get a single circuit group at the specified id",
                            "request": {
                                "name": "Get a single circuit group at the specified id",
                                "description": {
                                    "content": "Get a single circuit group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "ba90cd64-c33a-40e1-b826-4e89ccdc9eba",
                                    "name": "Circuit group extended object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a583df2b-f01f-4dfa-9dba-c0ebc2abec8f",
                    "name": "light Group",
                    "item": [
                        {
                            "id": "4acae6b8-a956-4fdf-a907-cf706d2142fc",
                            "name": "Set options related to the \"lightGroups\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"lightGroups\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/lightGroups.\n\n*NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, \nsend an empty array `[]`.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "56ae9e2c-1644-4fbd-a0ad-08d7764ea1ae",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": 2,\n   \"position\": 2,\n   \"color\": 6,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": 7,\n   \"position\": 2,\n   \"color\": 14,\n   \"swimDelay\": 2,\n   \"isActive\": true\n  },\n  {\n   \"id\": 3,\n   \"circuit\": 8,\n   \"position\": 3,\n   \"color\": 2,\n   \"swimDelay\": 4,\n   \"isActive\": true\n  }\n ],\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": 3,\n \"lightingTheme\": 195\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "cb2acce3-7da5-456b-9c43-2a2999cb4051",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "efa00fce-b38d-49da-99ca-88cb8d430940",
                            "name": "Delete a light group at the specified id",
                            "request": {
                                "name": "Delete a light group at the specified id",
                                "description": {
                                    "content": "Delete a light group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "4144872d-e0d8-4d5c-9a18-b5a267844119",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "0746146e-d5e1-4c76-9401-59c1df4b6abb",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "fb0dd056-0ce9-4f65-b21c-21bce87110cc",
                            "name": "{id}",
                            "item": [
                                {
                                    "id": "63abbed8-6fb1-4478-914c-e82291d97d31",
                                    "name": "Get a single lightGroup at the specified id This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                    "request": {
                                        "name": "Get a single lightGroup at the specified id This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                        "description": {
                                            "content": "Get a single lightGroup at the specified id",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ":id",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "2cacc9f2-98bd-4976-8d01-462b16e103f1",
                                            "name": "Object with deep linking",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "config",
                                                        "lightGroup",
                                                        "<integer>",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "text/plain"
                                                }
                                            ],
                                            "body": "",
                                            "cookie": [],
                                            "_postman_previewlanguage": "text"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "fd7c7398-f94d-4e67-b3ab-3575d46fd952",
                                    "name": "set lg attribs\nThis endpoint is going away.  Use /config/lightGroup instead.",
                                    "request": {
                                        "name": "set lg attribs\nThis endpoint is going away.  Use /config/lightGroup instead.",
                                        "description": {
                                            "content": "",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ":id",
                                                "setColors",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "17a2592f-3691-4659-985e-09f5bec9b52b",
                                            "name": "Array of",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "config",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "setColors",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "text/plain"
                                                }
                                            ],
                                            "body": "",
                                            "cookie": [],
                                            "_postman_previewlanguage": "text"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a872aa59-c037-4310-9a7b-3de46b17e815",
                            "name": "Get lightgroup colors, theme, action\nThis endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                            "request": {
                                "name": "Get lightgroup colors, theme, action\nThis endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                "description": {
                                    "content": "Get lightgroup colors, theme, action",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        "colors",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "6753b5de-4c45-4cf1-b2a1-d8ab976ad962",
                                    "name": "Object of items...",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                "colors",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "cc70c465-639f-4da3-b603-f5942fe1337e",
                    "name": "pump",
                    "item": [
                        {
                            "id": "f158512e-dfeb-4686-879a-5779e4f25f33",
                            "name": "Set options related to the \"pumps\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"pumps\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/pumps.\n\n*NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, \nsend an empty array `[]`.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "7b62ead1-ab28-4bbc-aaab-ccdeccc99108",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"type\": 128,\n \"address\": 96,\n \"isActive\": true,\n \"model\": 0,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": 255,\n   \"speed\": 1830,\n   \"units\": 0\n  },\n  {\n   \"id\": 2,\n   \"circuit\": 4,\n   \"speed\": 2460,\n   \"units\": 0\n  }\n ],\n \"primingSpeed\": 3000,\n \"primingTime\": 1,\n \"minSpeed\": 450,\n \"maxSpeed\": 3450,\n \"speedStepSize\": 10,\n \"name\": \"Pool\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "293ac613-d3a6-42ee-9663-3e6343d90202",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "33edac08-a54b-4766-a6f8-8762f75784c7",
                            "name": "Delete a pump at the specified id",
                            "request": {
                                "name": "Delete a pump at the specified id",
                                "description": {
                                    "content": "Delete a pump at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "2d453008-47e3-4878-a18e-efff455be3c2",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "bd1e9c8d-13f0-41db-ada4-3d67e72ae026",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "8744ec32-89ca-4566-89c5-c4e768a2093c",
                            "name": "Delete a pump at the specified Id",
                            "request": {
                                "name": "Delete a pump at the specified Id",
                                "description": {
                                    "content": "Delete a pump at the specified Id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ":pumpId",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "19d9d48b-6dac-4ecb-b099-ed88e7d91c41",
                                    "name": "Array of",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ":pumpId",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "pumpId"
                                                }
                                            ]
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "20be1db9-b561-4efc-8842-5c3f000e7ec9",
                    "name": "Set custom names on OCP (*Touch only)",
                    "request": {
                        "name": "Set custom names on OCP (*Touch only)",
                        "description": {
                            "content": "Set custom names on OCP (*Touch only)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "customNames",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                        }
                    },
                    "response": [
                        {
                            "id": "92a3a85e-351a-4a65-9916-82fdb322c149",
                            "name": "Object with custom name",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "bccea7d8-6fc0-4734-a598-259edabd48d5",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "7b1e8fdd-c67e-4680-997d-6ae2fe3a8792",
                    "name": "Set a single custom names on OCP (*Touch only)",
                    "request": {
                        "name": "Set a single custom names on OCP (*Touch only)",
                        "description": {
                            "content": "Set a single custom names on OCP (*Touch only)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "customName",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "37bfc049-2f52-4d7d-8a93-915db55306a0",
                            "name": "Object with custom name",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customName",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "28d62d1b-c87f-4858-82e0-a5950b93734f",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customName",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "fcaf328d-1b07-4de4-8060-8392afdd9545",
                    "name": "schedule",
                    "item": [
                        {
                            "id": "02e57ca0-9127-4864-8636-eb77afc69693",
                            "name": "Set options related to the \"schedules\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"schedules\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/schedules.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "5c4b2801-4d56-41cf-bd09-f6e26ad49036",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"circuit\": 6,\n \"startTime\": 495,\n \"endTime\": 960,\n \"isActive\": true,\n \"scheduleDays\": 127,\n \"runOnce\": 128,\n \"scheduleType\": 128,\n \"startTimeType\": 0,\n \"endTimeType\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "2352822c-1811-4914-9ba6-768af914ac9d",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d7ce6f88-4bbe-440f-a1df-ab8225029a71",
                            "name": "Delete a schedule at the specified id",
                            "request": {
                                "name": "Delete a schedule at the specified id",
                                "description": {
                                    "content": "Delete a schedule at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "f0dd85f4-1808-4b17-a982-bf36ee7f4405",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "65940750-79fe-4286-8ec8-16c1b7f4e11d",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "292701be-b1ca-4622-a52c-5c60f9450083",
                            "name": "Get an individual schedule\nThis endpoint will be going away.  Please use /config/schedules or /config/options/schedules instead.",
                            "request": {
                                "name": "Get an individual schedule\nThis endpoint will be going away.  Please use /config/schedules or /config/options/schedules instead.",
                                "description": {
                                    "content": "Get an individual schedule",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "fb682c49-62a0-481c-800b-af01dfc31f71",
                                    "name": "Circuit object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\",\n \"isOn\": \"<boolean>\",\n \"nameId\": \"<string>\",\n \"isActive\": \"<boolean>\",\n \"freeze\": \"<boolean>\",\n \"showInFeatures\": \"<boolean>\",\n \"eggTimer\": \"<integer>\",\n \"equipmentType\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "774ef38c-2544-44ad-ad65-6d3ba5bdf2e3",
                    "name": "chlorinator",
                    "item": [
                        {
                            "id": "d2c35479-fa2f-46a8-a2a3-23565fe30730",
                            "name": "Set options related to the \"chlorinators\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"chlorinators\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/chlorinators.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinator",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "f4eb7b5e-3063-424f-8ac9-ade74be64505",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"address\": 80,\n \"isActive\": true,\n \"body\": 32,\n \"spaSetpoint\": 15,\n \"poolSetpoint\": 2,\n \"superChlor\": true,\n \"superChlorHours\": 10,\n \"name\": \"Intellichlor--40\",\n \"type\": 2\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ff68b755-22a2-4ac0-911c-23f042d23af7",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "c9b192fe-dea4-4c55-8a42-4827c9af9dd9",
                            "name": "Get a single chlorinator object",
                            "request": {
                                "name": "Get a single chlorinator object",
                                "description": {
                                    "content": "Get a single chlorinator object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinator",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "b7d3c8fb-7173-41e4-af57-34e5706948d6",
                                    "name": "Chlorinator object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ":id",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"<integer>\",\n \"address\": \"<integer>\",\n \"isActive\": \"<boolean>\",\n \"body\": \"<integer>\",\n \"spaSetpoint\": \"<integer>\",\n \"poolSetpoint\": \"<integer>\",\n \"superChlor\": \"<boolean>\",\n \"superChlorHours\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "b9f62eba-d706-4e1d-9e12-852afaf3ba79",
                    "name": "Get a list of valid controller functions for features\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                    "request": {
                        "name": "Get a list of valid controller functions for features\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                        "description": {
                            "content": "Get a list of valid controller functions for features",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "features",
                                "functions",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "34af3837-9347-4f4b-b70a-600e7844ae24",
                            "name": "Array of controller function objects valid for features",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "features",
                                        "functions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "20a2b3fe-6e9c-4090-9ccf-8ca9b7ffb807",
                    "name": "Start a search for standalone chlorinators",
                    "request": {
                        "name": "Start a search for standalone chlorinators",
                        "description": {
                            "content": "Start a search for standalone chlorinators",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "chlorinators",
                                "search",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "69feb355-dcc3-4962-b538-17177587daf5",
                            "name": "Chlorinator object (isActive and isVirtual should be checked)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinators",
                                        "search",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": \"<integer>\",\n \"address\": \"<integer>\",\n \"isActive\": \"<boolean>\",\n \"body\": \"<integer>\",\n \"spaSetpoint\": \"<integer>\",\n \"poolSetpoint\": \"<integer>\",\n \"superChlor\": \"<boolean>\",\n \"superChlorHours\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "75e1ee47-c787-44a7-ae48-ebd8180fcc62",
                    "name": "Set date and time options",
                    "request": {
                        "name": "Set date and time options",
                        "description": {
                            "content": "Set date and time options",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "dateTime",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "072ec0e0-067e-43e8-82a0-2dbdb8e4cb90",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"min\": \"<integer>\",\n \"hour\": \"<integer>\",\n \"date\": \"<integer>\",\n \"month\": \"<integer>\",\n \"year\": \"<integer>\",\n \"dow\": \"<integer>\",\n \"dst\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "62373f6a-29d0-49a5-bb6b-637c88a5be01",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "54e00e91-cfa3-43ba-856b-b9101d0ddfbc",
                    "name": "Get a list of light group themes \nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                    "request": {
                        "name": "Get a list of light group themes \nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                        "description": {
                            "content": "Get a list of light group themes",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "lightGroups",
                                "themes",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "c3e13b5b-8ce3-4d2c-ad66-fa0d73e014a6",
                            "name": "Array of",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroups",
                                        "themes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d96ade22-6dde-49a8-b449-e3eeb56c2b2b",
                    "name": "Get lightGroup themes - can be retrieved with /config/options/lightGroups; also it sends enumerated state info and not just identifiers.\nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                    "request": {
                        "name": "Get lightGroup themes - can be retrieved with /config/options/lightGroups; also it sends enumerated state info and not just identifiers.\nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                        "description": {
                            "content": "",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "intellibrite",
                                "themes",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "6f22ee59-1166-45e2-904e-ee340b19c24f",
                            "name": "Array of",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "intellibrite",
                                        "themes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f3e32f3f-3671-4ae5-9e78-194e84a304f9",
                    "name": "chem Controller",
                    "item": [
                        {
                            "id": "d6b6155c-5b62-4a20-a23d-c45f93c6acea",
                            "name": "Set options related to the \"chemControllers\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"chemControllers\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/chemControllers.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chemController",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\",\n    \"isFlowDelayMode\": \"<boolean>\",\n    \"phManualDosing\": \"<boolean>\",\n    \"isIntelliChlorUsed\": \"<boolean>\",\n    \"HMIAdvancedDisplay\": \"<boolean>\",\n    \"isAcidBaseDosing\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "4c52faed-d49b-4229-80e2-c1a6e00fe7bd",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\",\n    \"isFlowDelayMode\": \"<boolean>\",\n    \"phManualDosing\": \"<boolean>\",\n    \"isIntelliChlorUsed\": \"<boolean>\",\n    \"HMIAdvancedDisplay\": \"<boolean>\",\n    \"isAcidBaseDosing\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"type\": 3,\n \"isActive\": true,\n \"isVirtual\": true,\n \"name\": \"Chem Controller\",\n \"pHSetpoint\": 7.4,\n \"orpSetpoint\": 660,\n \"alkalinity\": 40,\n \"calciumHardness\": 710,\n \"cyanuricAcid\": 10\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "cde13957-0b2d-450e-abe6-053c66038f25",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\",\n    \"isFlowDelayMode\": \"<boolean>\",\n    \"phManualDosing\": \"<boolean>\",\n    \"isIntelliChlorUsed\": \"<boolean>\",\n    \"HMIAdvancedDisplay\": \"<boolean>\",\n    \"isAcidBaseDosing\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "03f3463d-2c7e-492b-885c-2dbafcfea3cb",
                            "name": "NOT IMPLEMENTED YET.  Begin a search on the server for any chem controllers",
                            "request": {
                                "name": "NOT IMPLEMENTED YET.  Begin a search on the server for any chem controllers",
                                "description": {
                                    "content": "Begin a search on the server for any chem controllers",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chemController",
                                        "search",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "370fa0d6-c1f4-4286-8a14-52928bc64142",
                                    "name": "Searching for chem controllers.",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                "search",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1272afdb-73c2-40e5-a60e-dae800dfb2cc",
                    "name": "Return a section of poolConfig.json",
                    "request": {
                        "name": "Return a section of poolConfig.json",
                        "description": {
                            "content": "Return a section of poolConfig.json",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                ":section",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "all",
                                    "key": "section"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "1e7c903f-120b-42ac-8edb-31fbb26c8b39",
                            "name": "{Section} of poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "73fce94a-1c4c-4c48-9414-5eea5135224a",
            "name": "app",
            "item": [
                {
                    "id": "bb27a3b5-95d3-48ca-8998-e267eeeead1e",
                    "name": "Get all available options to set logger",
                    "request": {
                        "name": "Get all available options to set logger",
                        "description": {
                            "content": "Returns: app logger",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "app",
                                "options",
                                "logger",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "02b52c13-b559-4773-a29f-5feec035ee1c",
                            "name": "Object containing all available options for the logger",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "options",
                                        "logger",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"logger\": {\n  \"packet\": {\n   \"enabled\": true,\n   \"logToConsole\": false,\n   \"logToFile\": false,\n   \"filename\": \"packetLog\",\n   \"invalid\": true,\n   \"broadcast\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"pump\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"chlorinator\": {\n    \"enabled\": false,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"intellichem\": {\n    \"enabled\": true,\n    \"includeActions\": [],\n    \"exclueActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"intellivalve\": {\n    \"enabled\": true,\n    \"includeActions\": [],\n    \"exclueActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"unidentified\": {\n    \"enabled\": true,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"unknown\": {\n    \"enabled\": true,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   }\n  },\n  \"app\": {\n   \"enabled\": true,\n   \"level\": \"debug\",\n   \"captureForReplay\": false\n  }\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a0ef350a-f542-4718-ac9e-7f956fd42d8c",
                    "name": "logger",
                    "item": [
                        {
                            "id": "b2174c64-8826-49b5-b9bf-57b37cfe266c",
                            "name": "Set options related to the \"log\" section in config.json",
                            "request": {
                                "name": "Set options related to the \"log\" section in config.json",
                                "description": {
                                    "content": "To set logger settings, send an object with the values you want to change from /config/options/logger.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "logger",
                                        "setOptions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "5faece2c-c87a-4859-b942-b305f1336b74",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "setOptions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"logger\": {\n  \"packet\": {\n   \"enabled\": true,\n   \"logToConsole\": false,\n   \"logToFile\": false,\n   \"filename\": \"packetLog\",\n   \"invalid\": true,\n   \"broadcast\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   }\n  },\n  \"app\": {\n   \"enabled\": true,\n   \"level\": \"debug\",\n   \"captureForReplay\": false\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "482272cc-0823-4894-83b1-901ef9a165dd",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "setOptions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "4354ecca-0f59-4e85-bea3-c8bc5412c2e3",
                            "name": "Delete current logfile from disk",
                            "request": {
                                "name": "Delete current logfile from disk",
                                "description": {
                                    "content": "Delete current logfile from disk",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "logger",
                                        "clearMessages",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "05009095-aaee-4b95-b29f-536d8df4f5d6",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "clearMessages",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f5c8f8bf-8282-47f1-b0f2-2c3b4101acaf",
                    "name": "Get all broadcast packets identifiers",
                    "request": {
                        "name": "Get all broadcast packets identifiers",
                        "description": {
                            "content": "Get all broadcast packets identifiers",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "app",
                                "message",
                                "broadcast",
                                "actions",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "fb08d3ae-5cfc-48c9-9d71-0af5f3e667f8",
                            "name": "Array of broadcast actions",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "message",
                                        "broadcast",
                                        "actions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "b4d060fa-ffad-4616-8104-9c310ba0d3d6",
                    "name": "config",
                    "item": [
                        {
                            "id": "353b945e-807f-46fe-87fd-ad769f36020d",
                            "name": "Reload the app with files from disk",
                            "request": {
                                "name": "Reload the app with files from disk",
                                "description": {
                                    "content": "Reload the app with files from disk",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "reload",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "311e3db4-afdc-48e6-840a-cbf580a85e6d",
                                    "name": "Successful Reload",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "reload",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "207134dd-a14f-4a9e-84a9-d869db6be856",
                            "name": "Starts a packet capture on the server WITHOUT a reset",
                            "request": {
                                "name": "Starts a packet capture on the server WITHOUT a reset",
                                "description": {
                                    "content": "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "startPacketCapture",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "543acb3b-2f63-4ac3-826c-1f85c35384e4",
                                    "name": "OK",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "startPacketCapture",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d5f29c36-d2d2-4f82-90e3-9aede54e6243",
                            "name": "Starts a packet capture on the server WITH a reset",
                            "request": {
                                "name": "Starts a packet capture on the server WITH a reset",
                                "description": {
                                    "content": "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "startPacketCaptureWithoutReset",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "9048ecb9-b672-48aa-a383-0792f7a36ad3",
                                    "name": "OK",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "startPacketCaptureWithoutReset",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "baa2f7a1-7075-49a0-ae3b-92f7b947dd44",
                            "name": "Stop an in-progress packet capture and download a zipped file",
                            "request": {
                                "name": "Stop an in-progress packet capture and download a zipped file",
                                "description": {
                                    "content": "Stop an in-progress packet capture and download a zipped file",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "stopPacketCapture",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "677d5332-9e3c-495d-b7fc-18cf058cebe1",
                                    "name": "Zip file of packet capture",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "stopPacketCapture",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "zip"
                                        }
                                    ],
                                    "body": "<binary>",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "341763d7-6d28-4204-ace2-ffea65ed7578",
            "name": "state",
            "item": [
                {
                    "id": "ed49b514-bd5d-4a55-86d7-400a3cde54cf",
                    "name": "Return all sections for the current state of the pool",
                    "request": {
                        "name": "Return all sections for the current state of the pool",
                        "description": {
                            "content": "Retrieve a JSON object of all sections",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "all",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "7879e1d3-6d89-4327-9ebf-a51f515d3fe4",
                            "name": "JSON Object",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a84efdc1-9fef-4962-b5c5-08739567953d",
                    "name": "Return a section of poolState.json",
                    "request": {
                        "name": "Return a section of poolState.json",
                        "description": {
                            "content": "Return a section of poolState.json",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                ":section",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "all",
                                    "key": "section"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "8e34bce0-639b-4457-8a0f-a40bfd3be2ff",
                            "name": "{Section} of poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "8463408a-9ef8-41fd-85b3-10154dd8725c",
                    "name": "Return an individual chem controller object",
                    "request": {
                        "name": "Return an individual chem controller object",
                        "description": {
                            "content": "Return an individual chem controller object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "chemController",
                                ":id",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "Id of the chem controller",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "<integer>",
                                    "key": "id"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "89711ac6-8d42-4805-8720-1b3a8e32aa42",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chemController",
                                        "<integer>",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"intellichem\",\n  \"desc\": \"IntelliChem\"\n },\n \"lastComm\": 1597701544115,\n \"address\": 144,\n \"pHLevel\": 7.44,\n \"orpLevel\": 787,\n \"pHDosingTime\": 13,\n \"orpDosingTime\": 0,\n \"pHDosingVolume\": 28,\n \"orpDosingVolume\": 0,\n \"acidTankLevel\": 2,\n \"orpTankLevel\": 0,\n \"saturationIndex\": -0.18,\n \"tempUnits\": {\n  \"val\": 0,\n  \"name\": \"F\",\n  \"desc\": \"Fahrenheit\"\n },\n \"temp\": 79,\n \"alarms\": {\n  \"flow\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No alarm\"\n  },\n  \"ph\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No alarm\"\n  },\n  \"orp\": {\n   \"val\": 8,\n   \"name\": \"orphigh\",\n   \"desc\": \"Alarm - orp High\"\n  },\n  \"phTank\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No alarm\"\n  },\n  \"orpTank\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No alarm\"\n  },\n  \"probeFault\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No alarm\"\n  }\n },\n \"phDosingStatus\": {\n  \"val\": 2,\n  \"name\": \"mixing\",\n  \"desc\": \"Dosing - Mixing\"\n },\n \"orpDosingStatus\": {\n  \"val\": 2,\n  \"name\": \"mixing\",\n  \"desc\": \"Dosing - Mixing\"\n },\n \"firmware\": \"1.060\",\n \"warnings\": {\n  \"waterChemistry\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No Warning\"\n  },\n  \"phLockout\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No limits reached\"\n  },\n  \"phDailyLimitReached\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No limits reached\"\n  },\n  \"orpDailyLimitReached\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No limits reached\"\n  },\n  \"invalidSetup\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No limits reached\"\n  },\n  \"chlorinatorCommError\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No limits reached\"\n  }\n },\n \"saltLevel\": 3450,\n \"equipmentType\": \"chemController\",\n \"alkalinity\": 90,\n \"body\": {\n  \"val\": 0,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"calciumHardness\": 250,\n \"cyanuricAcid\": 18,\n \"orpSetpoint\": 680,\n \"pHSetpoint\": 7.6\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "8b5f4124-501b-425f-a360-faea6dbc0039",
                    "name": "Return an individual chem controller object",
                    "request": {
                        "name": "Return an individual chem controller object",
                        "description": {
                            "content": "Return an individual chem controller object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "chemControllers",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "4e7cf68d-a38e-4fc4-8fe7-f1bb42d14da4",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chemControllers",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"type\": \"array\",\n \"items\": {\n  \"$ref\": \"#/components/examples/stateChemController\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4c7f064d-ee16-4edc-acea-37212a7269c4",
                    "name": "chlorinator",
                    "item": [
                        {
                            "id": "800fc97b-4f99-40c0-951d-c21c44569a0a",
                            "name": "Set attributes for a given chlorinator",
                            "request": {
                                "name": "Set attributes for a given chlorinator",
                                "description": {
                                    "content": "See /config/options/chlorinators for values that can be sent",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "fa31b291-a4ba-4ab5-a107-f4a15a799cc7",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "202c0f05-2135-4912-bdea-250547f62ab1",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "9b265e93-1a4d-4505-94fc-a44a6dd019a5",
                            "name": "Return an individual chlorinator object",
                            "request": {
                                "name": "Return an individual chlorinator object",
                                "description": {
                                    "content": "Return an individual chlorinator object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "Id of the chlorinator",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "8b4522e5-63c7-4d71-82cf-fdb7b137cf10",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "79fcf1f9-16bb-4040-a253-408f25cb290f",
                            "name": "Set attributes for a given chlorinator.  Duplicate of /state/chlorinator.",
                            "request": {
                                "name": "Set attributes for a given chlorinator.  Duplicate of /state/chlorinator.",
                                "description": {
                                    "content": "See /config/options/chlorinators for values that can be sent",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "setChlor"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "b116f477-498d-42a3-8278-9109df469c26",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "setChlor"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"Chlorinator State\": {\n  \"$ref\": \"#/components/examples/stateChlorinator\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "34f34666-410f-46c5-b163-d69521f87d52",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "setChlor"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "e8af7999-773d-4430-8222-338b3077ab4c",
                            "name": "Set super chlorinate true for a chlorinator.",
                            "request": {
                                "name": "Set super chlorinate true for a chlorinator.",
                                "description": {
                                    "content": "Set super chlorinate true for a chlorinator.  Will set superChlorHours to 24.  Attributes can be set via /state/setChlor.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "superChlorinate"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "66d92b3e-aba5-4c99-acac-1392c71e3e1a",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorinate"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f6a648a5-8829-45eb-aeb8-6d5f44b0c0fa",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorinate"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ed9a11e3-af67-44ae-a714-3ebbfc3c9730",
                            "name": "Set super chlorinate hours for a chlorinator.",
                            "request": {
                                "name": "Set super chlorinate hours for a chlorinator.",
                                "description": {
                                    "content": "Set super chlorinate hours for a chlorinator.  Will set superChlor to true.\nAttributes can be set via /state/setChlor.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "superChlorHours"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a14f7f9c-d395-4a8a-9309-4f86bff3136c",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorHours"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "84e3edd2-b31f-4d45-8ecc-02de9bef70ff",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorHours"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "374063d0-0d4b-41f3-8c7b-3abc31e970e2",
                            "name": "Set pool Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                            "request": {
                                "name": "Set pool Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                                "description": {
                                    "content": "Set poolSetpoint for a chlorinator",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "poolSetpoint"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "ea7f850b-636e-40fb-9ffa-f11e85638ac7",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "poolSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "9563c6d5-bbdc-4cfc-86f6-8110b95d3cc0",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "poolSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "31822938-2dbc-4ac5-ad4e-16106f41f333",
                            "name": "Set spa Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                            "request": {
                                "name": "Set spa Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                                "description": {
                                    "content": "Set spa Setpoint for a chlorinator",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "spaSetpoint"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "30048ac9-b6a7-467b-8d52-88b7aec0d742",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "spaSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ca5a6340-d7a3-4864-9037-25669aa82dbf",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "spaSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "46792718-a6c2-4bc5-aef4-44f624e110a3",
                    "name": "circuit",
                    "item": [
                        {
                            "id": "81d4edaf-3622-4718-ba7b-068d0f9fd141",
                            "name": "Return an individual circuit object",
                            "request": {
                                "name": "Return an individual circuit object",
                                "description": {
                                    "content": "Return an individual circuit object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "Id of the circuit",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d326c847-1d98-4e4a-b625-812be7ae03eb",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "514c10c7-0055-4eb3-bbd8-d0e80a220de6",
                            "name": "Set options for a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a circuit in poolState.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "ad0a101f-83da-4868-8513-6542bd92cb31",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "5bd458e6-7343-4d5e-8661-9c0c02d16be0",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "3620583e-9aea-4402-bacd-dbaf90c51902",
                            "name": "Set options for a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a circuit in poolState.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the id and it will be toggled.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "toggleState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "0017ca98-84f5-417a-876c-63239c6193b4",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "65ef6fd0-5c85-4385-bb50-b30b9b5ceeec",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0ef7ff6d-742d-4d34-8263-43a9977678ba",
                            "name": "Set options for a theme of a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a theme of a circuit in poolState.json",
                                "description": {
                                    "content": "To set theme of a circuit settings, send an object with the id and theme.  Themes are found in /config/options/lightGroups.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setTheme",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "aec6d58e-d926-4b88-a137-db171530acb1",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 193,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"circuit\",\n  \"desc\": \"Circuit\"\n },\n \"isOn\": true,\n \"equipmentType\": \"circuitGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaPUMP\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 200,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 2,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaCTRL\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 215,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 9,\n   \"circuit\": {\n    \"id\": 9,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa Low\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 75,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 10,\n   \"circuit\": {\n    \"id\": 10,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa High\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 73,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "8b491946-c828-44bc-a7a3-fe062bf36d28",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ad90b8be-0d94-47b7-8b73-f5082c3460f8",
                            "name": "Set options for the dimmer levels of a circuit in poolState.json",
                            "request": {
                                "name": "Set options for the dimmer levels of a circuit in poolState.json",
                                "description": {
                                    "content": "To set dimmer level of a circuit settings, send an object with the id and level.  \n\n*EXPERIMENTAL* - Should work on IntelliCenter; needs testing on *Touch.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setDimmerLevel",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "c4fe5c19-e67f-4331-a666-04f0720f6a65",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setDimmerLevel",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "491a841c-2890-4104-8964-4750bbe6b303",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setDimmerLevel",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d2fa7973-e556-45ef-9c63-821037bb57aa",
                    "name": "Return an individual pump object",
                    "request": {
                        "name": "Return an individual pump object",
                        "description": {
                            "content": "Return an individual pump object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "pump",
                                ":id",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "Id of the pump",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "<integer>",
                                    "key": "id"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "4fc72194-d2a0-4203-ae57-404159be5e01",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "pump",
                                        "<integer>",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"command\": 10,\n \"mode\": 0,\n \"driveState\": 0,\n \"watts\": 693,\n \"rpm\": 2250,\n \"flow\": 0,\n \"ppc\": 0,\n \"status\": {\n  \"name\": \"ok\",\n  \"desc\": \"Ok\",\n  \"val\": 1\n },\n \"time\": 929,\n \"type\": {\n  \"val\": 128,\n  \"name\": \"vs\",\n  \"desc\": \"Intelliflo VS\",\n  \"maxPrimingTime\": 6,\n  \"minSpeed\": 450,\n  \"maxSpeed\": 3450,\n  \"maxCircuits\": 8,\n  \"hasAddress\": true\n },\n \"name\": \"Pool\",\n \"equipmentType\": \"pump\",\n \"minSpeed\": 450,\n \"maxSpeed\": 3450,\n \"speedStepSize\": 10,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 0,\n    \"equipmentType\": \"circuit\",\n    \"name\": \"Not Used\",\n    \"speed\": 0\n   },\n   \"speed\": 1830,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 4,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Cleaner\",\n    \"type\": {\n     \"val\": 5,\n     \"name\": \"mastercleaner\",\n     \"desc\": \"Master Cleaner\"\n    },\n    \"nameId\": 22,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 2460,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 3,\n   \"circuit\": {\n    \"id\": 11,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spillway\",\n    \"type\": {\n     \"val\": 14,\n     \"name\": \"spillway\",\n     \"desc\": \"Spillway\"\n    },\n    \"nameId\": 79,\n    \"equipmentType\": \"feature\"\n   },\n   \"speed\": 2500,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 4,\n   \"circuit\": {\n    \"id\": 6,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Pool\",\n    \"type\": {\n     \"val\": 2,\n     \"name\": \"pool\",\n     \"desc\": \"Pool\"\n    },\n    \"nameId\": 61,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 1800,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 5,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 72,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 1750,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 6,\n   \"circuit\": {\n    \"id\": 128,\n    \"isOn\": true,\n    \"type\": {\n     \"val\": 128,\n     \"name\": \"solar\",\n     \"desc\": \"Solar\",\n     \"assignableToPumpCircuit\": true\n    },\n    \"name\": \"Solar\",\n    \"equipmentType\": \"virtualCircuit\"\n   },\n   \"speed\": 2250,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 7,\n   \"circuit\": {\n    \"id\": 131,\n    \"isOn\": false,\n    \"type\": {\n     \"val\": 131,\n     \"name\": \"spaHeater\",\n     \"desc\": \"Spa Heater\",\n     \"assignableToPumpCircuit\": true\n    },\n    \"name\": \"Spa Heater\",\n    \"equipmentType\": \"virtualCircuit\"\n   },\n   \"speed\": 2650,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 8,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Jets\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 46,\n    \"equipmentType\": \"feature\"\n   },\n   \"speed\": 3050,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e0a1e800-ac07-4269-a2ba-51e395c1203d",
                    "name": "feature",
                    "item": [
                        {
                            "id": "5c169f1b-d055-496a-b07f-36f6fc31601c",
                            "name": "Set options for a feature in poolState.json",
                            "request": {
                                "name": "Set options for a feature in poolState.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "feature",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "31c1ecd6-747d-4127-9064-1efbaabe6269",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 11,\n \"showInFeatures\": true,\n \"isOn\": false,\n \"name\": \"Spillway\",\n \"type\": {\n  \"val\": 14,\n  \"name\": \"spillway\",\n  \"desc\": \"Spillway\"\n },\n \"nameId\": 79,\n \"equipmentType\": \"feature\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "cf3cf3fe-ed1e-4efa-921f-f11725ce3b39",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "733b515a-5ee2-4f72-8f10-3dfe70308da6",
                            "name": "Set options for a feature in poolState.json",
                            "request": {
                                "name": "Set options for a feature in poolState.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the id and it will be toggled.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "feature",
                                        "toggleState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "257c4575-dc12-477f-8eb2-fd423228e7d6",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d6d95525-f274-4f9c-b58a-fd64dc7328ec",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "2459eb55-3b1a-4e13-aa4d-d10d95623d0b",
                    "name": "Set options for a circuitgroup in poolState.json",
                    "request": {
                        "name": "Set options for a circuitgroup in poolState.json",
                        "description": {
                            "content": "To set circuitGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "circuitGroup",
                                "setState",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "d5b41609-3ae5-4fb9-9363-f1938e02608b",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuitGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 193,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"circuit\",\n  \"desc\": \"Circuit\"\n },\n \"isOn\": true,\n \"equipmentType\": \"circuitGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaPUMP\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 200,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 2,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaCTRL\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 215,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 9,\n   \"circuit\": {\n    \"id\": 9,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa Low\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 75,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 10,\n   \"circuit\": {\n    \"id\": 10,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa High\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 73,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a444b222-c2f7-479f-bcd7-3ac6cf5bd3bd",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuitGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "fd0c5e3f-2127-45e7-bce2-f7084a83bec9",
                    "name": "light Group",
                    "item": [
                        {
                            "id": "b517f4e0-695b-41c0-aa9e-0e43f47f9c3b",
                            "name": "Set options for a lightGroup in poolState.json",
                            "request": {
                                "name": "Set options for a lightGroup in poolState.json",
                                "description": {
                                    "content": "To set lightGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "lightGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "91a0cb8e-579a-4735-914a-e58c5c344b85",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"action\": {\n  \"val\": 0,\n  \"name\": \"ready\",\n  \"desc\": \"Ready\"\n },\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": {\n  \"val\": 3,\n  \"name\": \"intellibrite\",\n  \"desc\": \"IntelliBrite\"\n },\n \"equipmentType\": \"lightGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 15,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 74,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Entry Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 28,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  }\n ],\n \"lightingTheme\": {\n  \"val\": 196,\n  \"name\": \"white\",\n  \"desc\": \"White\",\n  \"type\": \"intellibrite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d513d0c6-37b6-4c62-880a-17ef7d086694",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "efcadd68-4c05-4d27-9371-d1ad04377e40",
                            "name": "Set options for a lightGroup in poolState.json",
                            "request": {
                                "name": "Set options for a lightGroup in poolState.json",
                                "description": {
                                    "content": "To set lightGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "lightGroup",
                                        "setTheme",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "f2ce1ff5-9f5a-4c17-81b5-88d33bb15058",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"action\": {\n  \"val\": 0,\n  \"name\": \"ready\",\n  \"desc\": \"Ready\"\n },\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": {\n  \"val\": 3,\n  \"name\": \"intellibrite\",\n  \"desc\": \"IntelliBrite\"\n },\n \"equipmentType\": \"lightGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 15,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 74,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Entry Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 28,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  }\n ],\n \"lightingTheme\": {\n  \"val\": 196,\n  \"name\": \"white\",\n  \"desc\": \"White\",\n  \"type\": \"intellibrite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "84819071-e1dc-4080-bcf9-d1e1d13cffe3",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "64b7b688-ddec-422f-a1cb-3f67aed3cd81",
                            "name": "{id}",
                            "item": [
                                {
                                    "id": "eff1d127-68ad-4deb-9bf6-d3c9664d4325",
                                    "name": "Set lightGroup at specified Id to colorSync mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to colorSync mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to colorSync mode.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSync",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "92630d28-34a6-4a28-8b5f-618b98085441",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.  ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSync",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "fe2113f8-b950-4e42-81e3-ce0fbbb0e6ae",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSync",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "ee7e6f23-1361-44b7-8c70-55e8949a19a0",
                                    "name": "Set lightGroup at specified Id to color mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to color mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to color mode.  Obtain valid colors from /config/options/lightGroups",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSet",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "0a68f57f-2117-4b47-be1f-9df2f0fe6bc8",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.      ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSet",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "2d84a40a-3b5a-4d95-bbbb-f005882e61ff",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSet",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "49307870-7e5c-423b-93be-87a1fd1b3694",
                                    "name": "Set lightGroup at specified Id to colorSwim mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to colorSwim mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to colorSwim mode. ",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSwim",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "f641d4f2-50ca-4012-8ba6-a2826dd92693",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.      ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSwim",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "dded82ac-d9f5-4cc1-9417-1b86013f24a8",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSwim",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "7e52f2ed-99b4-4910-a97d-e9cc3441509f",
                    "name": "Manually input temperatures.  This is only for virtual/standalone controllers.  Values will be overwritten by any OCP",
                    "request": {
                        "name": "Manually input temperatures.  This is only for virtual/standalone controllers.  Values will be overwritten by any OCP",
                        "description": {
                            "content": "To adjust the temperature, send an object with the current temp.  If there is an offset stored in sys.general.options it will be applied to the input temperature.  (`air` or `solar` can bu used in place of airSensor1/solarSensor1.)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "temps",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "8840713d-c9a7-4d67-a1f0-5d8f3e114bb0",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "temps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"units\": {\n  \"val\": 0,\n  \"name\": \"F\",\n  \"desc\": \"Fahrenheit\"\n },\n \"waterSensor1\": 80,\n \"bodies\": [\n  {\n   \"id\": 1,\n   \"heatMode\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"setPoint\": 92,\n   \"temp\": 80,\n   \"isOn\": true,\n   \"name\": \"Pool\",\n   \"circuit\": 6,\n   \"heatStatus\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"heaterOptions\": {\n    \"total\": 2,\n    \"gas\": 1,\n    \"solar\": 1,\n    \"heatpump\": 0,\n    \"ultratemp\": 0,\n    \"hybrid\": 0\n   }\n  },\n  {\n   \"id\": 2,\n   \"isOn\": false,\n   \"heatMode\": {\n    \"val\": 1,\n    \"name\": \"heater\",\n    \"desc\": \"Heater\"\n   },\n   \"name\": \"Spa\",\n   \"circuit\": 1,\n   \"heatStatus\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"heaterOptions\": {\n    \"total\": 2,\n    \"gas\": 1,\n    \"solar\": 1,\n    \"heatpump\": 0,\n    \"ultratemp\": 0,\n    \"hybrid\": 0\n   },\n   \"setPoint\": 99\n  }\n ],\n \"air\": 64,\n \"solar\": 99,\n \"equipmentType\": \"temps\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "6b8983a8-4ddc-4c7d-a3df-789cfd28584b",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "temps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "51c78a7b-5fe1-4f59-b342-a4bfb050cd22",
                    "name": "body",
                    "item": [
                        {
                            "id": "9605ff92-605c-42c8-acc8-a4c658aa4faf",
                            "name": "Set heat mode for a body in poolState.json",
                            "request": {
                                "name": "Set heat mode for a body in poolState.json",
                                "description": {
                                    "content": "To set heat mode of a body, send an object with the id and mode.  `mode` can be a numeric value or string value as referenced in /config/options/heaters.  ",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "body",
                                        "heatMode",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "1120d464-89a8-4808-b0c0-e3773dba8dda",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "heatMode",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "92736278-33e2-414d-847b-d4892f1f9263",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "heatMode",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "b7d113cc-1d87-4929-939f-157975caa6a9",
                            "name": "Set temp for a body in poolState.json",
                            "request": {
                                "name": "Set temp for a body in poolState.json",
                                "description": {
                                    "content": "To set temp of a body, send an object with the id and identifier for the body (name, id or circuit).  See schema example. ",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "body",
                                        "setPoint",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "d580c8d6-615d-4b63-a8d0-e03f3fa3349b",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "setPoint",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"heatMode\": {\n  \"val\": 0,\n  \"name\": \"off\",\n  \"desc\": \"Off\"\n },\n \"name\": \"Pool\",\n \"circuit\": 6,\n \"heatStatus\": {\n  \"val\": 0,\n  \"name\": \"off\",\n  \"desc\": \"Off\"\n },\n \"isOn\": false,\n \"setPoint\": 89\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "cd3eaf76-ec72-4a2f-aa0d-18f6ae93a821",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "setPoint",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1ff4c124-a112-4a74-b649-76e97bbc6ae0",
                    "name": "Cancel all delays on OCP",
                    "request": {
                        "name": "Cancel all delays on OCP",
                        "description": {
                            "content": "Cancel all delays on OCP",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "cancelDelay",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "ed6f7c5c-7c52-4f3c-8bd1-444c065745c7",
                            "name": "OK",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "cancelDelay",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "88507ecd-7015-40be-8b0f-986905b35535",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "cancelDelay",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        }
    ],
    "event": [],
    "variable": [
        {
            "id": "protocol",
            "description": {
                "content": "undefined (is one of https,http)",
                "type": "text/plain"
            },
            "type": "any",
            "value": "https"
        },
        {
            "id": "server",
            "description": {
                "content": "undefined",
                "type": "text/plain"
            },
            "type": "any",
            "value": "server"
        },
        {
            "id": "port",
            "description": {
                "content": "undefined",
                "type": "text/plain"
            },
            "type": "any",
            "value": "4201"
        },
        {
            "id": "baseUrl",
            "type": "string",
            "value": "{{protocol}}://{{server}}:{{port}}/"
        }
    ],
    "info": {
        "_postman_id": "2f43a2f2-b173-425c-abd0-1395932f2d77",
        "name": "nodejs-poolController API",
        "version": {
            "raw": "6.0.0",
            "major": 6,
            "minor": 0,
            "patch": 0,
            "prerelease": [],
            "build": [],
            "string": "6.0.0"
        },
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": {
            "content": "API's to access, manage and control your pool equipment.  You can find the main project at [nodejs-poolController](https://github.com/tagyoureit/nodejs-poolController/).\nThe data structures are defined in the main app's [wiki](https://github.com/tagyoureit/nodejs-poolController/wiki/Version-6-Data-Structures).\n\nThese api's are `live` in the sense that you can execute any of them against your local nodejs-poolController app(*).  \n1. Select one of the default servers or enter your server:port into the Server Variables area\n1. Open up any endpoint\n1. Click on \"Try it out\"\n1. If there are Parameters or JSON variables that need to be included in the request, fill them out\n1. Click execute and you can see the live results from your server \"To set body settings, send an object with the values you want to change from /config/options/bodies.\"\n\n* Note: If you are trying to access your njsPC app on any machine other than `localhost` you will need to connect to it over `https` due to [CORS](https://swagger.io/docs/open-source-tools/swagger-ui/usage/cors/) restrictions.\n** Note2: There is currently a bug with the `https` service in njsPC.  It will be fixed shortly.\n\nThere are options for running the API documentation locally on your computer:\n1. You can also download a [Postman collection](https://github.com/tagyoureit/nodejs-poolcontroller-api/blob/master/nodejs-poolcontroller-api.json) you can download and import into your local app.\n1. Download the [YAML](https://github.com/tagyoureit/nodejs-poolcontroller-api/blob/master/nodejs-poolcontroller-api.yaml) and paste it in http://editor.swagger.io\n1. Download a code editor like VSCode and use a [Swagger Preview Extension](https://marketplace.visualstudio.com/items?itemName=Arjun.swagger-viewer)\n\nWant to help?\n1. Clone the [nodejs-poolcontroller-api repository](https://github.com/tagyoureit/nodejs-poolcontroller-api)\n1. Create a new branch\n1. Make changes\n1. Open a Pull Request\n(Or, just open up an issue and it will get fixed)",
            "type": "text/plain"
        }
    }
}