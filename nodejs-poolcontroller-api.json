{
    "item": [
        {
            "id": "105cbf43-2960-4ecc-a7e6-87ce7bfd944e",
            "name": "config",
            "item": [
                {
                    "id": "40793689-4738-4e4b-9f05-9d8264b67645",
                    "name": "Shortcut for /config/all",
                    "request": {
                        "name": "Shortcut for /config/all",
                        "description": {
                            "content": "Shortcut for /config/all",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "7292d60b-18b9-4ec8-96bc-80db091e6ace",
                            "name": "poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e0de1871-16f0-4001-bbc1-a55dc39463df",
                    "name": "circuits",
                    "item": [
                        {
                            "id": "8b035a42-c381-49a6-b6d1-0e021e6e8449",
                            "name": "Get an array of all circuit objects with config data",
                            "request": {
                                "name": "Get an array of all circuit objects with config data",
                                "description": {
                                    "content": "Array of circuit config objects",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "fe7677f7-8166-4364-85fb-59c3ce0502e8",
                                    "name": "Circuit config array",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"isOn\": \"<boolean>\",\n  \"nameId\": \"<string>\",\n  \"isActive\": \"<boolean>\",\n  \"freeze\": \"<boolean>\",\n  \"showInFeatures\": \"<boolean>\",\n  \"eggTimer\": \"<integer>\",\n  \"equipmentType\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"isOn\": \"<boolean>\",\n  \"nameId\": \"<string>\",\n  \"isActive\": \"<boolean>\",\n  \"freeze\": \"<boolean>\",\n  \"showInFeatures\": \"<boolean>\",\n  \"eggTimer\": \"<integer>\",\n  \"equipmentType\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "f10ff1c4-e9e3-4a44-8d93-dd69e589e91c",
                            "name": "Get a list of valid controller names for circuits (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object in\n/config/options/circuits or /config/options/features instead.",
                            "request": {
                                "name": "Get a list of valid controller names for circuits (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object in\n/config/options/circuits or /config/options/features instead.",
                                "description": {
                                    "content": "Get a list of valid controller names for circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        "names",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "bfe2fe6f-4416-4836-8590-a05fc5a481c4",
                                    "name": "Array of controller function objects valid for names",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                "names",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "b83ace3d-2c9b-472a-ba43-5885e2d8a1d4",
                            "name": "Get a list of valid controller functions for circuits\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                            "request": {
                                "name": "Get a list of valid controller functions for circuits\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                                "description": {
                                    "content": "Get a list of valid controller functions for circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        "functions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d0c46444-3c1b-4846-8baf-e04ba468b233",
                                    "name": "Array of controller function objects valid for circuits",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                "functions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e652bea0-35e3-42c0-96d6-666ace2b49b9",
                    "name": "body",
                    "item": [
                        {
                            "id": "2c9366de-9393-42b6-850f-b49af4af6c91",
                            "name": "Set options related to the \"Body\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Body\" section in poolConfig.json",
                                "description": {
                                    "content": "To set body settings, send an object with the values you want to change from /config/options/bodies.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "body",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "cbc644e6-67e6-46cf-a81d-466edf8c1e96",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 2,\n \"name\": \"Spa\",\n \"type\": 0,\n \"isActive\": true,\n \"heatMode\": 3,\n \"circuit\": 1,\n \"setPoint\": 95\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "4dbd505c-d371-4de4-a37e-6507fa050940",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "5a614a2f-7060-4eb8-a31d-37447d096f45",
                            "name": "Get heat modes for the body specified by the id",
                            "request": {
                                "name": "Get heat modes for the body specified by the id",
                                "description": {
                                    "content": "Get heat modes for the body specified by the id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "body",
                                        ":id",
                                        "heatModes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "id of the body",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "a203f7a1-1d5e-496e-aac6-f69dd821246d",
                                    "name": "Array of heat mode objects",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                "<integer>",
                                                "heatModes",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "7686d032-740a-4761-8f87-b3707fa7eccd",
                    "name": "circuit",
                    "item": [
                        {
                            "id": "ce980629-722e-4d77-98ea-f6561e5f1738",
                            "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the values you want to change from /config/options/bodies.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "8809b905-896a-4491-9258-10e75f313622",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": 1,\n \"isActive\": true,\n \"freeze\": false,\n \"showInFeatures\": true,\n \"eggTimer\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "b4428ead-3c36-4322-8dd9-90bedbeab799",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7dcd57b7-92eb-4585-a8e7-5188a9ccf8bb",
                            "name": "Delete a circuit at the specified id",
                            "request": {
                                "name": "Delete a circuit at the specified id",
                                "description": {
                                    "content": "Delete a circuit at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "3c4085dc-65c0-484a-9012-8dbfd27594ba",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "bb166289-c216-4c8b-8041-d40ff474664a",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "42d0e9e6-419c-4b53-b51e-0e94749a5876",
                            "name": "Get all available names (built-in and custom).  (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object \nin /config/options/circuits or /config/options/features instead.",
                            "request": {
                                "name": "Get all available names (built-in and custom).  (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object \nin /config/options/circuits or /config/options/features instead.",
                                "description": {
                                    "content": "Get all available names (built-in and custom).  (*Touch only)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        "names",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "32d377f4-e760-4a4c-98a8-565bbc1dd24a",
                                    "name": "Array of name objects",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                "names",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": 1,\n  \"name\": \"aerator\",\n  \"desc\": \"Aerator\"\n },\n {\n  \"val\": 2,\n  \"name\": \"airblower\",\n  \"desc\": \"Air Blower\"\n },\n {\n  \"val\": 3,\n  \"name\": \"aux1\",\n  \"desc\": \"AUX 1\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "fed93dd7-a0f9-4319-a720-a815750ac614",
                            "name": "Get an array of objects that can include circuits, features, groups, virtual circuits.",
                            "request": {
                                "name": "Get an array of objects that can include circuits, features, groups, virtual circuits.",
                                "description": {
                                    "content": "Get an array of objects that can include circuits, features, groups, virtual circuits.  Any parameter not\nincluded will be included (must specify false to exclude values)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        "references",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Include/exclude circuitss in the references object",
                                            "key": "circuits",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude features in the references object",
                                            "key": "features",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude groupss in the references object",
                                            "key": "groups",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude virtuals in the references object",
                                            "key": "virtual",
                                            "value": "<boolean>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d4923a46-95e1-425f-8c34-a273f77fd70d",
                                    "name": "Array of circuits/features/groups/virtual circuit objects.",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                "references",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "circuits",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "features",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "groups",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "virtual",
                                                    "value": "<boolean>"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": 11,\n  \"name\": \"Spillway\",\n  \"type\": 14,\n  \"equipmentType\": \"feature\",\n  \"nameId\": 79\n },\n {\n  \"id\": 12,\n  \"name\": \"Waterfall 1\",\n  \"type\": 0,\n  \"equipmentType\": \"feature\",\n  \"nameId\": 87\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "66f9f720-b53d-4a94-8950-fc4cfdbfbbba",
                    "name": "options",
                    "item": [
                        {
                            "id": "d2a59052-21d8-4d2d-9f93-14d45890569e",
                            "name": "Get all available options needed to configure general options",
                            "request": {
                                "name": "Get all available options needed to configure general options",
                                "description": {
                                    "content": "Retrieves: countries, tempUnits, timeZones, clockSources, clockModes, pool, sensors",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "0d5136d9-5ce3-49a5-bd42-e5e2f9bbb523",
                                    "name": "Object containing all available general options for the pool type",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "general",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"countries\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"tempUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"timeZones\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"loc\": \"<string>\",\n   \"abbrev\": \"<string>\",\n   \"utcOffset\": \"<integer>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"loc\": \"<string>\",\n   \"abbrev\": \"<string>\",\n   \"utcOffset\": \"<integer>\"\n  }\n ],\n \"clockSources\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"clockModes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"pool\": {\n  \"options\": {\n   \"adjustDST\": \"<boolean>\",\n   \"clockMode\": \"<integer>\",\n   \"clockSource\": \"<string>\",\n   \"pumpDelay\": \"<boolean>\",\n   \"manualHeat\": \"<boolean>\",\n   \"units\": \"<integer>\"\n  },\n  \"owner\": {\n   \"name\": \"<string>\",\n   \"phone\": \"<string>\",\n   \"email\": \"<string>\",\n   \"email2\": \"<string>\",\n   \"phone2\": \"<string>\"\n  },\n  \"location\": {\n   \"address\": \"<string>\",\n   \"city\": \"<string>\",\n   \"state\": \"<string>\",\n   \"zip\": \"<string>\",\n   \"country\": \"<string>\",\n   \"latitude\": \"<string>\",\n   \"longitude\": \"<string>\",\n   \"timeZone\": \"<integer>\"\n  },\n  \"alias\": \"<string>\"\n },\n \"sensors\": [\n  {\n   \"name\": \"<string>\",\n   \"temp\": \"<integer>\",\n   \"tempAdj\": \"<integer>\",\n   \"binding\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"temp\": \"<integer>\",\n   \"tempAdj\": \"<integer>\",\n   \"binding\": \"<string>\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "be338be9-93ea-41bc-9467-19b7dd14c773",
                            "name": "Get all available options to set circuits",
                            "request": {
                                "name": "Get all available options to set circuits",
                                "description": {
                                    "content": "Returns: maxCircuits, invalidIds, equipmentIds, equipmentNames, functions, circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "circuits",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "93f91ad4-96b3-4a82-bbe5-fc9cb1558f97",
                                    "name": "Object containing all available general options for the circuits",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "circuits",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"invalidIds\": [\n  \"<integer>\",\n  \"<integer>\"\n ],\n \"equipmentIds\": {\n  \"start\": \"<integer>\",\n  \"stop\": \"<integer>\"\n },\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"functions\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"maxCircuits\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "e13ae701-f71e-49ba-aa2b-e0e221914457",
                            "name": "Get all options needed to set circuit groups",
                            "request": {
                                "name": "Get all options needed to set circuit groups",
                                "description": {
                                    "content": "Get all options needed to set circuit groups",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "circuitGroups",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "aa429fb8-a8b4-4b40-96fa-9a2455301964",
                                    "name": "Object containing all available general options for the circuit groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "circuitGroups",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"circuitGroups\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    }\n   ]\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    }\n   ]\n  }\n ],\n \"maxCircuitGroups\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0d12ff7a-66f4-4c73-9c1f-83a89588bd0d",
                            "name": "Get all available options to set lightGroups",
                            "request": {
                                "name": "Get all available options to set lightGroups",
                                "description": {
                                    "content": "Returns: maxLightGroups, invalidIds, equipmentIds, equipmentNames, functions, features",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "lightGroups",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "1e26d33d-6069-41b0-b1b9-447dc7ad98bc",
                                    "name": "Object containing all available general options for the light groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "lightGroups",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"maxLightGroups\": 1,\n \"equipmentNames\": [\n  {\n   \"val\": 1,\n   \"name\": \"aerator\",\n   \"desc\": \"Aerator\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"airblower\",\n   \"desc\": \"Air Blower\"\n  },\n  {\n   \"val\": 3,\n   \"name\": \"aux1\",\n   \"desc\": \"AUX 1\"\n  },\n  {\n   \"val\": 4,\n   \"name\": \"aux2\",\n   \"desc\": \"AUX 2\"\n  }\n ],\n \"themes\": [\n  {\n   \"val\": 0,\n   \"name\": \"off\",\n   \"desc\": \"Off\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 1,\n   \"name\": \"on\",\n   \"desc\": \"On\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 128,\n   \"name\": \"colorsync\",\n   \"desc\": \"Color Sync\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 144,\n   \"name\": \"colorswim\",\n   \"desc\": \"Color Swim\",\n   \"type\": \"intellibrite\"\n  }\n ],\n \"colors\": [\n  {\n   \"val\": 0,\n   \"name\": \"white\",\n   \"desc\": \"White\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"lightgreen\",\n   \"desc\": \"Light Green\"\n  },\n  {\n   \"val\": 4,\n   \"name\": \"green\",\n   \"desc\": \"Green\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": 2,\n   \"name\": \"Pool LtDeep\",\n   \"type\": 16,\n   \"equipmentType\": \"circuit\",\n   \"nameId\": 205\n  },\n  {\n   \"id\": 7,\n   \"name\": \"Spa Light\",\n   \"type\": 16,\n   \"equipmentType\": \"circuit\",\n   \"nameId\": 74\n  }\n ],\n \"lightGroups\": [\n  {\n   \"id\": 192,\n   \"circuits\": [\n    {\n     \"id\": 1,\n     \"circuit\": 2,\n     \"position\": 2,\n     \"color\": 6,\n     \"swimDelay\": 0,\n     \"isActive\": true\n    },\n    {\n     \"id\": 2,\n     \"circuit\": 7,\n     \"position\": 2,\n     \"color\": 14,\n     \"swimDelay\": 2,\n     \"isActive\": true\n    },\n    {\n     \"id\": 3,\n     \"circuit\": 8,\n     \"position\": 3,\n     \"color\": 2,\n     \"swimDelay\": 4,\n     \"isActive\": true\n    }\n   ],\n   \"isActive\": true,\n   \"name\": \"Intellibrite\",\n   \"type\": 3,\n   \"lightingTheme\": 195\n  }\n ],\n \"functions\": [\n  {\n   \"val\": 0,\n   \"name\": \"generic\",\n   \"desc\": \"Generic\"\n  },\n  {\n   \"val\": 1,\n   \"name\": \"spa\",\n   \"desc\": \"Spa\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"pool\",\n   \"desc\": \"Pool\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "f764b86f-8ef6-47d9-8be6-7a21db91a12a",
                            "name": "Get all available options to set features",
                            "request": {
                                "name": "Get all available options to set features",
                                "description": {
                                    "content": "Returns: maxCircuitGroups, equipmentNames, circuits, circuitGroups",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "features",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "f8a70591-3ffe-4938-a8a2-cabeab005221",
                                    "name": "Object containing all available general options for the circuit groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "features",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"invalidIds\": [\n  \"<integer>\",\n  \"<integer>\"\n ],\n \"equipmentIds\": {\n  \"start\": \"<integer>\",\n  \"stop\": \"<integer>\"\n },\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"functions\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"features\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"nameId\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"macro\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"nameId\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"macro\": \"<boolean>\"\n  }\n ],\n \"maxFeatures\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "09186dfb-1da8-4788-9fdf-d6eb1a4aafc6",
                            "name": "Get all available options to set bodies",
                            "request": {
                                "name": "Get all available options to set bodies",
                                "description": {
                                    "content": "Returns: maxBodies, bodyTypes, bodies",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "bodies",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d38d840f-3120-4129-882a-d4720c004dce",
                                    "name": "Object containing all available general options for the bodies",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "bodies",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"bodyTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  }\n ],\n \"maxBodies\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0ea3f31f-e2ed-4794-9212-16a06a6cf0b0",
                            "name": "Get all available options to set valves",
                            "request": {
                                "name": "Get all available options to set valves",
                                "description": {
                                    "content": "Returns: maxValves, valveTypes, circuits, valves",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "valves",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "e13a8d94-e8eb-40f9-a240-ad0f2877a663",
                                    "name": "Object containing all available general options for the valves",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "valves",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"valveTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"valves\": [\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"isIntake\": \"<boolean>\",\n   \"isReturn\": \"<boolean>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"isIntake\": \"<boolean>\",\n   \"isReturn\": \"<boolean>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"maxValves\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6a810629-4402-4fee-a1de-3de28c5f4ca9",
                            "name": "Get all available options to set pumps",
                            "request": {
                                "name": "Get all available options to set pumps",
                                "description": {
                                    "content": "Returns: maxPumps, pumpUnits, pumpTypes, models, circuits, bodies, pumps",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "pumps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "8c4a9ea7-78ce-4cb4-81ea-a4d60a24c72d",
                                    "name": "Object containing all available general options for the pumps",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "pumps",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"pumpUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"pumpTypes\": {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\",\n  \"maxCircuits\": \"<integer>\",\n  \"hasAddress\": \"<boolean>\",\n  \"hasBody\": \"<boolean>\"\n },\n \"models\": {\n  \"ss\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"ds\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vs\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vf\": [\n   {\n    \"ss\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"ds\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vf\": [\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     },\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     }\n    ],\n    \"vsf\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vssvrs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ]\n   },\n   {\n    \"ss\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"ds\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vf\": [\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     },\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     }\n    ],\n    \"vsf\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vssvrs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ]\n   }\n  ],\n  \"vsf\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vssvrs\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ]\n },\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  }\n ],\n \"pumps\": [\n  {\n   \"id\": \"<integer>\",\n   \"model\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    }\n   ],\n   \"flowStepSize\": \"<integer>\",\n   \"minFlow\": \"<integer>\",\n   \"maxFlow\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"primingTime\": \"<integer>\",\n   \"speedStepSize\": \"<integer>\",\n   \"minSpeed\": \"<integer>\",\n   \"maxSpeed\": \"<integer>\",\n   \"primingSpeed\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"model\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    }\n   ],\n   \"flowStepSize\": \"<integer>\",\n   \"minFlow\": \"<integer>\",\n   \"maxFlow\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"primingTime\": \"<integer>\",\n   \"speedStepSize\": \"<integer>\",\n   \"minSpeed\": \"<integer>\",\n   \"maxSpeed\": \"<integer>\",\n   \"primingSpeed\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"maxPumps\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "074a2a28-20e9-4f7c-8def-85165689af8c",
                            "name": "Get all available options to set schedules",
                            "request": {
                                "name": "Get all available options to set schedules",
                                "description": {
                                    "content": "Returns: maxSchedules, tempUnits, scheduleTimeTypes, schedules, scheduleTypes, scheduleDays,",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "schedules",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "5b402059-30f5-490f-a142-7a241ac1dac1",
                                    "name": "Object containing all available general options for the schedules",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "schedules",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"tempUnits\": {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n \"scheduleTimeTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"scheduleTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\",\n   \"startDate\": \"<boolean>\",\n   \"startTime\": \"<boolean>\",\n   \"endTime\": \"<boolean>\",\n   \"days\": \"<string>\",\n   \"heatSource\": \"<boolean>\",\n   \"heatSetpoint\": \"<boolean>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\",\n   \"startDate\": \"<boolean>\",\n   \"startTime\": \"<boolean>\",\n   \"endTime\": \"<boolean>\",\n   \"days\": \"<string>\",\n   \"heatSource\": \"<boolean>\",\n   \"heatSetpoint\": \"<boolean>\"\n  }\n ],\n \"scheduleDays\": [\n  {\n   \"val\": \"<integer>\",\n   \"days\": {\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"down\": \"<integer>\"\n   }\n  },\n  {\n   \"val\": \"<integer>\",\n   \"days\": {\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"down\": \"<integer>\"\n   }\n  }\n ],\n \"heatSources\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"schedules\": [\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"startTime\": \"<integer>\",\n   \"endTime\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"scheduleDays\": \"<integer>\",\n   \"runOnce\": \"<integer>\",\n   \"scheduleType\": \"<integer>\",\n   \"startTimeType\": \"<integer>\",\n   \"endTimeType\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"startTime\": \"<integer>\",\n   \"endTime\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"scheduleDays\": \"<integer>\",\n   \"runOnce\": \"<integer>\",\n   \"scheduleType\": \"<integer>\",\n   \"startTimeType\": \"<integer>\",\n   \"endTimeType\": \"<integer>\"\n  }\n ],\n \"maxSchedules\": \"<integer>\",\n \"clockMode\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "c75bbe79-403e-44a3-901a-75f9941db420",
                            "name": "Get all available options to set heaters",
                            "request": {
                                "name": "Get all available options to set heaters",
                                "description": {
                                    "content": "Returns: maxHeaters, heaters, heaterTypes, heatModes",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "heaters",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "cf16e607-33e9-4529-96e8-e77c3ad0a80f",
                                    "name": "Object containing all available general options for the heaters",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "heaters",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"heatModes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"heaterTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"heaters\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"freeze\": \"<boolean>\",\n   \"coolingEnabled\": \"<boolean>\",\n   \"startTempDelta\": \"<integer>\",\n   \"stopTempDelta\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"freeze\": \"<boolean>\",\n   \"coolingEnabled\": \"<boolean>\",\n   \"startTempDelta\": \"<integer>\",\n   \"stopTempDelta\": \"<integer>\"\n  }\n ],\n \"maxHeaters\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6613e641-9d0b-4c90-97c7-2929c2c6293d",
                            "name": "Get a list of custom names (*Touch only)",
                            "request": {
                                "name": "Get a list of custom names (*Touch only)",
                                "description": {
                                    "content": "Returns: customNames, maxCustomNames. (*Touch only)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "9051fb1b-a0ab-4904-90e3-dc1895121d28",
                                    "name": "Object with maxCustomNames and customNames",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "customNames",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"maxCustomNames\": 10,\n \"customNames\": [\n  {\n   \"id\": 0,\n   \"name\": \"WtrFall 1\"\n  },\n  {\n   \"id\": 1,\n   \"name\": \"WtrFall 1.5\"\n  },\n  {\n   \"id\": 2,\n   \"name\": \"WtrFall 2\"\n  },\n  {\n   \"id\": 3,\n   \"name\": \"WtrFall 3\"\n  },\n  {\n   \"id\": 4,\n   \"name\": \"Pool High\"\n  },\n  {\n   \"id\": 5,\n   \"name\": \"Pool LtDeep\"\n  },\n  {\n   \"id\": 8,\n   \"name\": \"USERNAME-09\"\n  },\n  {\n   \"id\": 9,\n   \"name\": \"USERNAME-aa\"\n  },\n  {\n   \"id\": 6,\n   \"name\": \"Pool LtShlw\"\n  },\n  {\n   \"id\": 7,\n   \"name\": \"USERNAME-08\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d0bf04e0-2b1e-4210-b0dd-f08bc5246403",
                            "name": "Get all available options to set chem controllers",
                            "request": {
                                "name": "Get all available options to set chem controllers",
                                "description": {
                                    "content": "Returns: types, bodies, tempUnits, status, alarms, warnings, controllers, maxChemControllers",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "chemControllers",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "744e058b-8d00-451e-8189-417d0b85413f",
                                    "name": "Object containing all available general options for the chlorinators",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "chemControllers",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"types\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"tempUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"status\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"dosingStatus\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"warnings\": {\n  \"waterChemistry\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  \"phLockout\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  \"phDailyLimitReached\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  \"orpDailyLimitReached\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  \"invalidSetup\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  \"chlorinatorCommError\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n },\n \"alams\": {\n  \"flow\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  \"ph\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  \"orp\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  \"phTank\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  \"orpTank\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  \"probeFault\": {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n },\n \"controllers\": [\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"isVirtual\": \"<boolean>\",\n   \"name\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"phSetpoint\": \"<number>\",\n   \"orpSetpoint\": \"<boolean>\",\n   \"alkalinity\": \"<integer>\",\n   \"calciumHardness\": \"<integer>\",\n   \"cyanuricAcid\": \"<integer>\",\n   \"isFlowDelayMode\": \"<boolean>\",\n   \"phManualDosing\": \"<boolean>\",\n   \"isIntelliChlorUsed\": \"<boolean>\",\n   \"HMIAdvancedDisplay\": \"<boolean>\",\n   \"isAcidBaseDosing\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"isVirtual\": \"<boolean>\",\n   \"name\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"phSetpoint\": \"<number>\",\n   \"orpSetpoint\": \"<boolean>\",\n   \"alkalinity\": \"<integer>\",\n   \"calciumHardness\": \"<integer>\",\n   \"cyanuricAcid\": \"<integer>\",\n   \"isFlowDelayMode\": \"<boolean>\",\n   \"phManualDosing\": \"<boolean>\",\n   \"isIntelliChlorUsed\": \"<boolean>\",\n   \"HMIAdvancedDisplay\": \"<boolean>\",\n   \"isAcidBaseDosing\": \"<boolean>\"\n  }\n ],\n \"maxChemControllers\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "83219714-ccc0-4782-b4ee-e3c1bb8c458d",
                            "name": "Get all available options to set chlorinators",
                            "request": {
                                "name": "Get all available options to set chlorinators",
                                "description": {
                                    "content": "Returns: types, bodies, chlorinators, maxChlorinators",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "chlorinators",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "4bab61df-5526-4336-a8cb-438416571ac5",
                                    "name": "Object containing all available general options for the chlorinators",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "chlorinators",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"types\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"chlorinators\": [\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"spaSetpoint\": \"<integer>\",\n   \"poolSetpoint\": \"<integer>\",\n   \"superChlor\": \"<boolean>\",\n   \"superChlorHours\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"spaSetpoint\": \"<integer>\",\n   \"poolSetpoint\": \"<integer>\",\n   \"superChlor\": \"<boolean>\",\n   \"superChlorHours\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\"\n  }\n ],\n \"maxChlorinators\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ab66b940-9278-4610-8cc9-d4ec875a9938",
                            "name": "Get days of week that are valid for the current OCP.  This can also be retrieved as `scheduleDays` in the /config/options/schedules object.",
                            "request": {
                                "name": "Get days of week that are valid for the current OCP.  This can also be retrieved as `scheduleDays` in the /config/options/schedules object.",
                                "description": {
                                    "content": "Get Days of week; info now contained in /config/options/schedules",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "94680b18-bb86-4beb-9ea7-3542084a202e",
                                    "name": "Array of days",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "dateTime",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "0625c8f0-a1cb-4b77-a1a4-c80e960dccf9",
                    "name": "Set options related to the \"Pool\" section in poolConfig.json.",
                    "request": {
                        "name": "Set options related to the \"Pool\" section in poolConfig.json.",
                        "description": {
                            "content": "To set general settings, send an object with the value you want to change from /config/options/general.",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "general",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "b3c0a3b1-cf2f-44ef-8d98-d3ffb31fc686",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"adjustDST\": \"<boolean>\",\n \"clockMode\": \"<integer>\",\n \"clockSource\": \"<string>\",\n \"pumpDelay\": \"<boolean>\",\n \"manualHeat\": \"<boolean>\",\n \"units\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c9e021c2-30ee-4032-a8a7-e4be2c145a3f",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "eec8bdad-4411-40e6-ae84-aeee8d8300fb",
                    "name": "Set options related to the \"Valve\" section in poolConfig.json",
                    "request": {
                        "name": "Set options related to the \"Valve\" section in poolConfig.json",
                        "description": {
                            "content": "To set valve settings, send an object with the values you want to change from /config/options/general.",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "valve",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "54db6478-8527-42a8-8515-460c9e441d25",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "valve",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"circuit\": 128,\n \"isActive\": true,\n \"name\": \"Solar\",\n \"type\": 0,\n \"isReturn\": false,\n \"isIntake\": false\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "ddd13961-a912-452a-b32b-9d927bf9c3ce",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "valve",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "cbf621e8-cb9e-4abc-b4bb-b69bc274f5ff",
                    "name": "feature",
                    "item": [
                        {
                            "id": "9294519e-8291-49f9-b14e-6468218c5ee0",
                            "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/features.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "feature",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "f7af3066-169d-4dac-8fae-05f69dc6fc66",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 12,\n \"name\": \"Waterfall 1\",\n \"nameId\": 87,\n \"type\": 0,\n \"isActive\": true,\n \"freeze\": false,\n \"showInFeatures\": true,\n \"eggTimer\": 420,\n \"macro\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "eae8f733-3224-41d3-956c-cda7a57ffca0",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a9eac0ee-bcca-4c16-b9eb-5286768a2914",
                            "name": "Delete a feature at the specified id",
                            "request": {
                                "name": "Delete a feature at the specified id",
                                "description": {
                                    "content": "Delete a feature at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "feature",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "51048641-69f5-41be-846f-084cde4420f6",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "6950b2cf-2f85-4169-9aed-b31386727620",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "fec94467-f88f-4ff0-b8a4-192930c16d93",
                    "name": "circuit Group",
                    "item": [
                        {
                            "id": "c9634aec-bac2-4808-ae36-a8715b0818ac",
                            "name": "Set options related to the \"Circuit Groups\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit Groups\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/circuitGroups.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a18a43e9-ffba-42d1-af23-cf3570a19c4b",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"Need Example\": null\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "c72fe419-899d-4ac1-9367-5b2af93514df",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7f60f2bb-3869-40e5-b7b2-2276ae608325",
                            "name": "Delete a circuit group at the specified id",
                            "request": {
                                "name": "Delete a circuit group at the specified id",
                                "description": {
                                    "content": "Delete a circuit group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "628123c4-d1c7-44ca-b0d5-766855b510b3",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "a0d3e59f-3606-4d96-9adc-4efdee611f08",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0079c829-db59-4e97-9119-88d0419445a0",
                            "name": "Get a single circuit group at the specified id",
                            "request": {
                                "name": "Get a single circuit group at the specified id",
                                "description": {
                                    "content": "Get a single circuit group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "0d1e34d2-7c61-4832-8791-08a9c63ca15e",
                                    "name": "Circuit group extended object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4d9e3a03-67f5-42e5-be2f-5cedaa6e92d0",
                    "name": "light Group",
                    "item": [
                        {
                            "id": "d6e5b4ad-d23b-4105-aa48-f9c019d818cb",
                            "name": "Set options related to the \"lightGroups\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"lightGroups\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/lightGroups.\n\n*NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, \nsend an empty array `[]`.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "ae637230-f47d-445a-867f-19621437e571",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": 2,\n   \"position\": 2,\n   \"color\": 6,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": 7,\n   \"position\": 2,\n   \"color\": 14,\n   \"swimDelay\": 2,\n   \"isActive\": true\n  },\n  {\n   \"id\": 3,\n   \"circuit\": 8,\n   \"position\": 3,\n   \"color\": 2,\n   \"swimDelay\": 4,\n   \"isActive\": true\n  }\n ],\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": 3,\n \"lightingTheme\": 195\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "13758535-75c8-4efb-ab6a-062f22b40ffb",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "8f10196c-429b-4001-b594-a75b4415a2cf",
                            "name": "Delete a light group at the specified id",
                            "request": {
                                "name": "Delete a light group at the specified id",
                                "description": {
                                    "content": "Delete a light group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "3381c54d-f4e3-49c8-90ac-bd18d81572f2",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "02a93596-166d-4097-aedb-79fedc952b1c",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0d1a1e8e-1c2e-49cf-859a-3d0cb68b6464",
                            "name": "{id}",
                            "item": [
                                {
                                    "id": "f1407815-60db-49d0-a09c-a7b490ac5c89",
                                    "name": "Get a single lightGroup at the specified id This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                    "request": {
                                        "name": "Get a single lightGroup at the specified id This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                        "description": {
                                            "content": "Get a single lightGroup at the specified id",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ":id",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "a3e45072-a9a4-4626-a979-330291f973fb",
                                            "name": "Object with deep linking",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "config",
                                                        "lightGroup",
                                                        "<integer>",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "text/plain"
                                                }
                                            ],
                                            "body": "",
                                            "cookie": [],
                                            "_postman_previewlanguage": "text"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "70e5aca0-0395-4429-ae81-b1dd798cb868",
                                    "name": "set lg attribs\nThis endpoint is going away.  Use /config/lightGroup instead.",
                                    "request": {
                                        "name": "set lg attribs\nThis endpoint is going away.  Use /config/lightGroup instead.",
                                        "description": {
                                            "content": "",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ":id",
                                                "setColors",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "65139e89-55d8-4710-8986-133c8be0057b",
                                            "name": "Array of",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "config",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "setColors",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "text/plain"
                                                }
                                            ],
                                            "body": "",
                                            "cookie": [],
                                            "_postman_previewlanguage": "text"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0154267f-0766-46cd-b587-9b498ead10ea",
                            "name": "Get lightgroup colors, theme, action\nThis endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                            "request": {
                                "name": "Get lightgroup colors, theme, action\nThis endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                "description": {
                                    "content": "Get lightgroup colors, theme, action",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        "colors",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "c4ac1dcb-eda1-4db8-9779-958579423fe3",
                                    "name": "Object of items...",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                "colors",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "def0bb09-e365-463e-9df7-541c56e69b03",
                    "name": "pump",
                    "item": [
                        {
                            "id": "7a5a2d01-ca6d-440a-8fd3-91007e8452dd",
                            "name": "Set options related to the \"pumps\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"pumps\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/pumps.\n\n*NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, \nsend an empty array `[]`.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "6eb8c962-c0d7-47ce-a740-83643636827e",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"type\": 128,\n \"address\": 96,\n \"isActive\": true,\n \"model\": 0,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": 255,\n   \"speed\": 1830,\n   \"units\": 0\n  },\n  {\n   \"id\": 2,\n   \"circuit\": 4,\n   \"speed\": 2460,\n   \"units\": 0\n  }\n ],\n \"primingSpeed\": 3000,\n \"primingTime\": 1,\n \"minSpeed\": 450,\n \"maxSpeed\": 3450,\n \"speedStepSize\": 10,\n \"name\": \"Pool\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "3d947e62-cb13-4fe5-8af2-b274bea7a3be",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a17e9a61-ccff-4f40-ac2a-942430874984",
                            "name": "Delete a pump at the specified id",
                            "request": {
                                "name": "Delete a pump at the specified id",
                                "description": {
                                    "content": "Delete a pump at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "655f9eb1-4af7-4a91-a297-1a469c934fc9",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "0cce66c3-f8a3-494a-863e-ee51b9518d6d",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a165c4f7-1c9c-4dd0-878a-1716194fe634",
                            "name": "Delete a pump at the specified Id",
                            "request": {
                                "name": "Delete a pump at the specified Id",
                                "description": {
                                    "content": "Delete a pump at the specified Id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ":pumpId",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "cafab655-0228-415d-875e-d1d19a674ce5",
                                    "name": "Array of",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ":pumpId",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "pumpId"
                                                }
                                            ]
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4e0717c2-9a48-4b6a-918c-fb0f7eeab534",
                    "name": "Set custom names on OCP (*Touch only)",
                    "request": {
                        "name": "Set custom names on OCP (*Touch only)",
                        "description": {
                            "content": "Set custom names on OCP (*Touch only)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "customNames",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                        }
                    },
                    "response": [
                        {
                            "id": "e8650cbb-9ab6-49fd-b086-57395f0078cc",
                            "name": "Object with custom name",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a714efd0-b435-493e-b0fa-424fdda38414",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "186d8750-3ef5-4d43-bc1f-ceb1f35d8057",
                    "name": "Set a single custom names on OCP (*Touch only)",
                    "request": {
                        "name": "Set a single custom names on OCP (*Touch only)",
                        "description": {
                            "content": "Set a single custom names on OCP (*Touch only)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "customName",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "0556c625-18fb-49ff-8538-f819a6dd051f",
                            "name": "Object with custom name",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customName",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "67ff50e7-0f43-45ca-9fb1-7d737d9eecc1",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customName",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "bbba9dd2-7888-4662-97ff-44869681ab4f",
                    "name": "schedule",
                    "item": [
                        {
                            "id": "3c5fe981-2805-4309-a3a9-481b19d3bf81",
                            "name": "Set options related to the \"schedules\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"schedules\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/schedules.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "2f9d5889-01c5-460d-ae3a-8f3b25dfebca",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"circuit\": 6,\n \"startTime\": 495,\n \"endTime\": 960,\n \"isActive\": true,\n \"scheduleDays\": 127,\n \"runOnce\": 128,\n \"scheduleType\": 128,\n \"startTimeType\": 0,\n \"endTimeType\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "6c6184ec-f2a7-4059-b975-e3a085d64d22",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a4eef707-2613-4114-adef-3959649e723b",
                            "name": "Delete a schedule at the specified id",
                            "request": {
                                "name": "Delete a schedule at the specified id",
                                "description": {
                                    "content": "Delete a schedule at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "a8dc11a1-e49d-494c-94d2-7c718192cb38",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "bea322e1-6720-4894-a7de-a4d9539cca2d",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "da9b9c61-7de0-4c02-adaf-3bc2e35f1293",
                            "name": "Get an individual schedule\nThis endpoint will be going away.  Please use /config/schedules or /config/options/schedules instead.",
                            "request": {
                                "name": "Get an individual schedule\nThis endpoint will be going away.  Please use /config/schedules or /config/options/schedules instead.",
                                "description": {
                                    "content": "Get an individual schedule",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "f0d0eaef-f123-46f9-b7af-11cfa1a4c5b2",
                                    "name": "Circuit object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\",\n \"isOn\": \"<boolean>\",\n \"nameId\": \"<string>\",\n \"isActive\": \"<boolean>\",\n \"freeze\": \"<boolean>\",\n \"showInFeatures\": \"<boolean>\",\n \"eggTimer\": \"<integer>\",\n \"equipmentType\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "dfc5ef3a-5413-4b9c-ba7d-e1bf9f653cdb",
                    "name": "chlorinator",
                    "item": [
                        {
                            "id": "c209ac8c-45b0-4853-830d-8d9d396edc02",
                            "name": "Set options related to the \"chlorinators\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"chlorinators\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/chlorinators.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinator",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "f51f8f2f-fd6c-43e3-a265-81b526e3db38",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"address\": 80,\n \"isActive\": true,\n \"body\": 32,\n \"spaSetpoint\": 15,\n \"poolSetpoint\": 2,\n \"superChlor\": true,\n \"superChlorHours\": 10,\n \"name\": \"Intellichlor--40\",\n \"type\": 2\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "11d54e00-52f4-4551-913f-c5a1f75f852b",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d06cc82b-9f58-4023-bc15-d86569922fc7",
                            "name": "Get a single chlorinator object",
                            "request": {
                                "name": "Get a single chlorinator object",
                                "description": {
                                    "content": "Get a single chlorinator object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinator",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d6b0e78e-d1a5-4c99-9574-05ef83f7b729",
                                    "name": "Chlorinator object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ":id",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"<integer>\",\n \"address\": \"<integer>\",\n \"isActive\": \"<boolean>\",\n \"body\": \"<integer>\",\n \"spaSetpoint\": \"<integer>\",\n \"poolSetpoint\": \"<integer>\",\n \"superChlor\": \"<boolean>\",\n \"superChlorHours\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "cd998b9e-1e18-454d-b3f7-f7320e2b0321",
                    "name": "Get a list of valid controller functions for features\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                    "request": {
                        "name": "Get a list of valid controller functions for features\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                        "description": {
                            "content": "Get a list of valid controller functions for features",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "features",
                                "functions",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "a139ea54-09c6-4d0a-bc54-d4ed0be74b0b",
                            "name": "Array of controller function objects valid for features",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "features",
                                        "functions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a9f7ea9c-fc4c-44df-8d26-4b95a5f32a3a",
                    "name": "Start a search for standalone chlorinators",
                    "request": {
                        "name": "Start a search for standalone chlorinators",
                        "description": {
                            "content": "Start a search for standalone chlorinators",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "chlorinators",
                                "search",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "153fa9a8-5f6d-413e-a1e2-79f1e6044997",
                            "name": "Chlorinator object (isActive and isVirtual should be checked)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinators",
                                        "search",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": \"<integer>\",\n \"address\": \"<integer>\",\n \"isActive\": \"<boolean>\",\n \"body\": \"<integer>\",\n \"spaSetpoint\": \"<integer>\",\n \"poolSetpoint\": \"<integer>\",\n \"superChlor\": \"<boolean>\",\n \"superChlorHours\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f23b00e8-c62c-4ffb-b1c9-e0d14a59ef33",
                    "name": "Set date and time options",
                    "request": {
                        "name": "Set date and time options",
                        "description": {
                            "content": "Set date and time options",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "dateTime",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "b03508cb-ba4a-4769-b7a9-040226ab3806",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"min\": \"<integer>\",\n \"hour\": \"<integer>\",\n \"date\": \"<integer>\",\n \"month\": \"<integer>\",\n \"year\": \"<integer>\",\n \"dow\": \"<integer>\",\n \"dst\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4fcd3710-512c-41ac-819e-284c90290403",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1c077cfc-76ec-4a37-bcf0-2bd3d8e0040e",
                    "name": "Get a list of light group themes \nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                    "request": {
                        "name": "Get a list of light group themes \nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                        "description": {
                            "content": "Get a list of light group themes",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "lightGroups",
                                "themes",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "f199bbec-74d3-44cd-9a2b-6ae7a8781de9",
                            "name": "Array of",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroups",
                                        "themes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "c3055926-2848-4620-8199-08b7bc00c74f",
                    "name": "Get lightGroup themes - can be retrieved with /config/options/lightGroups; also it sends enumerated state info and not just identifiers.\nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                    "request": {
                        "name": "Get lightGroup themes - can be retrieved with /config/options/lightGroups; also it sends enumerated state info and not just identifiers.\nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                        "description": {
                            "content": "",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "intellibrite",
                                "themes",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "06bfde33-fd63-4ef8-bcc3-b9052f4054fe",
                            "name": "Array of",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "intellibrite",
                                        "themes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a567ebf1-f323-4452-932b-35a755b2b256",
                    "name": "chem Controller",
                    "item": [
                        {
                            "id": "ba3a2aab-ac9e-42b5-8617-62363750b128",
                            "name": "Set options related to the \"chemControllers\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"chemControllers\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/chemControllers.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chemController",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\",\n    \"isFlowDelayMode\": \"<boolean>\",\n    \"phManualDosing\": \"<boolean>\",\n    \"isIntelliChlorUsed\": \"<boolean>\",\n    \"HMIAdvancedDisplay\": \"<boolean>\",\n    \"isAcidBaseDosing\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "41aca052-2bcd-406f-b205-a106da90d035",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\",\n    \"isFlowDelayMode\": \"<boolean>\",\n    \"phManualDosing\": \"<boolean>\",\n    \"isIntelliChlorUsed\": \"<boolean>\",\n    \"HMIAdvancedDisplay\": \"<boolean>\",\n    \"isAcidBaseDosing\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"type\": 3,\n \"isActive\": true,\n \"isVirtual\": true,\n \"name\": \"Chem Controller\",\n \"pHSetpoint\": 7.4,\n \"orpSetpoint\": 660,\n \"alkalinity\": 40,\n \"calciumHardness\": 710,\n \"cyanuricAcid\": 10\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "296a41ba-6da7-41ef-b180-342db4fa9826",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\",\n    \"isFlowDelayMode\": \"<boolean>\",\n    \"phManualDosing\": \"<boolean>\",\n    \"isIntelliChlorUsed\": \"<boolean>\",\n    \"HMIAdvancedDisplay\": \"<boolean>\",\n    \"isAcidBaseDosing\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "256292b1-23ae-4873-b4c2-4742b1bb1fde",
                            "name": "NOT IMPLEMENTED YET.  Begin a search on the server for any chem controllers",
                            "request": {
                                "name": "NOT IMPLEMENTED YET.  Begin a search on the server for any chem controllers",
                                "description": {
                                    "content": "Begin a search on the server for any chem controllers",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chemController",
                                        "search",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "42833e40-8ae1-4240-81c9-30a369695a0b",
                                    "name": "Searching for chem controllers.",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                "search",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "ee630381-1a4c-4764-96c7-d7e462ba1d7f",
                    "name": "Return a section of poolConfig.json",
                    "request": {
                        "name": "Return a section of poolConfig.json",
                        "description": {
                            "content": "Return a section of poolConfig.json",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                ":section",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "all",
                                    "key": "section"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "1780a4ad-3adb-4d12-862b-5220b3684194",
                            "name": "{Section} of poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "89ea7ee0-91d5-4cdc-8217-2061a5af843f",
            "name": "app",
            "item": [
                {
                    "id": "7d01616d-04aa-4ac5-a032-a14e41cf92d5",
                    "name": "Get all available options to set logger",
                    "request": {
                        "name": "Get all available options to set logger",
                        "description": {
                            "content": "Returns: app logger",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "app",
                                "options",
                                "logger",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "a4b70417-f5ef-4a0d-94bd-6a8fc734c5a6",
                            "name": "Object containing all available options for the logger",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "options",
                                        "logger",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"logger\": {\n  \"packet\": {\n   \"enabled\": true,\n   \"logToConsole\": false,\n   \"logToFile\": false,\n   \"filename\": \"packetLog\",\n   \"invalid\": true,\n   \"broadcast\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"pump\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"chlorinator\": {\n    \"enabled\": false,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"intellichem\": {\n    \"enabled\": true,\n    \"includeActions\": [],\n    \"exclueActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"intellivalve\": {\n    \"enabled\": true,\n    \"includeActions\": [],\n    \"exclueActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"unidentified\": {\n    \"enabled\": true,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"unknown\": {\n    \"enabled\": true,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   }\n  },\n  \"app\": {\n   \"enabled\": true,\n   \"level\": \"debug\",\n   \"captureForReplay\": false\n  }\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "46c0f2a6-9c49-4618-8d52-5fd427f4ef7a",
                    "name": "logger",
                    "item": [
                        {
                            "id": "96a6150a-b74c-4d6c-92ab-26c2304b89fc",
                            "name": "Set options related to the \"log\" section in config.json",
                            "request": {
                                "name": "Set options related to the \"log\" section in config.json",
                                "description": {
                                    "content": "To set logger settings, send an object with the values you want to change from /config/options/logger.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "logger",
                                        "setOptions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "5a13d847-0e12-4fd8-8e7e-dee983c3ee4f",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "setOptions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"logger\": {\n  \"packet\": {\n   \"enabled\": true,\n   \"logToConsole\": false,\n   \"logToFile\": false,\n   \"filename\": \"packetLog\",\n   \"invalid\": true,\n   \"broadcast\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   }\n  },\n  \"app\": {\n   \"enabled\": true,\n   \"level\": \"debug\",\n   \"captureForReplay\": false\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "631e03dd-1cc5-45eb-ab22-ca5e18a5368a",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "setOptions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "67ff2b59-71c5-4f51-9ba7-c40ef7edc5b0",
                            "name": "Delete current logfile from disk",
                            "request": {
                                "name": "Delete current logfile from disk",
                                "description": {
                                    "content": "Delete current logfile from disk",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "logger",
                                        "clearMessages",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "fa0f8256-140a-40a7-bde0-37137fec3eb0",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "clearMessages",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "c3d5370b-6cc7-4e35-a225-02e92fdf0727",
                    "name": "Get all broadcast packets identifiers",
                    "request": {
                        "name": "Get all broadcast packets identifiers",
                        "description": {
                            "content": "Get all broadcast packets identifiers",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "app",
                                "message",
                                "broadcast",
                                "actions",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "024e506a-d70f-4979-9898-2ec6fc8e971c",
                            "name": "Array of broadcast actions",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "message",
                                        "broadcast",
                                        "actions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "73200925-28db-47ae-ad59-273b2d84be7b",
                    "name": "config",
                    "item": [
                        {
                            "id": "0c74a844-3372-4703-a5b4-1c77c0f27492",
                            "name": "Reload the app with files from disk",
                            "request": {
                                "name": "Reload the app with files from disk",
                                "description": {
                                    "content": "Reload the app with files from disk",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "reload",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "c4d2a198-4606-4e03-a802-b9a60122cb23",
                                    "name": "Successful Reload",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "reload",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "da8cd50b-ce23-43a2-803b-2afefc43ae1a",
                            "name": "Starts a packet capture on the server WITHOUT a reset",
                            "request": {
                                "name": "Starts a packet capture on the server WITHOUT a reset",
                                "description": {
                                    "content": "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "startPacketCapture",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "664c34be-dc2f-4c05-a9db-5a2a686ceed3",
                                    "name": "OK",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "startPacketCapture",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6007344c-4dc5-4018-a8dc-1605490e7bbd",
                            "name": "Starts a packet capture on the server WITH a reset",
                            "request": {
                                "name": "Starts a packet capture on the server WITH a reset",
                                "description": {
                                    "content": "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "startPacketCaptureWithoutReset",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "c1b60101-c661-46b4-a65c-c773b67214cf",
                                    "name": "OK",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "startPacketCaptureWithoutReset",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "2a580cec-b030-4687-95df-91bb958fa034",
                            "name": "Stop an in-progress packet capture and download a zipped file",
                            "request": {
                                "name": "Stop an in-progress packet capture and download a zipped file",
                                "description": {
                                    "content": "Stop an in-progress packet capture and download a zipped file",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "stopPacketCapture",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "bab4cafa-5969-4958-89fb-522f8d1f3d99",
                                    "name": "Zip file of packet capture",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "stopPacketCapture",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "zip"
                                        }
                                    ],
                                    "body": "<binary>",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "da155101-14ba-487d-a569-e1996691c158",
            "name": "state",
            "item": [
                {
                    "id": "b8e2beab-ab3a-4fc4-b064-df66c4d668ed",
                    "name": "Return all sections for the current state of the pool",
                    "request": {
                        "name": "Return all sections for the current state of the pool",
                        "description": {
                            "content": "Retrieve a JSON object of all sections",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "all",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "61b1bd87-0d34-4117-81dd-1b3c945220f4",
                            "name": "JSON Object",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f15def57-d381-4cf1-95c6-93ef70edefe9",
                    "name": "Return a section of poolState.json",
                    "request": {
                        "name": "Return a section of poolState.json",
                        "description": {
                            "content": "Return a section of poolState.json",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                ":section",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "all",
                                    "key": "section"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "21091670-8d92-4163-bc99-068c34340fd7",
                            "name": "{Section} of poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d8c2abfa-ec14-4134-aae8-cf7599ada4e7",
                    "name": "Return an individual chem controller object",
                    "request": {
                        "name": "Return an individual chem controller object",
                        "description": {
                            "content": "Return an individual chem controller object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "chemController",
                                ":id",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "Id of the chem controller",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "<integer>",
                                    "key": "id"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "e9ac6035-6dec-4ed9-9af8-823a73f5111b",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chemController",
                                        "<integer>",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"intellichem\",\n  \"desc\": \"IntelliChem\"\n },\n \"lastComm\": 1597701544115,\n \"address\": 144,\n \"pHLevel\": 7.44,\n \"orpLevel\": 787,\n \"pHDosingTime\": 13,\n \"orpDosingTime\": 0,\n \"pHDosingVolume\": 28,\n \"orpDosingVolume\": 0,\n \"acidTankLevel\": 2,\n \"orpTankLevel\": 0,\n \"saturationIndex\": -0.18,\n \"tempUnits\": {\n  \"val\": 0,\n  \"name\": \"F\",\n  \"desc\": \"Fahrenheit\"\n },\n \"temp\": 79,\n \"alarms\": {\n  \"flow\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No alarm\"\n  },\n  \"ph\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No alarm\"\n  },\n  \"orp\": {\n   \"val\": 8,\n   \"name\": \"orphigh\",\n   \"desc\": \"Alarm - orp High\"\n  },\n  \"phTank\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No alarm\"\n  },\n  \"orpTank\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No alarm\"\n  },\n  \"probeFault\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No alarm\"\n  }\n },\n \"phDosingStatus\": {\n  \"val\": 2,\n  \"name\": \"mixing\",\n  \"desc\": \"Dosing - Mixing\"\n },\n \"orpDosingStatus\": {\n  \"val\": 2,\n  \"name\": \"mixing\",\n  \"desc\": \"Dosing - Mixing\"\n },\n \"firmware\": \"1.060\",\n \"warnings\": {\n  \"waterChemistry\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No Warning\"\n  },\n  \"phLockout\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No limits reached\"\n  },\n  \"phDailyLimitReached\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No limits reached\"\n  },\n  \"orpDailyLimitReached\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No limits reached\"\n  },\n  \"invalidSetup\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No limits reached\"\n  },\n  \"chlorinatorCommError\": {\n   \"val\": 0,\n   \"name\": \"ok\",\n   \"desc\": \"Ok - No limits reached\"\n  }\n },\n \"saltLevel\": 3450,\n \"equipmentType\": \"chemController\",\n \"alkalinity\": 90,\n \"body\": {\n  \"val\": 0,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"calciumHardness\": 250,\n \"cyanuricAcid\": 18,\n \"orpSetpoint\": 680,\n \"pHSetpoint\": 7.6\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "fbcd0fe5-9cab-447d-8103-2a71bf055e18",
                    "name": "Return an individual chem controller object",
                    "request": {
                        "name": "Return an individual chem controller object",
                        "description": {
                            "content": "Return an individual chem controller object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "chemControllers",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "648c78fa-09f2-4a9c-ba9e-f5d2ae9ac3fe",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chemControllers",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"type\": \"array\",\n \"items\": {\n  \"$ref\": \"#/components/examples/stateChemController\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "3a30fc8f-7c02-43a3-829b-caba5e883505",
                    "name": "chlorinator",
                    "item": [
                        {
                            "id": "26f56c94-1919-412f-8578-6e3f0365c18a",
                            "name": "Set attributes for a given chlorinator",
                            "request": {
                                "name": "Set attributes for a given chlorinator",
                                "description": {
                                    "content": "See /config/options/chlorinators for values that can be sent",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "4feeb47d-bd0f-4770-88d9-e7e5bb489ea0",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "8ca3e369-0ade-48c6-911b-152c2ec72b34",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "e77d04c7-69b9-4720-b48b-3aad9650ef14",
                            "name": "Return an individual chlorinator object",
                            "request": {
                                "name": "Return an individual chlorinator object",
                                "description": {
                                    "content": "Return an individual chlorinator object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "Id of the chlorinator",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "5da06038-525f-479e-8a44-5e2578efb9f4",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "81f0ae09-74a9-4532-9390-95715b1656fe",
                            "name": "Set attributes for a given chlorinator.  Duplicate of /state/chlorinator.",
                            "request": {
                                "name": "Set attributes for a given chlorinator.  Duplicate of /state/chlorinator.",
                                "description": {
                                    "content": "See /config/options/chlorinators for values that can be sent",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "setChlor"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "343a5a18-2c74-4112-9240-6040ca8d7a68",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "setChlor"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"Chlorinator State\": {\n  \"$ref\": \"#/components/examples/stateChlorinator\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "0c779f32-9ab1-4d90-adde-db7ef1a2213b",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "setChlor"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "df2794f7-2f99-482e-8ef8-e41ac742a63d",
                            "name": "Set super chlorinate true for a chlorinator.",
                            "request": {
                                "name": "Set super chlorinate true for a chlorinator.",
                                "description": {
                                    "content": "Set super chlorinate true for a chlorinator.  Will set superChlorHours to 24.  Attributes can be set via /state/setChlor.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "superChlorinate"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "b6b68eb0-6b5f-42bd-ad56-948c903739e4",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorinate"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "987376d4-2e75-4050-ae3b-dee3280caca2",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorinate"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "06cca7ea-f0e0-4df0-8b23-4110c342af27",
                            "name": "Set super chlorinate hours for a chlorinator.",
                            "request": {
                                "name": "Set super chlorinate hours for a chlorinator.",
                                "description": {
                                    "content": "Set super chlorinate hours for a chlorinator.  Will set superChlor to true.\nAttributes can be set via /state/setChlor.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "superChlorHours"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "647273ff-635d-4b59-848b-130a492230ff",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorHours"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "258c8169-f243-42be-8b30-732502c4add2",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorHours"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "8d8cb5c4-fcc6-4f3c-90be-44cfe1afe16f",
                            "name": "Set pool Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                            "request": {
                                "name": "Set pool Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                                "description": {
                                    "content": "Set poolSetpoint for a chlorinator",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "poolSetpoint"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "85250dd1-bc4e-4b25-a856-c85968b4ab31",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "poolSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "fd33286b-51d6-4356-9096-f2a41bbcc78b",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "poolSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a5d42747-4638-4f59-afe8-7ec2940b0237",
                            "name": "Set spa Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                            "request": {
                                "name": "Set spa Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                                "description": {
                                    "content": "Set spa Setpoint for a chlorinator",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "spaSetpoint"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "4bc0a505-092f-4721-b74a-d0b66b94e355",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "spaSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ef4f1393-e651-4d25-a89c-d1d8733bc366",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "spaSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "de0943e6-b9f0-4e96-9b2c-58c34be7cbf5",
                    "name": "circuit",
                    "item": [
                        {
                            "id": "a5693a4e-70b8-484e-a58e-b4d2960389c6",
                            "name": "Return an individual circuit object",
                            "request": {
                                "name": "Return an individual circuit object",
                                "description": {
                                    "content": "Return an individual circuit object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "Id of the circuit",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "dc863667-9e97-44c0-8a33-6acdde2b7f26",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "8f588f98-d134-4ff8-ad44-1740eedf138d",
                            "name": "Set options for a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a circuit in poolState.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "f6fae9e4-a387-4db7-b0f9-deed6d1645c7",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "011156df-cf73-404d-80d8-f9faf51118c5",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "579b05db-ff59-401a-a682-19354befada4",
                            "name": "Set options for a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a circuit in poolState.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the id and it will be toggled.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "toggleState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a8037149-428f-4d7b-ab87-7e22ad7d7ae6",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f48b8288-e61f-494a-8706-39710155a59f",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "c683e725-b794-4bbd-9ea3-057deb75e721",
                            "name": "Set options for a theme of a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a theme of a circuit in poolState.json",
                                "description": {
                                    "content": "To set theme of a circuit settings, send an object with the id and theme.  Themes are found in /config/options/lightGroups.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setTheme",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "cc1e4306-cbae-4aea-bc97-b2b9c7afcab0",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 193,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"circuit\",\n  \"desc\": \"Circuit\"\n },\n \"isOn\": true,\n \"equipmentType\": \"circuitGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaPUMP\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 200,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 2,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaCTRL\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 215,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 9,\n   \"circuit\": {\n    \"id\": 9,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa Low\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 75,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 10,\n   \"circuit\": {\n    \"id\": 10,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa High\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 73,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "acab42a0-b421-4726-81b1-885502d516dd",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6b2bd7a7-7291-44b8-8feb-adc83653cfa9",
                            "name": "Set options for the dimmer levels of a circuit in poolState.json",
                            "request": {
                                "name": "Set options for the dimmer levels of a circuit in poolState.json",
                                "description": {
                                    "content": "To set dimmer level of a circuit settings, send an object with the id and level.  \n\n*EXPERIMENTAL* - Should work on IntelliCenter; needs testing on *Touch.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setDimmerLevel",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "75114b34-c2e8-453e-9b11-4c7067248d3c",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setDimmerLevel",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "75c6f41a-5683-4670-a03f-8d1515533cb4",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setDimmerLevel",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "86f2659f-21e8-41b5-a5ec-bb88cf096e39",
                    "name": "Return an individual pump object",
                    "request": {
                        "name": "Return an individual pump object",
                        "description": {
                            "content": "Return an individual pump object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "pump",
                                ":id",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "Id of the pump",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "<integer>",
                                    "key": "id"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "55add488-44fe-46a5-a690-a76b983fab97",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "pump",
                                        "<integer>",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"command\": 10,\n \"mode\": 0,\n \"driveState\": 0,\n \"watts\": 693,\n \"rpm\": 2250,\n \"flow\": 0,\n \"ppc\": 0,\n \"status\": {\n  \"name\": \"ok\",\n  \"desc\": \"Ok\",\n  \"val\": 1\n },\n \"time\": 929,\n \"type\": {\n  \"val\": 128,\n  \"name\": \"vs\",\n  \"desc\": \"Intelliflo VS\",\n  \"maxPrimingTime\": 6,\n  \"minSpeed\": 450,\n  \"maxSpeed\": 3450,\n  \"maxCircuits\": 8,\n  \"hasAddress\": true\n },\n \"name\": \"Pool\",\n \"equipmentType\": \"pump\",\n \"minSpeed\": 450,\n \"maxSpeed\": 3450,\n \"speedStepSize\": 10,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 0,\n    \"equipmentType\": \"circuit\",\n    \"name\": \"Not Used\",\n    \"speed\": 0\n   },\n   \"speed\": 1830,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 4,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Cleaner\",\n    \"type\": {\n     \"val\": 5,\n     \"name\": \"mastercleaner\",\n     \"desc\": \"Master Cleaner\"\n    },\n    \"nameId\": 22,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 2460,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 3,\n   \"circuit\": {\n    \"id\": 11,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spillway\",\n    \"type\": {\n     \"val\": 14,\n     \"name\": \"spillway\",\n     \"desc\": \"Spillway\"\n    },\n    \"nameId\": 79,\n    \"equipmentType\": \"feature\"\n   },\n   \"speed\": 2500,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 4,\n   \"circuit\": {\n    \"id\": 6,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Pool\",\n    \"type\": {\n     \"val\": 2,\n     \"name\": \"pool\",\n     \"desc\": \"Pool\"\n    },\n    \"nameId\": 61,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 1800,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 5,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 72,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 1750,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 6,\n   \"circuit\": {\n    \"id\": 128,\n    \"isOn\": true,\n    \"type\": {\n     \"val\": 128,\n     \"name\": \"solar\",\n     \"desc\": \"Solar\",\n     \"assignableToPumpCircuit\": true\n    },\n    \"name\": \"Solar\",\n    \"equipmentType\": \"virtualCircuit\"\n   },\n   \"speed\": 2250,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 7,\n   \"circuit\": {\n    \"id\": 131,\n    \"isOn\": false,\n    \"type\": {\n     \"val\": 131,\n     \"name\": \"spaHeater\",\n     \"desc\": \"Spa Heater\",\n     \"assignableToPumpCircuit\": true\n    },\n    \"name\": \"Spa Heater\",\n    \"equipmentType\": \"virtualCircuit\"\n   },\n   \"speed\": 2650,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 8,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Jets\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 46,\n    \"equipmentType\": \"feature\"\n   },\n   \"speed\": 3050,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a5d888ee-9c99-4434-9b95-81d12858c071",
                    "name": "feature",
                    "item": [
                        {
                            "id": "28d49cec-cfc1-4642-b212-ebadd7e7dade",
                            "name": "Set options for a feature in poolState.json",
                            "request": {
                                "name": "Set options for a feature in poolState.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "feature",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "e40322e8-e39e-4d8f-b815-3fee66291bfb",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 11,\n \"showInFeatures\": true,\n \"isOn\": false,\n \"name\": \"Spillway\",\n \"type\": {\n  \"val\": 14,\n  \"name\": \"spillway\",\n  \"desc\": \"Spillway\"\n },\n \"nameId\": 79,\n \"equipmentType\": \"feature\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "433ef38c-f559-4403-8cf0-62908a378de8",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "b6b2d997-1a05-43b6-b168-aeed4f821c12",
                            "name": "Set options for a feature in poolState.json",
                            "request": {
                                "name": "Set options for a feature in poolState.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the id and it will be toggled.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "feature",
                                        "toggleState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "287b6f2a-305c-47a2-9a38-19dd378448be",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "7094c819-f152-4967-a895-c9f8bdf645bc",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "8fccb780-7bbc-4bdb-92fa-afd12ba86591",
                    "name": "Set options for a circuitgroup in poolState.json",
                    "request": {
                        "name": "Set options for a circuitgroup in poolState.json",
                        "description": {
                            "content": "To set circuitGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "circuitGroup",
                                "setState",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "e3e819bb-b2dc-427f-bb5c-3c972826bdee",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuitGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 193,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"circuit\",\n  \"desc\": \"Circuit\"\n },\n \"isOn\": true,\n \"equipmentType\": \"circuitGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaPUMP\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 200,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 2,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaCTRL\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 215,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 9,\n   \"circuit\": {\n    \"id\": 9,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa Low\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 75,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 10,\n   \"circuit\": {\n    \"id\": 10,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa High\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 73,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "642e6344-a008-48b4-9361-21561c4dd276",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuitGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "7cd127a6-a0e9-4d59-a9e7-a9ffb2907748",
                    "name": "light Group",
                    "item": [
                        {
                            "id": "65f1c48f-1888-4596-9147-0982f37d0846",
                            "name": "Set options for a lightGroup in poolState.json",
                            "request": {
                                "name": "Set options for a lightGroup in poolState.json",
                                "description": {
                                    "content": "To set lightGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "lightGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "08a0f757-0b29-4674-9b0c-ecbcb6f49d4a",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"action\": {\n  \"val\": 0,\n  \"name\": \"ready\",\n  \"desc\": \"Ready\"\n },\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": {\n  \"val\": 3,\n  \"name\": \"intellibrite\",\n  \"desc\": \"IntelliBrite\"\n },\n \"equipmentType\": \"lightGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 15,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 74,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Entry Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 28,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  }\n ],\n \"lightingTheme\": {\n  \"val\": 196,\n  \"name\": \"white\",\n  \"desc\": \"White\",\n  \"type\": \"intellibrite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "5281ce84-bad3-4e9a-82cf-3fbf463911a4",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "359c8912-f514-4029-9cc4-d9500692cebb",
                            "name": "Set options for a lightGroup in poolState.json",
                            "request": {
                                "name": "Set options for a lightGroup in poolState.json",
                                "description": {
                                    "content": "To set lightGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "lightGroup",
                                        "setTheme",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "9451e2a6-bbcd-43d1-9ec6-aeec98d85664",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"action\": {\n  \"val\": 0,\n  \"name\": \"ready\",\n  \"desc\": \"Ready\"\n },\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": {\n  \"val\": 3,\n  \"name\": \"intellibrite\",\n  \"desc\": \"IntelliBrite\"\n },\n \"equipmentType\": \"lightGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 15,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 74,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Entry Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 28,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  }\n ],\n \"lightingTheme\": {\n  \"val\": 196,\n  \"name\": \"white\",\n  \"desc\": \"White\",\n  \"type\": \"intellibrite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "04ea3410-52c2-4d80-b96b-283845cb4d5e",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7db67813-66f9-41f8-9e3e-b3907362ede2",
                            "name": "{id}",
                            "item": [
                                {
                                    "id": "8568c476-b84a-46d4-b856-c724b6de85c4",
                                    "name": "Set lightGroup at specified Id to colorSync mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to colorSync mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to colorSync mode.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSync",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "b9f3bc4f-86f0-4ae0-b7f0-8da5e9eea9f1",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.  ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSync",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "307631e8-2e26-486b-9345-551efe982d09",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSync",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "e10c6709-9532-4cef-b9dd-4cf01bf83400",
                                    "name": "Set lightGroup at specified Id to color mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to color mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to color mode.  Obtain valid colors from /config/options/lightGroups",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSet",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "888c5f9c-7e8f-47f2-aa2b-ee9980739afa",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.      ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSet",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "5c36a497-66d7-4a08-84cf-b6f2b113a2ac",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSet",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "ddb37980-fe63-4ac8-b914-d1020172d4ff",
                                    "name": "Set lightGroup at specified Id to colorSwim mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to colorSwim mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to colorSwim mode. ",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSwim",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of https,http)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "02b73a44-6964-4ed9-9789-5e05eef35e84",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.      ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSwim",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "39a2a382-33f5-4dbd-b255-f29d11465aeb",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSwim",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "876fbbeb-166f-47fd-ab04-942c43c4c625",
                    "name": "Manually input temperatures.  This is only for virtual/standalone controllers.  Values will be overwritten by any OCP",
                    "request": {
                        "name": "Manually input temperatures.  This is only for virtual/standalone controllers.  Values will be overwritten by any OCP",
                        "description": {
                            "content": "To adjust the temperature, send an object with the current temp.  If there is an offset stored in sys.general.options it will be applied to the input temperature.  (`air` or `solar` can bu used in place of airSensor1/solarSensor1.)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "temps",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "5bd4eafb-7bea-417d-9dcb-bdc6447e9e88",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "temps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"units\": {\n  \"val\": 0,\n  \"name\": \"F\",\n  \"desc\": \"Fahrenheit\"\n },\n \"waterSensor1\": 80,\n \"bodies\": [\n  {\n   \"id\": 1,\n   \"heatMode\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"setPoint\": 92,\n   \"temp\": 80,\n   \"isOn\": true,\n   \"name\": \"Pool\",\n   \"circuit\": 6,\n   \"heatStatus\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"heaterOptions\": {\n    \"total\": 2,\n    \"gas\": 1,\n    \"solar\": 1,\n    \"heatpump\": 0,\n    \"ultratemp\": 0,\n    \"hybrid\": 0\n   }\n  },\n  {\n   \"id\": 2,\n   \"isOn\": false,\n   \"heatMode\": {\n    \"val\": 1,\n    \"name\": \"heater\",\n    \"desc\": \"Heater\"\n   },\n   \"name\": \"Spa\",\n   \"circuit\": 1,\n   \"heatStatus\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"heaterOptions\": {\n    \"total\": 2,\n    \"gas\": 1,\n    \"solar\": 1,\n    \"heatpump\": 0,\n    \"ultratemp\": 0,\n    \"hybrid\": 0\n   },\n   \"setPoint\": 99\n  }\n ],\n \"air\": 64,\n \"solar\": 99,\n \"equipmentType\": \"temps\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "7176f222-d33e-4751-8ee3-48e6b9371958",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "temps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "9aa0e360-5ec6-4cbd-bc53-660c010416db",
                    "name": "body",
                    "item": [
                        {
                            "id": "b9e9678c-ecbb-4fa3-bf54-415f5fe231d2",
                            "name": "Set heat mode for a body in poolState.json",
                            "request": {
                                "name": "Set heat mode for a body in poolState.json",
                                "description": {
                                    "content": "To set heat mode of a body, send an object with the id and mode.  `mode` can be a numeric value or string value as referenced in /config/options/heaters.  ",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "body",
                                        "heatMode",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "c2bbc799-c8fc-4157-973f-1eb2db3b081f",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "heatMode",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "c8c06bdb-7482-4040-af66-5b4aa11b8298",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "heatMode",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ad21d44a-905e-4bba-8815-d87d85763215",
                            "name": "Set temp for a body in poolState.json",
                            "request": {
                                "name": "Set temp for a body in poolState.json",
                                "description": {
                                    "content": "To set temp of a body, send an object with the id and identifier for the body (name, id or circuit).  See schema example. ",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "body",
                                        "setPoint",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of https,http)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "efb178f0-ff64-44a4-aba5-6404f52c1a6c",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "setPoint",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"heatMode\": {\n  \"val\": 0,\n  \"name\": \"off\",\n  \"desc\": \"Off\"\n },\n \"name\": \"Pool\",\n \"circuit\": 6,\n \"heatStatus\": {\n  \"val\": 0,\n  \"name\": \"off\",\n  \"desc\": \"Off\"\n },\n \"isOn\": false,\n \"setPoint\": 89\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e1addf99-e1c0-49ed-9751-9e825d584abb",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "setPoint",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "05e38f82-e539-4cab-ad19-9729123b0dfe",
                    "name": "Cancel all delays on OCP",
                    "request": {
                        "name": "Cancel all delays on OCP",
                        "description": {
                            "content": "Cancel all delays on OCP",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "cancelDelay",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of https,http)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "473df4fb-9074-49e4-b0a8-3a0ec313ffd3",
                            "name": "OK",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "cancelDelay",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "40fcc8ff-6fa2-4ea5-946e-4ae9948e6d1b",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "cancelDelay",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        }
    ],
    "event": [],
    "variable": [
        {
            "id": "protocol",
            "description": {
                "content": "undefined (is one of https,http)",
                "type": "text/plain"
            },
            "type": "any",
            "value": "https"
        },
        {
            "id": "server",
            "description": {
                "content": "undefined",
                "type": "text/plain"
            },
            "type": "any",
            "value": "server"
        },
        {
            "id": "port",
            "description": {
                "content": "undefined",
                "type": "text/plain"
            },
            "type": "any",
            "value": "4201"
        },
        {
            "id": "baseUrl",
            "type": "string",
            "value": "{{protocol}}://{{server}}:{{port}}/"
        }
    ],
    "info": {
        "_postman_id": "4ef71b5a-2cb8-49b1-ae75-aa11dc2e22b5",
        "name": "nodejs-poolController API",
        "version": {
            "raw": "6.0.0",
            "major": 6,
            "minor": 0,
            "patch": 0,
            "prerelease": [],
            "build": [],
            "string": "6.0.0"
        },
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": {
            "content": "API's to access, manage and control your pool equipment.  You can find the main project at [nodejs-poolController](https://github.com/tagyoureit/nodejs-poolController/).\nThe data structures are defined in the main app's [wiki](https://github.com/tagyoureit/nodejs-poolController/wiki/Version-6-Data-Structures).\n\nThese api's are `live` in the sense that you can execute any of them against your local nodejs-poolController app(*).  \n1. Select one of the default servers or enter your server:port into the Server Variables area\n1. Open up any endpoint\n1. Click on \"Try it out\"\n1. If there are Parameters or JSON variables that need to be included in the request, fill them out\n1. Click execute and you can see the live results from your server \"To set body settings, send an object with the values you want to change from /config/options/bodies.\"\n\n* Note: If you are trying to access your njsPC app on any machine other than `localhost` you will need to connect to it over `https` due to [CORS](https://swagger.io/docs/open-source-tools/swagger-ui/usage/cors/) restrictions.\n** Note2: There is currently a bug with the `https` service in njsPC.  It will be fixed shortly.\n\nThere are options for running the API documentation locally on your computer:\n1. You can also download a [Postman collection](https://github.com/tagyoureit/nodejs-poolcontroller-api/blob/master/nodejs-poolcontroller-api.json) you can download and import into your local app.\n1. Download the [YAML](https://github.com/tagyoureit/nodejs-poolcontroller-api/blob/master/nodejs-poolcontroller-api.yaml) and paste it in http://editor.swagger.io\n1. Download a code editor like VSCode and use a [Swagger Preview Extension](https://marketplace.visualstudio.com/items?itemName=Arjun.swagger-viewer)\n\nWant to help?\n1. Clone the [nodejs-poolcontroller-api repository](https://github.com/tagyoureit/nodejs-poolcontroller-api)\n1. Create a new branch\n1. Make changes\n1. Open a Pull Request\n(Or, just open up an issue and it will get fixed)",
            "type": "text/plain"
        }
    }
}