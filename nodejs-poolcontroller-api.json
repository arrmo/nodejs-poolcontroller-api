{
    "item": [
        {
            "id": "d452d48b-086a-4c64-bc81-6adb391daaa1",
            "name": "config",
            "item": [
                {
                    "id": "2b2e90f2-9d76-40fe-b274-65e8b5f743f2",
                    "name": "Shortcut for /config/all",
                    "request": {
                        "name": "Shortcut for /config/all",
                        "description": {
                            "content": "Shortcut for /config/all",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "0293af6b-e7ce-4bae-8cf7-bd7dc455c83b",
                            "name": "poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f960b9b0-b365-40f0-9f2e-c03c6c7832e0",
                    "name": "circuits",
                    "item": [
                        {
                            "id": "8c55dbaa-c1c3-47db-9efb-bf453ab252b5",
                            "name": "Get an array of all circuit objects with config data",
                            "request": {
                                "name": "Get an array of all circuit objects with config data",
                                "description": {
                                    "content": "Array of circuit config objects",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "bd99df10-0fbc-4810-b0e7-0eee3bfb7016",
                                    "name": "Circuit config array",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"isOn\": \"<boolean>\",\n  \"nameId\": \"<string>\",\n  \"isActive\": \"<boolean>\",\n  \"freeze\": \"<boolean>\",\n  \"showInFeatures\": \"<boolean>\",\n  \"eggTimer\": \"<integer>\",\n  \"equipmentType\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"isOn\": \"<boolean>\",\n  \"nameId\": \"<string>\",\n  \"isActive\": \"<boolean>\",\n  \"freeze\": \"<boolean>\",\n  \"showInFeatures\": \"<boolean>\",\n  \"eggTimer\": \"<integer>\",\n  \"equipmentType\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7681741d-9b63-46f6-adaf-6c826b9116da",
                            "name": "Get a list of valid controller names for circuits (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object in\n/config/options/circuits or /config/options/features instead.",
                            "request": {
                                "name": "Get a list of valid controller names for circuits (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object in\n/config/options/circuits or /config/options/features instead.",
                                "description": {
                                    "content": "Get a list of valid controller names for circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        "names",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "2b637987-73a9-49c2-92ac-425906d36330",
                                    "name": "Array of controller function objects valid for names",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                "names",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "e503be71-e55b-4506-98bf-4c716081913c",
                            "name": "Get a list of valid controller functions for circuits\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                            "request": {
                                "name": "Get a list of valid controller functions for circuits\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                                "description": {
                                    "content": "Get a list of valid controller functions for circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        "functions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "3f1c86ab-4f04-486e-bf76-241896b73be5",
                                    "name": "Array of controller function objects valid for circuits",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                "functions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "52c2cedb-96a3-4868-b640-0829fbdba42f",
                    "name": "body",
                    "item": [
                        {
                            "id": "22cfa6dc-ec89-43f5-b4f6-44ff684523ed",
                            "name": "Set options related to the \"Body\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Body\" section in poolConfig.json",
                                "description": {
                                    "content": "To set body settings, send an object with the values you want to change from /config/options/bodies.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "body",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "9c9782aa-a400-466a-85dc-2e968e5a3622",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 2,\n \"name\": \"Spa\",\n \"type\": 0,\n \"isActive\": true,\n \"heatMode\": 3,\n \"circuit\": 1,\n \"setPoint\": 95\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "92e32772-2c10-4310-8764-e9152308958e",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "e01b3a2f-aa90-4bba-ac63-b651cf570cfe",
                            "name": "Get heat modes for the body specified by the id",
                            "request": {
                                "name": "Get heat modes for the body specified by the id",
                                "description": {
                                    "content": "Get heat modes for the body specified by the id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "body",
                                        ":id",
                                        "heatModes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "id of the body",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "6623c9eb-4d80-422f-83f8-aa04adc4ee95",
                                    "name": "Array of heat mode objects",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                "<integer>",
                                                "heatModes",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "17bcdd08-7232-4d0e-a9b3-c0a60c7254d4",
                    "name": "circuit",
                    "item": [
                        {
                            "id": "cb378cb6-930b-46b4-b468-b5fe7f6441da",
                            "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the values you want to change from /config/options/bodies.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "12627365-1627-4911-8371-4fdce9d61c2b",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": 1,\n \"isActive\": true,\n \"freeze\": false,\n \"showInFeatures\": true,\n \"eggTimer\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "7ba9a15e-919e-45ce-b8f0-5e768bb7fede",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "414f2aa7-8a21-4d61-9927-07680b7b8050",
                            "name": "Delete a circuit at the specified id",
                            "request": {
                                "name": "Delete a circuit at the specified id",
                                "description": {
                                    "content": "Delete a circuit at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "5c3ac3e7-0190-427b-9d27-46f5f09ce279",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "9780275c-0b2c-4c41-b18c-a89b53a145bf",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "53b0e046-696a-4c5e-8e02-ade4a7a5802f",
                            "name": "Get all available names (built-in and custom).  (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object \nin /config/options/circuits or /config/options/features instead.",
                            "request": {
                                "name": "Get all available names (built-in and custom).  (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object \nin /config/options/circuits or /config/options/features instead.",
                                "description": {
                                    "content": "Get all available names (built-in and custom).  (*Touch only)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        "names",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "25e1fcb7-a092-4bab-a169-ceb650c91b21",
                                    "name": "Array of name objects",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                "names",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": 1,\n  \"name\": \"aerator\",\n  \"desc\": \"Aerator\"\n },\n {\n  \"val\": 2,\n  \"name\": \"airblower\",\n  \"desc\": \"Air Blower\"\n },\n {\n  \"val\": 3,\n  \"name\": \"aux1\",\n  \"desc\": \"AUX 1\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "221eb346-f5ea-459c-b21b-5e1393564181",
                            "name": "Get an array of objects that can include circuits, features, groups, virtual circuits.",
                            "request": {
                                "name": "Get an array of objects that can include circuits, features, groups, virtual circuits.",
                                "description": {
                                    "content": "Get an array of objects that can include circuits, features, groups, virtual circuits.  Any parameter not\nincluded will be included (must specify false to exclude values)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        "references",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [
                                        {
                                            "description": "Include/exclude circuitss in the references object",
                                            "key": "circuits",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude features in the references object",
                                            "key": "features",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude groupss in the references object",
                                            "key": "groups",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude virtuals in the references object",
                                            "key": "virtual",
                                            "value": "<boolean>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "b53b3696-0768-4503-ac99-0f8e98d017cc",
                                    "name": "Array of circuits/features/groups/virtual circuit objects.",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                "references",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [
                                                {
                                                    "key": "circuits",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "features",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "groups",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "virtual",
                                                    "value": "<boolean>"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": 11,\n  \"name\": \"Spillway\",\n  \"type\": 14,\n  \"equipmentType\": \"feature\",\n  \"nameId\": 79\n },\n {\n  \"id\": 12,\n  \"name\": \"Waterfall 1\",\n  \"type\": 0,\n  \"equipmentType\": \"feature\",\n  \"nameId\": 87\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a9f7aff7-e785-4e0f-b605-993297fdea2c",
                    "name": "options",
                    "item": [
                        {
                            "id": "d78b7a04-e874-459a-9d70-ad90b20b8587",
                            "name": "Get all available options needed to configure general options",
                            "request": {
                                "name": "Get all available options needed to configure general options",
                                "description": {
                                    "content": "Retrieves: countries, tempUnits, timeZones, clockSources, clockModes, pool, sensors",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "edbdd5ed-194c-45b4-99cd-c4292ff35cf9",
                                    "name": "Object containing all available general options for the pool type",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "general",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"countries\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"tempUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"timeZones\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"loc\": \"<string>\",\n   \"abbrev\": \"<string>\",\n   \"utcOffset\": \"<integer>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"loc\": \"<string>\",\n   \"abbrev\": \"<string>\",\n   \"utcOffset\": \"<integer>\"\n  }\n ],\n \"clockSources\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"clockModes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"pool\": {\n  \"options\": {\n   \"adjustDST\": \"<boolean>\",\n   \"clockMode\": \"<integer>\",\n   \"clockSource\": \"<string>\",\n   \"pumpDelay\": \"<boolean>\",\n   \"manualHeat\": \"<boolean>\",\n   \"units\": \"<integer>\"\n  },\n  \"owner\": {\n   \"name\": \"<string>\",\n   \"phone\": \"<string>\",\n   \"email\": \"<string>\",\n   \"email2\": \"<string>\",\n   \"phone2\": \"<string>\"\n  },\n  \"location\": {\n   \"address\": \"<string>\",\n   \"city\": \"<string>\",\n   \"state\": \"<string>\",\n   \"zip\": \"<string>\",\n   \"country\": \"<string>\",\n   \"latitude\": \"<string>\",\n   \"longitude\": \"<string>\",\n   \"timeZone\": \"<integer>\"\n  },\n  \"alias\": \"<string>\"\n },\n \"sensors\": [\n  {\n   \"name\": \"<string>\",\n   \"temp\": \"<integer>\",\n   \"tempAdj\": \"<integer>\",\n   \"binding\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"temp\": \"<integer>\",\n   \"tempAdj\": \"<integer>\",\n   \"binding\": \"<string>\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0a1b0b24-5205-43cb-8373-5291e45b9555",
                            "name": "Get all available options to set circuits",
                            "request": {
                                "name": "Get all available options to set circuits",
                                "description": {
                                    "content": "Returns: maxCircuits, invalidIds, equipmentIds, equipmentNames, functions, circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "circuits",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "cc0e9859-e8ff-4c62-a600-f85e3f76dfcd",
                                    "name": "Object containing all available general options for the circuits",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "circuits",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"invalidIds\": [\n  \"<integer>\",\n  \"<integer>\"\n ],\n \"equipmentIds\": {\n  \"start\": \"<integer>\",\n  \"stop\": \"<integer>\"\n },\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"functions\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"maxCircuits\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a0437da8-854f-4ee0-81a3-e688ebac4362",
                            "name": "Get all options needed to set circuit groups",
                            "request": {
                                "name": "Get all options needed to set circuit groups",
                                "description": {
                                    "content": "Get all options needed to set circuit groups",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "circuitGroups",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "c00be075-6786-4664-b730-0925d263e6ab",
                                    "name": "Object containing all available general options for the circuit groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "circuitGroups",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"circuitGroups\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    }\n   ]\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    }\n   ]\n  }\n ],\n \"maxCircuitGroups\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6e6d44ec-7286-4e1e-9749-429b096b6408",
                            "name": "Get all available options to set lightGroups",
                            "request": {
                                "name": "Get all available options to set lightGroups",
                                "description": {
                                    "content": "Returns: maxLightGroups, invalidIds, equipmentIds, equipmentNames, functions, features",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "lightGroups",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "e5841f9c-d09b-46b0-a623-8af7f2595c31",
                                    "name": "Object containing all available general options for the light groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "lightGroups",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"maxLightGroups\": 1,\n \"equipmentNames\": [\n  {\n   \"val\": 1,\n   \"name\": \"aerator\",\n   \"desc\": \"Aerator\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"airblower\",\n   \"desc\": \"Air Blower\"\n  },\n  {\n   \"val\": 3,\n   \"name\": \"aux1\",\n   \"desc\": \"AUX 1\"\n  },\n  {\n   \"val\": 4,\n   \"name\": \"aux2\",\n   \"desc\": \"AUX 2\"\n  }\n ],\n \"themes\": [\n  {\n   \"val\": 0,\n   \"name\": \"off\",\n   \"desc\": \"Off\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 1,\n   \"name\": \"on\",\n   \"desc\": \"On\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 128,\n   \"name\": \"colorsync\",\n   \"desc\": \"Color Sync\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 144,\n   \"name\": \"colorswim\",\n   \"desc\": \"Color Swim\",\n   \"type\": \"intellibrite\"\n  }\n ],\n \"colors\": [\n  {\n   \"val\": 0,\n   \"name\": \"white\",\n   \"desc\": \"White\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"lightgreen\",\n   \"desc\": \"Light Green\"\n  },\n  {\n   \"val\": 4,\n   \"name\": \"green\",\n   \"desc\": \"Green\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": 2,\n   \"name\": \"Pool LtDeep\",\n   \"type\": 16,\n   \"equipmentType\": \"circuit\",\n   \"nameId\": 205\n  },\n  {\n   \"id\": 7,\n   \"name\": \"Spa Light\",\n   \"type\": 16,\n   \"equipmentType\": \"circuit\",\n   \"nameId\": 74\n  }\n ],\n \"lightGroups\": [\n  {\n   \"id\": 192,\n   \"circuits\": [\n    {\n     \"id\": 1,\n     \"circuit\": 2,\n     \"position\": 2,\n     \"color\": 6,\n     \"swimDelay\": 0,\n     \"isActive\": true\n    },\n    {\n     \"id\": 2,\n     \"circuit\": 7,\n     \"position\": 2,\n     \"color\": 14,\n     \"swimDelay\": 2,\n     \"isActive\": true\n    },\n    {\n     \"id\": 3,\n     \"circuit\": 8,\n     \"position\": 3,\n     \"color\": 2,\n     \"swimDelay\": 4,\n     \"isActive\": true\n    }\n   ],\n   \"isActive\": true,\n   \"name\": \"Intellibrite\",\n   \"type\": 3,\n   \"lightingTheme\": 195\n  }\n ],\n \"functions\": [\n  {\n   \"val\": 0,\n   \"name\": \"generic\",\n   \"desc\": \"Generic\"\n  },\n  {\n   \"val\": 1,\n   \"name\": \"spa\",\n   \"desc\": \"Spa\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"pool\",\n   \"desc\": \"Pool\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "1e14d44e-0de8-4a7d-a180-c5c78a307ba1",
                            "name": "Get all available options to set features",
                            "request": {
                                "name": "Get all available options to set features",
                                "description": {
                                    "content": "Returns: maxCircuitGroups, equipmentNames, circuits, circuitGroups",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "features",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "1877fa46-21a7-483b-835c-d0262400d3f7",
                                    "name": "Object containing all available general options for the circuit groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "features",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"invalidIds\": [\n  \"<integer>\",\n  \"<integer>\"\n ],\n \"equipmentIds\": {\n  \"start\": \"<integer>\",\n  \"stop\": \"<integer>\"\n },\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"functions\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"features\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"nameId\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"macro\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"nameId\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"macro\": \"<boolean>\"\n  }\n ],\n \"maxFeatures\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ee2862c5-4431-4ef3-a2f3-b9e5408029d3",
                            "name": "Get all available options to set bodies",
                            "request": {
                                "name": "Get all available options to set bodies",
                                "description": {
                                    "content": "Returns: maxBodies, bodyTypes, bodies",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "bodies",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "34be3251-c46d-47fb-8c27-2e256b82aa06",
                                    "name": "Object containing all available general options for the bodies",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "bodies",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"bodyTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  }\n ],\n \"maxBodies\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "1ea88fb3-6e12-48fa-af79-50962ed56f4e",
                            "name": "Get all available options to set valves",
                            "request": {
                                "name": "Get all available options to set valves",
                                "description": {
                                    "content": "Returns: maxValves, valveTypes, circuits, valves",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "valves",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "c07cd9ff-f508-44f2-8ae4-6eaaee972953",
                                    "name": "Object containing all available general options for the valves",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "valves",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"valveTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"valves\": [\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"isIntake\": \"<boolean>\",\n   \"isReturn\": \"<boolean>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"isIntake\": \"<boolean>\",\n   \"isReturn\": \"<boolean>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"maxValves\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "83f74430-c3d5-4d7b-9c16-b8a02c671ae1",
                            "name": "Get all available options to set pumps",
                            "request": {
                                "name": "Get all available options to set pumps",
                                "description": {
                                    "content": "Returns: maxPumps, pumpUnits, pumpTypes, models, circuits, bodies, pumps",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "pumps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "899b2e22-0c34-4fc8-b0cf-4f375ffdcb93",
                                    "name": "Object containing all available general options for the pumps",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "pumps",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"pumpUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"pumpTypes\": {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\",\n  \"maxCircuits\": \"<integer>\",\n  \"hasAddress\": \"<boolean>\",\n  \"hasBody\": \"<boolean>\"\n },\n \"models\": {\n  \"ss\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"ds\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vs\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vf\": [\n   {\n    \"ss\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"ds\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vf\": [\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     },\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     }\n    ],\n    \"vsf\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vssvrs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ]\n   },\n   {\n    \"ss\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"ds\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vf\": [\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     },\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     }\n    ],\n    \"vsf\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vssvrs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ]\n   }\n  ],\n  \"vsf\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vssvrs\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ]\n },\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  }\n ],\n \"pumps\": [\n  {\n   \"id\": \"<integer>\",\n   \"model\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    }\n   ],\n   \"flowStepSize\": \"<integer>\",\n   \"minFlow\": \"<integer>\",\n   \"maxFlow\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"primingTime\": \"<integer>\",\n   \"speedStepSize\": \"<integer>\",\n   \"minSpeed\": \"<integer>\",\n   \"maxSpeed\": \"<integer>\",\n   \"primingSpeed\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"model\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    }\n   ],\n   \"flowStepSize\": \"<integer>\",\n   \"minFlow\": \"<integer>\",\n   \"maxFlow\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"primingTime\": \"<integer>\",\n   \"speedStepSize\": \"<integer>\",\n   \"minSpeed\": \"<integer>\",\n   \"maxSpeed\": \"<integer>\",\n   \"primingSpeed\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"maxPumps\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "1be23c87-6747-4a91-b3ad-5089a850b1a4",
                            "name": "Get all available options to set schedules",
                            "request": {
                                "name": "Get all available options to set schedules",
                                "description": {
                                    "content": "Returns: maxSchedules, tempUnits, scheduleTimeTypes, schedules, scheduleTypes, scheduleDays,",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "schedules",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "9df5ad5e-c817-45d9-a6ca-0cc0e417cf36",
                                    "name": "Object containing all available general options for the schedules",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "schedules",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"tempUnits\": {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n \"scheduleTimeTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"scheduleTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\",\n   \"startDate\": \"<boolean>\",\n   \"startTime\": \"<boolean>\",\n   \"endTime\": \"<boolean>\",\n   \"days\": \"<string>\",\n   \"heatSource\": \"<boolean>\",\n   \"heatSetpoint\": \"<boolean>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\",\n   \"startDate\": \"<boolean>\",\n   \"startTime\": \"<boolean>\",\n   \"endTime\": \"<boolean>\",\n   \"days\": \"<string>\",\n   \"heatSource\": \"<boolean>\",\n   \"heatSetpoint\": \"<boolean>\"\n  }\n ],\n \"scheduleDays\": [\n  {\n   \"val\": \"<integer>\",\n   \"days\": {\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"down\": \"<integer>\"\n   }\n  },\n  {\n   \"val\": \"<integer>\",\n   \"days\": {\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"down\": \"<integer>\"\n   }\n  }\n ],\n \"heatSources\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"schedules\": [\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"startTime\": \"<integer>\",\n   \"endTime\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"scheduleDays\": \"<integer>\",\n   \"runOnce\": \"<integer>\",\n   \"scheduleType\": \"<integer>\",\n   \"startTimeType\": \"<integer>\",\n   \"endTimeType\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"startTime\": \"<integer>\",\n   \"endTime\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"scheduleDays\": \"<integer>\",\n   \"runOnce\": \"<integer>\",\n   \"scheduleType\": \"<integer>\",\n   \"startTimeType\": \"<integer>\",\n   \"endTimeType\": \"<integer>\"\n  }\n ],\n \"maxSchedules\": \"<integer>\",\n \"clockMode\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6a3543d4-6be1-4332-a2e4-dfb009967fad",
                            "name": "Get all available options to set heaters",
                            "request": {
                                "name": "Get all available options to set heaters",
                                "description": {
                                    "content": "Returns: maxHeaters, heaters, heaterTypes, heatModes",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "heaters",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "f783633e-28c1-4a2c-a223-96fd413f34c0",
                                    "name": "Object containing all available general options for the heaters",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "heaters",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"heatModes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"heaterTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"heaters\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"freeze\": \"<boolean>\",\n   \"coolingEnabled\": \"<boolean>\",\n   \"startTempDelta\": \"<integer>\",\n   \"stopTempDelta\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"freeze\": \"<boolean>\",\n   \"coolingEnabled\": \"<boolean>\",\n   \"startTempDelta\": \"<integer>\",\n   \"stopTempDelta\": \"<integer>\"\n  }\n ],\n \"maxHeaters\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "db162b9d-ebd7-494b-b871-3dfdf241a816",
                            "name": "Get a list of custom names (*Touch only)",
                            "request": {
                                "name": "Get a list of custom names (*Touch only)",
                                "description": {
                                    "content": "Returns: customNames, maxCustomNames. (*Touch only)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "abe81189-8af2-41ed-8a9d-79b3896b022c",
                                    "name": "Object with maxCustomNames and customNames",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "customNames",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"maxCustomNames\": 10,\n \"customNames\": [\n  {\n   \"id\": 0,\n   \"name\": \"WtrFall 1\"\n  },\n  {\n   \"id\": 1,\n   \"name\": \"WtrFall 1.5\"\n  },\n  {\n   \"id\": 2,\n   \"name\": \"WtrFall 2\"\n  },\n  {\n   \"id\": 3,\n   \"name\": \"WtrFall 3\"\n  },\n  {\n   \"id\": 4,\n   \"name\": \"Pool High\"\n  },\n  {\n   \"id\": 5,\n   \"name\": \"Pool LtDeep\"\n  },\n  {\n   \"id\": 8,\n   \"name\": \"USERNAME-09\"\n  },\n  {\n   \"id\": 9,\n   \"name\": \"USERNAME-aa\"\n  },\n  {\n   \"id\": 6,\n   \"name\": \"Pool LtShlw\"\n  },\n  {\n   \"id\": 7,\n   \"name\": \"USERNAME-08\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6bb08611-f846-4985-a97f-f05b8219dff1",
                            "name": "Get all available options to set chem controllers",
                            "request": {
                                "name": "Get all available options to set chem controllers",
                                "description": {
                                    "content": "Returns: types, bodies, tempUnits, status, status1, status2, waterflow, controllers, maxChemControllers",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "chemControllers",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "c0a9e64a-9a4c-43af-a972-0708e433ce84",
                                    "name": "Object containing all available general options for the chlorinators",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "chemControllers",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"types\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"tempUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"status\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"status1\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"status2\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"waterFlow\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"controllers\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"isVirtual\": \"<boolean>\",\n   \"name\": \"<integer>\",\n   \"phSetpoint\": \"<number>\",\n   \"orpSetpoint\": \"<boolean>\",\n   \"alkalinity\": \"<integer>\",\n   \"calciumHardness\": \"<integer>\",\n   \"cyanuricAcid\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"isVirtual\": \"<boolean>\",\n   \"name\": \"<integer>\",\n   \"phSetpoint\": \"<number>\",\n   \"orpSetpoint\": \"<boolean>\",\n   \"alkalinity\": \"<integer>\",\n   \"calciumHardness\": \"<integer>\",\n   \"cyanuricAcid\": \"<integer>\"\n  }\n ],\n \"maxChemControllers\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "bfd3d93c-9b07-4201-80d5-b836fa954b13",
                            "name": "Get all available options to set chlorinators",
                            "request": {
                                "name": "Get all available options to set chlorinators",
                                "description": {
                                    "content": "Returns: types, bodies, chlorinators, maxChlorinators",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "chlorinators",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "8b917ad9-4a2f-4977-aac1-60cb3546a9d7",
                                    "name": "Object containing all available general options for the chlorinators",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "chlorinators",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"types\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"chlorinators\": [\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"spaSetpoint\": \"<integer>\",\n   \"poolSetpoint\": \"<integer>\",\n   \"superChlor\": \"<boolean>\",\n   \"superChlorHours\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"spaSetpoint\": \"<integer>\",\n   \"poolSetpoint\": \"<integer>\",\n   \"superChlor\": \"<boolean>\",\n   \"superChlorHours\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\"\n  }\n ],\n \"maxChlorinators\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "178c054b-a51e-4802-962b-ea8207958f53",
                            "name": "Get days of week that are valid for the current OCP.  This can also be retrieved as `scheduleDays` in the /config/options/schedules object.",
                            "request": {
                                "name": "Get days of week that are valid for the current OCP.  This can also be retrieved as `scheduleDays` in the /config/options/schedules object.",
                                "description": {
                                    "content": "Get Days of week; info now contained in /config/options/schedules",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "6c37d56a-adc7-402d-ac48-417c60facc52",
                                    "name": "Array of days",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "dateTime",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "fb42019e-1987-4a6b-a5f5-068b28a1e27f",
                    "name": "Set options related to the \"Pool\" section in poolConfig.json.",
                    "request": {
                        "name": "Set options related to the \"Pool\" section in poolConfig.json.",
                        "description": {
                            "content": "To set general settings, send an object with the value you want to change from /config/options/general.",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "general",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "93c59264-72cb-4657-abec-dcf4e50d62d6",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"adjustDST\": \"<boolean>\",\n \"clockMode\": \"<integer>\",\n \"clockSource\": \"<string>\",\n \"pumpDelay\": \"<boolean>\",\n \"manualHeat\": \"<boolean>\",\n \"units\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "393f0b30-ba57-4eb1-986b-ff5c6031a2de",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "bbaabb77-018f-4712-acb0-c0fdf881b016",
                    "name": "Set options related to the \"Valve\" section in poolConfig.json",
                    "request": {
                        "name": "Set options related to the \"Valve\" section in poolConfig.json",
                        "description": {
                            "content": "To set valve settings, send an object with the values you want to change from /config/options/general.",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "valve",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "d4755120-d574-4b24-a452-4f616897bf5f",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "valve",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"circuit\": 128,\n \"isActive\": true,\n \"name\": \"Solar\",\n \"type\": 0,\n \"isReturn\": false,\n \"isIntake\": false\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "af6afaa8-5952-4e79-8b28-b877ab93acb4",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "valve",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a7294374-4a0f-4197-93af-b0e2b79b095c",
                    "name": "feature",
                    "item": [
                        {
                            "id": "7cc6dd22-aa65-4c05-9fe8-0c15d48ac27a",
                            "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/features.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "feature",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a041a1b2-f9f8-4c84-80fc-008a8d4551a9",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 12,\n \"name\": \"Waterfall 1\",\n \"nameId\": 87,\n \"type\": 0,\n \"isActive\": true,\n \"freeze\": false,\n \"showInFeatures\": true,\n \"eggTimer\": 420,\n \"macro\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "4fc533cf-63f3-4db4-b302-40cd2b4c9fff",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "86a8b9a9-be43-42ee-aec2-86212484818b",
                            "name": "Delete a feature at the specified id",
                            "request": {
                                "name": "Delete a feature at the specified id",
                                "description": {
                                    "content": "Delete a feature at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "feature",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "2c30b1c1-6792-45dc-a61d-16ae93de2f5c",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d19f14c0-d86e-4a82-9c06-dfee45565b5f",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "29c5e4a3-766c-4982-ae83-5ac3818e93d6",
                    "name": "circuit Group",
                    "item": [
                        {
                            "id": "41c05581-66ac-4d2d-97bc-3f0468f037c1",
                            "name": "Set options related to the \"Circuit Groups\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit Groups\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/circuitGroups.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "edae71e0-8da1-4180-b79f-640d7d984a45",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"Need Example\": null\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "f69e3a64-1e74-4b28-bb04-59eb5dbc5eaf",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "8d7cda44-c673-423c-94ee-df83d230f8dc",
                            "name": "Delete a circuit group at the specified id",
                            "request": {
                                "name": "Delete a circuit group at the specified id",
                                "description": {
                                    "content": "Delete a circuit group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "ad5be570-5ae1-4882-858e-adf1c1e9d322",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e26f86a9-3f96-422c-8979-f0146de8be44",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "c24c63e1-4875-42d5-806d-3555997db3c9",
                            "name": "Get a single circuit group at the specified id",
                            "request": {
                                "name": "Get a single circuit group at the specified id",
                                "description": {
                                    "content": "Get a single circuit group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "f95e0d1e-499f-43bb-88e8-35b6368d6721",
                                    "name": "Circuit group extended object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f719bdcb-4de6-4d02-811c-a7a2dc1cda4c",
                    "name": "light Group",
                    "item": [
                        {
                            "id": "079adb4a-d3ec-4bda-9f24-6127db093f4a",
                            "name": "Set options related to the \"lightGroups\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"lightGroups\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/lightGroups.\n\n*NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, \nsend an empty array `[]`.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "92b159a8-c7b2-48af-8587-597f9a63bbbe",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": 2,\n   \"position\": 2,\n   \"color\": 6,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": 7,\n   \"position\": 2,\n   \"color\": 14,\n   \"swimDelay\": 2,\n   \"isActive\": true\n  },\n  {\n   \"id\": 3,\n   \"circuit\": 8,\n   \"position\": 3,\n   \"color\": 2,\n   \"swimDelay\": 4,\n   \"isActive\": true\n  }\n ],\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": 3,\n \"lightingTheme\": 195\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "b32cccdc-7986-493d-a6e5-52a315c4098f",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "339c4aaf-2552-4af5-b030-abb5fbb8c30c",
                            "name": "Delete a light group at the specified id",
                            "request": {
                                "name": "Delete a light group at the specified id",
                                "description": {
                                    "content": "Delete a light group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "389bb155-2d79-4510-8f00-0b5e696565c8",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "af6c2b38-eee2-4b78-9f1b-20a999de7595",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "5e99090f-6ad2-4d5f-a114-efdaf2a76459",
                            "name": "{id}",
                            "item": [
                                {
                                    "id": "90884247-3954-481b-872d-53b08203c8ed",
                                    "name": "Get a single lightGroup at the specified id This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                    "request": {
                                        "name": "Get a single lightGroup at the specified id This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                        "description": {
                                            "content": "Get a single lightGroup at the specified id",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ":id",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of http,https)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "46a6efa0-1f70-4f0c-a0f5-1f1a5a1abe6c",
                                            "name": "Object with deep linking",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "config",
                                                        "lightGroup",
                                                        "<integer>",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "text/plain"
                                                }
                                            ],
                                            "body": "",
                                            "cookie": [],
                                            "_postman_previewlanguage": "text"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "ab077247-0c9c-45ed-9d4f-0be0db94b1ea",
                                    "name": "set lg attribs\nThis endpoint is going away.  Use /config/lightGroup instead.",
                                    "request": {
                                        "name": "set lg attribs\nThis endpoint is going away.  Use /config/lightGroup instead.",
                                        "description": {
                                            "content": "",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ":id",
                                                "setColors",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of http,https)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "3c7adfcf-3e41-462d-a118-92c46405ce18",
                                            "name": "Array of",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "config",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "setColors",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "text/plain"
                                                }
                                            ],
                                            "body": "",
                                            "cookie": [],
                                            "_postman_previewlanguage": "text"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "5780432c-b3f9-43c1-ab53-3ea87abfa316",
                            "name": "Get lightgroup colors, theme, action\nThis endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                            "request": {
                                "name": "Get lightgroup colors, theme, action\nThis endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                "description": {
                                    "content": "Get lightgroup colors, theme, action",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        "colors",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d7703d27-a775-4d6e-a6a7-f598a7b67a96",
                                    "name": "Object of items...",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                "colors",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a61d0c61-7975-43a3-a9c2-50110e80afe5",
                    "name": "pump",
                    "item": [
                        {
                            "id": "0756526a-dc43-4b2f-a41e-f03dcffb4342",
                            "name": "Set options related to the \"pumps\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"pumps\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/pumps.\n\n*NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, \nsend an empty array `[]`.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "2b5780e1-924e-40c5-acc4-93a0334d26df",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"type\": 128,\n \"address\": 96,\n \"isActive\": true,\n \"model\": 0,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": 255,\n   \"speed\": 1830,\n   \"units\": 0\n  },\n  {\n   \"id\": 2,\n   \"circuit\": 4,\n   \"speed\": 2460,\n   \"units\": 0\n  }\n ],\n \"primingSpeed\": 3000,\n \"primingTime\": 1,\n \"minSpeed\": 450,\n \"maxSpeed\": 3450,\n \"speedStepSize\": 10,\n \"name\": \"Pool\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "8d574125-7ecd-4c46-ae84-1f113645fa58",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "302dbaed-3397-431f-ae61-41b265cf8e83",
                            "name": "Delete a pump at the specified id",
                            "request": {
                                "name": "Delete a pump at the specified id",
                                "description": {
                                    "content": "Delete a pump at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "7a0a79c5-6880-43a8-9a34-3c3bb65bc753",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "94a2958d-fa48-4807-84af-4b113902c4f3",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "80c18a16-6432-439d-89ac-d4b746c9f30c",
                            "name": "Delete a pump at the specified Id",
                            "request": {
                                "name": "Delete a pump at the specified Id",
                                "description": {
                                    "content": "Delete a pump at the specified Id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ":pumpId",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "95ccdf3c-e6fd-417d-86c4-2c1085f0752c",
                                    "name": "Array of",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ":pumpId",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "pumpId"
                                                }
                                            ]
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "bd3c090f-2c32-4288-9fcc-cf9c3d03c0d2",
                    "name": "Set custom names on OCP (*Touch only)",
                    "request": {
                        "name": "Set custom names on OCP (*Touch only)",
                        "description": {
                            "content": "Set custom names on OCP (*Touch only)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "customNames",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                        }
                    },
                    "response": [
                        {
                            "id": "b9097528-e340-431f-aee6-43a15aa2d711",
                            "name": "Object with custom name",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "de67e425-bc04-4219-b5d3-fd22e6a5ea0e",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "eac1637d-245c-44ae-a1e3-d88d9b112c9d",
                    "name": "Set a single custom names on OCP (*Touch only)",
                    "request": {
                        "name": "Set a single custom names on OCP (*Touch only)",
                        "description": {
                            "content": "Set a single custom names on OCP (*Touch only)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "customName",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "04f20db6-d18c-4378-a2ad-8a9267617a8b",
                            "name": "Object with custom name",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customName",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "402e2c11-2001-4b38-85c1-bd2f503587d8",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customName",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "0de83216-2ae9-4ef9-ab87-8c3dac787d84",
                    "name": "schedule",
                    "item": [
                        {
                            "id": "7b8968a3-4a3d-4517-8f52-6f01962577f3",
                            "name": "Set options related to the \"schedules\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"schedules\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/schedules.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "9cf84fa5-1f8d-4c39-b12b-f79dc48f4e93",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"circuit\": 6,\n \"startTime\": 495,\n \"endTime\": 960,\n \"isActive\": true,\n \"scheduleDays\": 127,\n \"runOnce\": 128,\n \"scheduleType\": 128,\n \"startTimeType\": 0,\n \"endTimeType\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e8104a45-50f2-4a6a-b0d9-5884cf44838c",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "49bb6d86-e80f-48ea-8fba-61ef7bdd7e40",
                            "name": "Delete a schedule at the specified id",
                            "request": {
                                "name": "Delete a schedule at the specified id",
                                "description": {
                                    "content": "Delete a schedule at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "fb3084f6-2e07-42a5-a7d8-bbb916f6a1d8",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "119e85c9-8e7f-4723-9bfd-2550ddf16a05",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "bf8236b4-5e51-45ff-9171-725844518c26",
                            "name": "Get an individual schedule\nThis endpoint will be going away.  Please use /config/schedules or /config/options/schedules instead.",
                            "request": {
                                "name": "Get an individual schedule\nThis endpoint will be going away.  Please use /config/schedules or /config/options/schedules instead.",
                                "description": {
                                    "content": "Get an individual schedule",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "e87bc8fc-c5d3-4cbd-921a-6de76f5b5a12",
                                    "name": "Circuit object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\",\n \"isOn\": \"<boolean>\",\n \"nameId\": \"<string>\",\n \"isActive\": \"<boolean>\",\n \"freeze\": \"<boolean>\",\n \"showInFeatures\": \"<boolean>\",\n \"eggTimer\": \"<integer>\",\n \"equipmentType\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "8b77b100-d38a-4a6c-8553-9bc72bf3c9bb",
                    "name": "chlorinator",
                    "item": [
                        {
                            "id": "406669c3-e71a-4541-adf8-818ef3bf7b25",
                            "name": "Set options related to the \"chlorinators\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"chlorinators\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/chlorinators.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinator",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "6a96d284-65f0-4415-8351-484961feefb1",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"address\": 80,\n \"isActive\": true,\n \"body\": 32,\n \"spaSetpoint\": 15,\n \"poolSetpoint\": 2,\n \"superChlor\": true,\n \"superChlorHours\": 10,\n \"name\": \"Intellichlor--40\",\n \"type\": 2\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "3af8c0ea-a436-46e6-829a-910a7cc81dfc",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "08733402-9b64-455e-93af-665b4e9b1ff8",
                            "name": "Get a single chlorinator object",
                            "request": {
                                "name": "Get a single chlorinator object",
                                "description": {
                                    "content": "Get a single chlorinator object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinator",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "cd11e48f-bb9b-474e-9113-f235f32655d8",
                                    "name": "Chlorinator object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ":id",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"<integer>\",\n \"address\": \"<integer>\",\n \"isActive\": \"<boolean>\",\n \"body\": \"<integer>\",\n \"spaSetpoint\": \"<integer>\",\n \"poolSetpoint\": \"<integer>\",\n \"superChlor\": \"<boolean>\",\n \"superChlorHours\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "767fef33-f23f-4334-a180-204c440d6cce",
                    "name": "Get a list of valid controller functions for features\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                    "request": {
                        "name": "Get a list of valid controller functions for features\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                        "description": {
                            "content": "Get a list of valid controller functions for features",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "features",
                                "functions",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "c77aef64-a482-4fc3-bc2d-31f7278a3b03",
                            "name": "Array of controller function objects valid for features",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "features",
                                        "functions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "5f9d064a-48d9-40ca-9213-66ae627d873b",
                    "name": "Start a search for standalone chlorinators",
                    "request": {
                        "name": "Start a search for standalone chlorinators",
                        "description": {
                            "content": "Start a search for standalone chlorinators",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "chlorinators",
                                "search",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "88c3aa2a-9c8c-4eca-a393-7bf3f8ba3ab0",
                            "name": "Chlorinator object (isActive and isVirtual should be checked)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinators",
                                        "search",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": \"<integer>\",\n \"address\": \"<integer>\",\n \"isActive\": \"<boolean>\",\n \"body\": \"<integer>\",\n \"spaSetpoint\": \"<integer>\",\n \"poolSetpoint\": \"<integer>\",\n \"superChlor\": \"<boolean>\",\n \"superChlorHours\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "dff4eb31-12e9-434f-b55c-02dedc0aa3b5",
                    "name": "Set date and time options",
                    "request": {
                        "name": "Set date and time options",
                        "description": {
                            "content": "Set date and time options",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "dateTime",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "0f095d6b-3d97-4a0a-a108-b3e32459675a",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"min\": \"<integer>\",\n \"hour\": \"<integer>\",\n \"date\": \"<integer>\",\n \"month\": \"<integer>\",\n \"year\": \"<integer>\",\n \"dow\": \"<integer>\",\n \"dst\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e8d2bc5f-7a19-4644-a079-95d415c2a88e",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a5735b3b-b8ba-4fb4-93e2-d75c5f478adb",
                    "name": "Get a list of light group themes \nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                    "request": {
                        "name": "Get a list of light group themes \nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                        "description": {
                            "content": "Get a list of light group themes",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "lightGroups",
                                "themes",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "f34d3007-e964-4092-b700-a8f62f1192df",
                            "name": "Array of",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroups",
                                        "themes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "14ddc907-a69e-492b-bce6-1733a7ead578",
                    "name": "Get lightGroup themes - can be retrieved with /config/options/lightGroups; also it sends enumerated state info and not just identifiers.\nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                    "request": {
                        "name": "Get lightGroup themes - can be retrieved with /config/options/lightGroups; also it sends enumerated state info and not just identifiers.\nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                        "description": {
                            "content": "",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                "intellibrite",
                                "themes",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "30fec0a9-d879-4a19-8003-302ea0167bd1",
                            "name": "Array of",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "intellibrite",
                                        "themes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "24835fc7-ef98-4788-9400-4b84cbfdf15a",
                    "name": "chem Controller",
                    "item": [
                        {
                            "id": "7b18a47f-2570-4947-a568-6d75a802f572",
                            "name": "Set options related to the \"chemControllers\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"chemControllers\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/chemControllers.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chemController",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "15fea0a8-5b09-4fa0-867c-cfc8cde1c422",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"type\": 3,\n \"isActive\": true,\n \"isVirtual\": true,\n \"name\": \"Chem Controller\",\n \"pHSetpoint\": 7.4,\n \"orpSetpoint\": 660,\n \"alkalinity\": 40,\n \"calciumHardness\": 710,\n \"cyanuricAcid\": 10\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "7e04478d-d24c-4bbd-8fbc-b43d189a10a7",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "2ac39c07-a08d-4263-9502-4d6fcb2d0280",
                            "name": "NOT IMPLEMENTED YET.  Begin a search on the server for any chem controllers",
                            "request": {
                                "name": "NOT IMPLEMENTED YET.  Begin a search on the server for any chem controllers",
                                "description": {
                                    "content": "Begin a search on the server for any chem controllers",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chemController",
                                        "search",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d6bed65a-2d10-4df3-a719-cdbec137e8e1",
                                    "name": "Searching for chem controllers.",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                "search",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f8dedaba-2f3a-469f-88a4-bdf094b09377",
                    "name": "Return a section of poolConfig.json",
                    "request": {
                        "name": "Return a section of poolConfig.json",
                        "description": {
                            "content": "Return a section of poolConfig.json",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "config",
                                ":section",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "all",
                                    "key": "section"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "ac739d61-6061-45d6-9a33-551447edb448",
                            "name": "{Section} of poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "7a56a6d1-d92d-4c75-b54d-f174295c1bc6",
            "name": "app",
            "item": [
                {
                    "id": "ae9821a7-179a-4f87-bb0a-7aba78c65d3e",
                    "name": "Get all available options to set logger",
                    "request": {
                        "name": "Get all available options to set logger",
                        "description": {
                            "content": "Returns: app logger",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "app",
                                "options",
                                "logger",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "3c560ed6-c566-4bb5-bc93-2fcc1361cf93",
                            "name": "Object containing all available options for the logger",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "options",
                                        "logger",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"logger\": {\n  \"packet\": {\n   \"enabled\": true,\n   \"logToConsole\": false,\n   \"logToFile\": false,\n   \"filename\": \"packetLog\",\n   \"invalid\": true,\n   \"broadcast\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"pump\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"chlorinator\": {\n    \"enabled\": false,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"intellichem\": {\n    \"enabled\": true,\n    \"includeActions\": [],\n    \"exclueActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"intellivalve\": {\n    \"enabled\": true,\n    \"includeActions\": [],\n    \"exclueActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"unidentified\": {\n    \"enabled\": true,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"unknown\": {\n    \"enabled\": true,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   }\n  },\n  \"app\": {\n   \"enabled\": true,\n   \"level\": \"debug\",\n   \"captureForReplay\": false\n  }\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4954d117-5486-4898-87c5-0b194c1d444b",
                    "name": "logger",
                    "item": [
                        {
                            "id": "3b10d77d-49ef-4a11-b50b-9646f4ce1954",
                            "name": "Set options related to the \"log\" section in config.json",
                            "request": {
                                "name": "Set options related to the \"log\" section in config.json",
                                "description": {
                                    "content": "To set logger settings, send an object with the values you want to change from /config/options/logger.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "logger",
                                        "setOptions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a5aab18f-e6ba-4d3e-858a-9fa60b93d4a7",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "setOptions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"logger\": {\n  \"packet\": {\n   \"enabled\": true,\n   \"logToConsole\": false,\n   \"logToFile\": false,\n   \"filename\": \"packetLog\",\n   \"invalid\": true,\n   \"broadcast\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   }\n  },\n  \"app\": {\n   \"enabled\": true,\n   \"level\": \"debug\",\n   \"captureForReplay\": false\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "52772cfc-d657-474a-b0fd-a9dc5cb46358",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "setOptions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ff3ff742-f35d-44cf-8b07-c3578b88bae1",
                            "name": "Delete current logfile from disk",
                            "request": {
                                "name": "Delete current logfile from disk",
                                "description": {
                                    "content": "Delete current logfile from disk",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "logger",
                                        "clearMessages",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "41ef3aeb-15c9-4722-8a5e-39608d13643c",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "clearMessages",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "225f01ba-2dae-48aa-b239-4218ba053de9",
                    "name": "Get all broadcast packets identifiers",
                    "request": {
                        "name": "Get all broadcast packets identifiers",
                        "description": {
                            "content": "Get all broadcast packets identifiers",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "app",
                                "message",
                                "broadcast",
                                "actions",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "bd5554de-604a-4157-88fe-2482a42c6daf",
                            "name": "Array of broadcast actions",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "message",
                                        "broadcast",
                                        "actions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "da6e8f72-4e23-4609-a740-8bcff57a30fa",
                    "name": "config",
                    "item": [
                        {
                            "id": "3d032e54-37c4-4dd5-9b89-c9fafa7454bf",
                            "name": "Reload the app with files from disk",
                            "request": {
                                "name": "Reload the app with files from disk",
                                "description": {
                                    "content": "Reload the app with files from disk",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "reload",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "30a79722-0284-4628-b606-1dfaad81448d",
                                    "name": "Successful Reload",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "reload",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6813ce3c-6e18-4251-bf6c-00227119a991",
                            "name": "Starts a packet capture on the server WITHOUT a reset",
                            "request": {
                                "name": "Starts a packet capture on the server WITHOUT a reset",
                                "description": {
                                    "content": "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "startPacketCapture",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "b58bf968-f510-409a-a40a-17b6d7bc23ea",
                                    "name": "OK",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "startPacketCapture",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "fe06d828-8543-4914-af31-c798baa2a1eb",
                            "name": "Starts a packet capture on the server WITH a reset",
                            "request": {
                                "name": "Starts a packet capture on the server WITH a reset",
                                "description": {
                                    "content": "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "startPacketCaptureWithoutReset",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "abe395b6-bed3-4643-8c79-535a7b252ffe",
                                    "name": "OK",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "startPacketCaptureWithoutReset",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "3272e68e-ef4c-459c-bc3d-ea132441efa6",
                            "name": "Stop an in-progress packet capture and download a zipped file",
                            "request": {
                                "name": "Stop an in-progress packet capture and download a zipped file",
                                "description": {
                                    "content": "Stop an in-progress packet capture and download a zipped file",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "stopPacketCapture",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "9df4e6db-3a1a-4829-8885-a588fa2735c8",
                                    "name": "Zip file of packet capture",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "stopPacketCapture",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "zip"
                                        }
                                    ],
                                    "body": "<binary>",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "e89eef7f-39c0-4a10-804d-403ad565ff29",
            "name": "state",
            "item": [
                {
                    "id": "f07d35b2-8004-4911-a6b1-403063d5c65f",
                    "name": "Return all sections for the current state of the pool",
                    "request": {
                        "name": "Return all sections for the current state of the pool",
                        "description": {
                            "content": "Retrieve a JSON object of all sections",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "all",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "c22b102d-599d-4836-af07-09c4ccdce5f3",
                            "name": "JSON Object",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f3d0fff2-0a4a-417e-940d-e8dcd542411b",
                    "name": "Return a section of poolState.json",
                    "request": {
                        "name": "Return a section of poolState.json",
                        "description": {
                            "content": "Return a section of poolState.json",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                ":section",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "all",
                                    "key": "section"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "2a0ea39f-585c-4218-aa10-9e8e241b042f",
                            "name": "{Section} of poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "23f61052-f774-487c-b33e-c7d93a5cd099",
                    "name": "Return an individual chem controller object",
                    "request": {
                        "name": "Return an individual chem controller object",
                        "description": {
                            "content": "Return an individual chem controller object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "chemController",
                                ":id",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "Id of the chem controller",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "<integer>",
                                    "key": "id"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "50cf0a71-4b81-4b64-8265-d34d2caae103",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chemController",
                                        "<integer>",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"type\": {\n  \"val\": 3,\n  \"name\": \"homegrown\",\n  \"desc\": \"Homegrown\"\n },\n \"name\": \"Chem Controller\",\n \"status\": {\n  \"val\": 1,\n  \"name\": \"nocomms\",\n  \"desc\": \"No Communication\"\n },\n \"saltLevel\": 2900,\n \"status1\": {\n  \"val\": 101,\n  \"name\": \"monitoring\",\n  \"desc\": \"Monitoring\"\n },\n \"status2\": {\n  \"val\": 20,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"temp\": 86,\n \"tempUnits\": {\n  \"val\": 0,\n  \"name\": \"F\",\n  \"desc\": \"Fahrenheit\"\n },\n \"acidTankLevel\": 6,\n \"orpTankLevel\": 6,\n \"pHLevel\": 7.166,\n \"orpLevel\": 818.3,\n \"waterFlow\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"pHDosingTime\": 217,\n \"orpDosingTime\": 219,\n \"saturationIndex\": -0.034,\n \"equipmentType\": \"chemController\",\n \"alkalinity\": 40,\n \"body\": {\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"calciumHardness\": 710,\n \"cyanuricAcid\": 10,\n \"orpSetpoint\": 660,\n \"pHSetpoint\": 7.4\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "bc37e7f7-9065-4ef4-af4e-5759c55b9555",
                    "name": "Return an individual chem controller object",
                    "request": {
                        "name": "Return an individual chem controller object",
                        "description": {
                            "content": "Return an individual chem controller object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "chemControllers",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "2fab5373-2322-4029-a673-ed0a5edf96f9",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chemControllers",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"type\": \"array\",\n \"items\": {\n  \"$ref\": \"#/components/examples/stateChemController\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "cd6c09be-ea54-4b42-a271-471dd4aa4c1e",
                    "name": "chlorinator",
                    "item": [
                        {
                            "id": "b47abf4a-3fb0-4e05-a5a1-636e092d1c01",
                            "name": "Set attributes for a given chlorinator",
                            "request": {
                                "name": "Set attributes for a given chlorinator",
                                "description": {
                                    "content": "See /config/options/chlorinators for values that can be sent",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "6f51a14e-6856-498d-9055-409949fc67ca",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "38df097d-bf0b-4a77-aed3-1ff4e25a4b82",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "73722a33-1463-46e3-9df0-11daf871447c",
                            "name": "Return an individual chlorinator object",
                            "request": {
                                "name": "Return an individual chlorinator object",
                                "description": {
                                    "content": "Return an individual chlorinator object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "Id of the chlorinator",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "ff914779-55e5-4c42-9e27-7d70ed77554b",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "f2ffd712-406b-4ab8-bf2b-af23d3954e95",
                            "name": "Set attributes for a given chlorinator.  Duplicate of /state/chlorinator.",
                            "request": {
                                "name": "Set attributes for a given chlorinator.  Duplicate of /state/chlorinator.",
                                "description": {
                                    "content": "See /config/options/chlorinators for values that can be sent",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "setChlor"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "c1ae1c73-7ebe-463d-bdfb-0f9965d849ff",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "setChlor"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"Chlorinator State\": {\n  \"$ref\": \"#/components/examples/stateChlorinator\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "91f14a1d-915c-4085-a694-13307b5d839a",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "setChlor"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "4e11de86-6d45-447b-a46f-1b9cbba173e0",
                            "name": "Set super chlorinate true for a chlorinator.",
                            "request": {
                                "name": "Set super chlorinate true for a chlorinator.",
                                "description": {
                                    "content": "Set super chlorinate true for a chlorinator.  Will set superChlorHours to 24.  Attributes can be set via /state/setChlor.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "superChlorinate"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "9dd56c3f-07e0-411b-85c3-048e4aa937d3",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorinate"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d1f2fe61-742c-4e70-ae09-7b147d359e97",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorinate"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "79e411dc-2a98-4552-b6d2-b7feb61816c3",
                            "name": "Set super chlorinate hours for a chlorinator.",
                            "request": {
                                "name": "Set super chlorinate hours for a chlorinator.",
                                "description": {
                                    "content": "Set super chlorinate hours for a chlorinator.  Will set superChlor to true.\nAttributes can be set via /state/setChlor.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "superChlorHours"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "e5d5f695-5dde-40bf-a413-16429483d680",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorHours"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "5dd664b1-f8f1-4424-aedb-af35006ee8d6",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorHours"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "621a99eb-8689-4546-b995-10079818371e",
                            "name": "Set pool Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                            "request": {
                                "name": "Set pool Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                                "description": {
                                    "content": "Set poolSetpoint for a chlorinator",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "poolSetpoint"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a1a04917-73fc-4201-9841-0198d7c0b061",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "poolSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "4bbb7017-4db3-4b9d-bb17-7435e30eced9",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "poolSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "fe160cc5-a5af-498c-b6d1-b7fae88dd7b5",
                            "name": "Set spa Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                            "request": {
                                "name": "Set spa Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                                "description": {
                                    "content": "Set spa Setpoint for a chlorinator",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "spaSetpoint"
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "2b9c3938-2c34-49b9-b193-e0e5cb981640",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "spaSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "197fa19e-9fdb-4522-b4d4-30812a4ca76a",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "spaSetpoint"
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e2e2c718-0c59-41ad-ac36-2648294fb2d2",
                    "name": "circuit",
                    "item": [
                        {
                            "id": "f90130c0-b7d1-49cc-9a48-c41ba545bef5",
                            "name": "Return an individual circuit object",
                            "request": {
                                "name": "Return an individual circuit object",
                                "description": {
                                    "content": "Return an individual circuit object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        },
                                        {
                                            "description": {
                                                "content": "Id of the circuit",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "6ca0900e-b180-4e2e-853f-761ee93af69f",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a1d4c2a1-953e-47f2-b59c-537445de9a43",
                            "name": "Set options for a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a circuit in poolState.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "7cf4beb0-40c9-409b-84dd-ef8130510125",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "dacee3cb-aa33-4472-a591-a71da9425727",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0ac7e15d-79f0-417b-8c42-134c4bac397d",
                            "name": "Set options for a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a circuit in poolState.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the id and it will be toggled.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "toggleState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "ed75ea05-2c62-4bad-aa8f-e97adfdd5728",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "73d365d2-02c3-4539-a7c0-111c9d671fb1",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "5400933c-491a-458d-874d-2b1b38d2b9f6",
                            "name": "Set options for a theme of a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a theme of a circuit in poolState.json",
                                "description": {
                                    "content": "To set theme of a circuit settings, send an object with the id and theme.  Themes are found in /config/options/lightGroups.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setTheme",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a4d8eddd-c1a0-496e-a075-05fca5fe3bb3",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 193,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"circuit\",\n  \"desc\": \"Circuit\"\n },\n \"isOn\": true,\n \"equipmentType\": \"circuitGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaPUMP\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 200,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 2,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaCTRL\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 215,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 9,\n   \"circuit\": {\n    \"id\": 9,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa Low\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 75,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 10,\n   \"circuit\": {\n    \"id\": 10,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa High\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 73,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "46e69b55-b08c-404f-b078-3b86bbacb084",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "aee18896-dba8-479c-826a-b5f0fa1438e3",
                            "name": "Set options for the dimmer levels of a circuit in poolState.json",
                            "request": {
                                "name": "Set options for the dimmer levels of a circuit in poolState.json",
                                "description": {
                                    "content": "To set dimmer level of a circuit settings, send an object with the id and level.  \n\n*EXPERIMENTAL* - Should work on IntelliCenter; needs testing on *Touch.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setDimmerLevel",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a42346b0-fdf1-443f-bbe7-b1bf023ef29a",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setDimmerLevel",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "b61f1e92-e9bb-4c44-bb5b-33318c917664",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setDimmerLevel",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "215c2fcf-5a69-4519-a21d-85eaf32a5d3a",
                    "name": "Return an individual pump object",
                    "request": {
                        "name": "Return an individual pump object",
                        "description": {
                            "content": "Return an individual pump object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "pump",
                                ":id",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                },
                                {
                                    "description": {
                                        "content": "Id of the pump",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "<integer>",
                                    "key": "id"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "5ab01903-8264-4c65-811b-24b7602965ff",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "pump",
                                        "<integer>",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"command\": 10,\n \"mode\": 0,\n \"driveState\": 0,\n \"watts\": 693,\n \"rpm\": 2250,\n \"flow\": 0,\n \"ppc\": 0,\n \"status\": {\n  \"name\": \"ok\",\n  \"desc\": \"Ok\",\n  \"val\": 1\n },\n \"time\": 929,\n \"type\": {\n  \"val\": 128,\n  \"name\": \"vs\",\n  \"desc\": \"Intelliflo VS\",\n  \"maxPrimingTime\": 6,\n  \"minSpeed\": 450,\n  \"maxSpeed\": 3450,\n  \"maxCircuits\": 8,\n  \"hasAddress\": true\n },\n \"name\": \"Pool\",\n \"equipmentType\": \"pump\",\n \"minSpeed\": 450,\n \"maxSpeed\": 3450,\n \"speedStepSize\": 10,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 0,\n    \"equipmentType\": \"circuit\",\n    \"name\": \"Not Used\",\n    \"speed\": 0\n   },\n   \"speed\": 1830,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 4,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Cleaner\",\n    \"type\": {\n     \"val\": 5,\n     \"name\": \"mastercleaner\",\n     \"desc\": \"Master Cleaner\"\n    },\n    \"nameId\": 22,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 2460,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 3,\n   \"circuit\": {\n    \"id\": 11,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spillway\",\n    \"type\": {\n     \"val\": 14,\n     \"name\": \"spillway\",\n     \"desc\": \"Spillway\"\n    },\n    \"nameId\": 79,\n    \"equipmentType\": \"feature\"\n   },\n   \"speed\": 2500,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 4,\n   \"circuit\": {\n    \"id\": 6,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Pool\",\n    \"type\": {\n     \"val\": 2,\n     \"name\": \"pool\",\n     \"desc\": \"Pool\"\n    },\n    \"nameId\": 61,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 1800,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 5,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 72,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 1750,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 6,\n   \"circuit\": {\n    \"id\": 128,\n    \"isOn\": true,\n    \"type\": {\n     \"val\": 128,\n     \"name\": \"solar\",\n     \"desc\": \"Solar\",\n     \"assignableToPumpCircuit\": true\n    },\n    \"name\": \"Solar\",\n    \"equipmentType\": \"virtualCircuit\"\n   },\n   \"speed\": 2250,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 7,\n   \"circuit\": {\n    \"id\": 131,\n    \"isOn\": false,\n    \"type\": {\n     \"val\": 131,\n     \"name\": \"spaHeater\",\n     \"desc\": \"Spa Heater\",\n     \"assignableToPumpCircuit\": true\n    },\n    \"name\": \"Spa Heater\",\n    \"equipmentType\": \"virtualCircuit\"\n   },\n   \"speed\": 2650,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 8,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Jets\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 46,\n    \"equipmentType\": \"feature\"\n   },\n   \"speed\": 3050,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "5ee91c1b-1230-4a6f-b3c3-0f0d91829602",
                    "name": "feature",
                    "item": [
                        {
                            "id": "c6373681-a7bb-47a0-8115-15eca9ae1cbc",
                            "name": "Set options for a feature in poolState.json",
                            "request": {
                                "name": "Set options for a feature in poolState.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "feature",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "cd31dded-1e3b-4478-903d-768a09fe7e9f",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 11,\n \"showInFeatures\": true,\n \"isOn\": false,\n \"name\": \"Spillway\",\n \"type\": {\n  \"val\": 14,\n  \"name\": \"spillway\",\n  \"desc\": \"Spillway\"\n },\n \"nameId\": 79,\n \"equipmentType\": \"feature\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "74b58dd4-fdef-4f03-9e14-c6559d9022a0",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d2eb555f-d109-4923-aeff-c822430b006d",
                            "name": "Set options for a feature in poolState.json",
                            "request": {
                                "name": "Set options for a feature in poolState.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the id and it will be toggled.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "feature",
                                        "toggleState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "71626da1-0a75-4f2f-aac4-69569ae460b9",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e83f8f25-2255-4163-a8d8-cbe23cb5e135",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "53a21986-a767-4bc0-8cea-0dec26f57f3d",
                    "name": "Set options for a circuitgroup in poolState.json",
                    "request": {
                        "name": "Set options for a circuitgroup in poolState.json",
                        "description": {
                            "content": "To set circuitGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "circuitGroup",
                                "setState",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "c4770901-5131-43cd-8b7e-3080fbaf2c41",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuitGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 193,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"circuit\",\n  \"desc\": \"Circuit\"\n },\n \"isOn\": true,\n \"equipmentType\": \"circuitGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaPUMP\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 200,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 2,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaCTRL\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 215,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 9,\n   \"circuit\": {\n    \"id\": 9,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa Low\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 75,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 10,\n   \"circuit\": {\n    \"id\": 10,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa High\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 73,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "146eaa2b-7281-449b-afa1-756a9340b772",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuitGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "c442e07c-6f8d-4eb7-be6b-5f32504ffdd3",
                    "name": "light Group",
                    "item": [
                        {
                            "id": "7a003254-a1e6-4fe6-820a-e176d5d561d3",
                            "name": "Set options for a lightGroup in poolState.json",
                            "request": {
                                "name": "Set options for a lightGroup in poolState.json",
                                "description": {
                                    "content": "To set lightGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "lightGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "bd07b22b-4df0-4ab5-af62-5ec91e2ed5e9",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"action\": {\n  \"val\": 0,\n  \"name\": \"ready\",\n  \"desc\": \"Ready\"\n },\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": {\n  \"val\": 3,\n  \"name\": \"intellibrite\",\n  \"desc\": \"IntelliBrite\"\n },\n \"equipmentType\": \"lightGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 15,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 74,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Entry Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 28,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  }\n ],\n \"lightingTheme\": {\n  \"val\": 196,\n  \"name\": \"white\",\n  \"desc\": \"White\",\n  \"type\": \"intellibrite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "c48bb9e7-79c3-46a3-a90e-677819ce4481",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "bbb6a2ef-ac45-4a13-80c7-cb5074bf523d",
                            "name": "Set options for a lightGroup in poolState.json",
                            "request": {
                                "name": "Set options for a lightGroup in poolState.json",
                                "description": {
                                    "content": "To set lightGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "lightGroup",
                                        "setTheme",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "b4a80c3d-a86c-4f83-90ef-1940eab10f25",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"action\": {\n  \"val\": 0,\n  \"name\": \"ready\",\n  \"desc\": \"Ready\"\n },\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": {\n  \"val\": 3,\n  \"name\": \"intellibrite\",\n  \"desc\": \"IntelliBrite\"\n },\n \"equipmentType\": \"lightGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 15,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 74,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Entry Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 28,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  }\n ],\n \"lightingTheme\": {\n  \"val\": 196,\n  \"name\": \"white\",\n  \"desc\": \"White\",\n  \"type\": \"intellibrite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "737ffae7-e0f0-4c9b-8155-68b59d5178d5",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "1c6fb7ea-8bc4-43e3-94be-437979808d7b",
                            "name": "{id}",
                            "item": [
                                {
                                    "id": "65e39cf8-05c1-411b-b743-f358eaa87e18",
                                    "name": "Set lightGroup at specified Id to colorSync mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to colorSync mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to colorSync mode.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSync",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of http,https)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "2762d2fa-ab6c-48f4-98ac-3ad00ee3392d",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.  ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSync",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "6c80cdc0-ff7e-48d6-927d-0d876091087d",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSync",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "0c33d781-215d-4e44-8dcd-0c7242416132",
                                    "name": "Set lightGroup at specified Id to color mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to color mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to color mode.  Obtain valid colors from /config/options/lightGroups",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSet",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of http,https)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "cecebfe1-e2a5-4a1f-94aa-46c23df45923",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.      ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSet",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "cf1eb31e-b48b-4b20-9c34-33e2c23a8e7e",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSet",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "af7f5795-8981-4a98-bcb2-980de550d2e4",
                                    "name": "Set lightGroup at specified Id to colorSwim mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to colorSwim mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to colorSwim mode. ",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSwim",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of http,https)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server}}",
                                                    "key": "server"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{port}}",
                                                    "key": "port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "4f15eec4-2d7e-4bc2-91a4-c5ed163aaeb5",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.      ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSwim",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "5c2d4120-cd41-4ccd-af9e-bbacf5ed908e",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "{{port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSwim",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server}}"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "ed7c9d97-445f-450e-a551-8a8ca3213fdd",
                    "name": "Manually input temperatures.  This is only for virtual/standalone controllers.  Values will be overwritten by any OCP",
                    "request": {
                        "name": "Manually input temperatures.  This is only for virtual/standalone controllers.  Values will be overwritten by any OCP",
                        "description": {
                            "content": "To adjust the temperature, send an object with the current temp.  If there is an offset stored in sys.general.options it will be applied to the input temperature.  (`air` or `solar` can bu used in place of airSensor1/solarSensor1.)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "temps",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "74221556-b5f5-405d-a9a6-ed0e842c596b",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "temps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"units\": {\n  \"val\": 0,\n  \"name\": \"F\",\n  \"desc\": \"Fahrenheit\"\n },\n \"waterSensor1\": 80,\n \"bodies\": [\n  {\n   \"id\": 1,\n   \"heatMode\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"setPoint\": 92,\n   \"temp\": 80,\n   \"isOn\": true,\n   \"name\": \"Pool\",\n   \"circuit\": 6,\n   \"heatStatus\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"heaterOptions\": {\n    \"total\": 2,\n    \"gas\": 1,\n    \"solar\": 1,\n    \"heatpump\": 0,\n    \"ultratemp\": 0,\n    \"hybrid\": 0\n   }\n  },\n  {\n   \"id\": 2,\n   \"isOn\": false,\n   \"heatMode\": {\n    \"val\": 1,\n    \"name\": \"heater\",\n    \"desc\": \"Heater\"\n   },\n   \"name\": \"Spa\",\n   \"circuit\": 1,\n   \"heatStatus\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"heaterOptions\": {\n    \"total\": 2,\n    \"gas\": 1,\n    \"solar\": 1,\n    \"heatpump\": 0,\n    \"ultratemp\": 0,\n    \"hybrid\": 0\n   },\n   \"setPoint\": 99\n  }\n ],\n \"air\": 64,\n \"solar\": 99,\n \"equipmentType\": \"temps\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "23034fcb-2c8a-4419-af5e-fb8e3f6f987f",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "temps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "52b8d54e-ce9a-415c-b54e-360a7435c0ce",
                    "name": "body",
                    "item": [
                        {
                            "id": "624260c7-39f7-469b-86f9-621d1d41fad7",
                            "name": "Set heat mode for a body in poolState.json",
                            "request": {
                                "name": "Set heat mode for a body in poolState.json",
                                "description": {
                                    "content": "To set heat mode of a body, send an object with the id and mode.  `mode` can be a numeric value or string value as referenced in /config/options/heaters.  ",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "body",
                                        "heatMode",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a710f9e5-4ab8-48b4-87f8-379fe4e8435d",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "heatMode",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "0d908d2a-af4a-49e0-8ff9-77c5ae8c6329",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "heatMode",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7c8a4cde-322f-4a00-b594-265eb03a32e9",
                            "name": "Set temp for a body in poolState.json",
                            "request": {
                                "name": "Set temp for a body in poolState.json",
                                "description": {
                                    "content": "To set temp of a body, send an object with the id and identifier for the body (name, id or circuit).  See schema example. ",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "body",
                                        "setPoint",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server}}",
                                            "key": "server"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{port}}",
                                            "key": "port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "b26a36dd-19db-4c82-9733-f9752049ba31",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "setPoint",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"heatMode\": {\n  \"val\": 0,\n  \"name\": \"off\",\n  \"desc\": \"Off\"\n },\n \"name\": \"Pool\",\n \"circuit\": 6,\n \"heatStatus\": {\n  \"val\": 0,\n  \"name\": \"off\",\n  \"desc\": \"Off\"\n },\n \"isOn\": false,\n \"setPoint\": 89\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "05b08817-a019-4ae1-9547-89d265dca11a",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "{{port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "setPoint",
                                                ""
                                            ],
                                            "host": [
                                                "{{server}}"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1f126ee5-dd73-4f50-a8ef-47992833ed26",
                    "name": "Cancel all delays on OCP",
                    "request": {
                        "name": "Cancel all delays on OCP",
                        "description": {
                            "content": "Cancel all delays on OCP",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "{{port}}",
                            "path": [
                                "",
                                "state",
                                "cancelDelay",
                                ""
                            ],
                            "host": [
                                "{{server}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server}}",
                                    "key": "server"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{port}}",
                                    "key": "port"
                                }
                            ]
                        },
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "e8a1ae63-a7d4-4873-bad4-9efceaf457b0",
                            "name": "OK",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "cancelDelay",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "a9d53a94-025a-44ac-adca-91b6ed7ee44d",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "{{port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "cancelDelay",
                                        ""
                                    ],
                                    "host": [
                                        "{{server}}"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        }
    ],
    "event": [],
    "variable": [
        {
            "id": "protocol",
            "description": {
                "content": "undefined (is one of http,https)",
                "type": "text/plain"
            },
            "type": "any",
            "value": "http"
        },
        {
            "id": "server",
            "description": {
                "content": "undefined",
                "type": "text/plain"
            },
            "type": "any",
            "value": "server"
        },
        {
            "id": "port",
            "description": {
                "content": "undefined",
                "type": "text/plain"
            },
            "type": "any",
            "value": "4200"
        },
        {
            "id": "baseUrl",
            "type": "string",
            "value": "{{protocol}}://{{server}}:{{port}}/"
        }
    ],
    "info": {
        "_postman_id": "a7f62377-eb32-4e2a-bfeb-40f714f9c25f",
        "name": "nodejs-poolController API",
        "version": {
            "raw": "6.0.0",
            "major": 6,
            "minor": 0,
            "patch": 0,
            "prerelease": [],
            "build": [],
            "string": "6.0.0"
        },
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": {
            "content": "API's to access, manage and control your pool equipment.  You can find the main project at [nodejs-poolController](https://github.com/tagyoureit/nodejs-poolController/).\nThe data structures are defined in the main app's [wiki](https://github.com/tagyoureit/nodejs-poolController/wiki/Version-6-Data-Structures).\n\nThese api's are `live` in the sense that you can execute any of them against your local nodejs-poolController app(*).  \n1. Select one of the default servers or enter your server:port into the Server Variables area\n1. Open up any endpoint\n1. Click on \"Try it out\"\n1. If there are Parameters or JSON variables that need to be included in the request, fill them out\n1. Click execute and you can see the live results from your server \"To set body settings, send an object with the values you want to change from /config/options/bodies.\"\n\n* Note: If you are trying to access your njsPC app on any machine other than `localhost` you will need to connect to it over `https` due to [CORS](https://swagger.io/docs/open-source-tools/swagger-ui/usage/cors/) restrictions.\n** Note2: There is currently a bug with the `https` service in njsPC.  It will be fixed shortly.\n\nThere are options for running the API documentation locally on your computer:\n1. You can also download a [Postman collection](https://github.com/tagyoureit/nodejs-poolcontroller-api/blob/master/nodejs-poolcontroller-api.json) you can download and import into your local app.\n1. Download the [YAML](https://github.com/tagyoureit/nodejs-poolcontroller-api/blob/master/nodejs-poolcontroller-api.yaml) and paste it in http://editor.swagger.io\n1. Download a code editor like VSCode and use a [Swagger Preview Extension](https://marketplace.visualstudio.com/items?itemName=Arjun.swagger-viewer)",
            "type": "text/plain"
        }
    }
}