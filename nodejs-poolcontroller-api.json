{
    "item": [
        {
            "id": "6f2bf009-b8d7-4b10-a859-fd568182d701",
            "name": "config",
            "item": [
                {
                    "id": "9c981c61-c10d-4415-8a56-533d2d464c7d",
                    "name": "Shortcut for /config/all",
                    "request": {
                        "name": "Shortcut for /config/all",
                        "description": {
                            "content": "Shortcut for /config/all",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "config",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "b3402412-5b37-448a-b46e-cd502f8ebc1a",
                            "name": "poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "59dc98d0-665a-4b17-8b9f-1b9a8eadfa22",
                    "name": "circuits",
                    "item": [
                        {
                            "id": "1c5c0230-1186-40ff-a270-65e151623172",
                            "name": "Get an array of all circuit objects with config data",
                            "request": {
                                "name": "Get an array of all circuit objects with config data",
                                "description": {
                                    "content": "Array of circuit config objects",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "580b4cb2-d94f-4819-a762-08a09d04acf6",
                                    "name": "Circuit config array",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"isOn\": \"<boolean>\",\n  \"nameId\": \"<string>\",\n  \"isActive\": \"<boolean>\",\n  \"freeze\": \"<boolean>\",\n  \"showInFeatures\": \"<boolean>\",\n  \"eggTimer\": \"<integer>\",\n  \"equipmentType\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"type\": \"<integer>\",\n  \"isOn\": \"<boolean>\",\n  \"nameId\": \"<string>\",\n  \"isActive\": \"<boolean>\",\n  \"freeze\": \"<boolean>\",\n  \"showInFeatures\": \"<boolean>\",\n  \"eggTimer\": \"<integer>\",\n  \"equipmentType\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "3d60348e-278f-4de7-b17a-b0590398130f",
                            "name": "Get a list of valid controller names for circuits (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object in\n/config/options/circuits or /config/options/features instead.",
                            "request": {
                                "name": "Get a list of valid controller names for circuits (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object in\n/config/options/circuits or /config/options/features instead.",
                                "description": {
                                    "content": "Get a list of valid controller names for circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        "names",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "fa8a6418-983f-42c3-9a79-a240406ac36f",
                                    "name": "Array of controller function objects valid for names",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                "names",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d0acaf95-7307-48a5-8320-e232d2e592c5",
                            "name": "Get a list of valid controller functions for circuits\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                            "request": {
                                "name": "Get a list of valid controller functions for circuits\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                                "description": {
                                    "content": "Get a list of valid controller functions for circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuits",
                                        "functions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "ef3cc922-75a2-45d0-b1a0-533f36b0b0d5",
                                    "name": "Array of controller function objects valid for circuits",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuits",
                                                "functions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "b874abc4-9aff-4e2a-8c28-de5be0f66de1",
                    "name": "body",
                    "item": [
                        {
                            "id": "66f358f3-a6c0-4cc5-a3da-44ba24d1274b",
                            "name": "Set options related to the \"Body\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Body\" section in poolConfig.json",
                                "description": {
                                    "content": "To set body settings, send an object with the values you want to change from /config/options/bodies.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "body",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "5a80a213-ed18-4f12-9d3f-99e1b45b7465",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 2,\n \"name\": \"Spa\",\n \"type\": 0,\n \"isActive\": true,\n \"heatMode\": 3,\n \"circuit\": 1,\n \"setPoint\": 95\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "121bbcdf-e1f0-4fd1-bee9-0f61920044b9",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"capacity\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"heatMode\": \"<integer>\",\n    \"setPoint\": \"<integer>\",\n    \"circuit\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "542bcaf6-4850-4150-9fa6-4d36e96216d2",
                            "name": "Get heat modes for the body specified by the id",
                            "request": {
                                "name": "Get heat modes for the body specified by the id",
                                "description": {
                                    "content": "Get heat modes for the body specified by the id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "body",
                                        ":id",
                                        "heatModes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        },
                                        {
                                            "description": {
                                                "content": "id of the body",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "c23f189f-1aec-4260-9936-d0569382774c",
                                    "name": "Array of heat mode objects",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "body",
                                                "<integer>",
                                                "heatModes",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "170f7628-be08-415f-ab4b-8f5ae3433e84",
                    "name": "circuit",
                    "item": [
                        {
                            "id": "55d20525-a9d9-4cab-812d-6b93860c4bc3",
                            "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the values you want to change from /config/options/bodies.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "800982a9-f62e-44a5-b53e-f0ebcff0081e",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": 1,\n \"isActive\": true,\n \"freeze\": false,\n \"showInFeatures\": true,\n \"eggTimer\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "c1370c5c-468a-4d8c-8cc7-6f02b596c521",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isOn\": \"<boolean>\",\n    \"nameId\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"equipmentType\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "96e9ce30-948a-417f-9d9b-b59477f085eb",
                            "name": "Delete a circuit at the specified id",
                            "request": {
                                "name": "Delete a circuit at the specified id",
                                "description": {
                                    "content": "Delete a circuit at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "3517d057-b102-451a-8359-9164d173c7c7",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "745b7312-6f72-4f0c-9fb2-0721f3e85117",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "48cd6b5c-8dcc-4ced-a9f4-c4dd3a9f2261",
                            "name": "Get all available names (built-in and custom).  (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object \nin /config/options/circuits or /config/options/features instead.",
                            "request": {
                                "name": "Get all available names (built-in and custom).  (*Touch only)\nThis endpoint will be going away.  Please use the equipmentNames object \nin /config/options/circuits or /config/options/features instead.",
                                "description": {
                                    "content": "Get all available names (built-in and custom).  (*Touch only)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        "names",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "a9c6757d-45bf-4020-a7e5-9979b0ffeaa7",
                                    "name": "Array of name objects",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                "names",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"val\": 1,\n  \"name\": \"aerator\",\n  \"desc\": \"Aerator\"\n },\n {\n  \"val\": 2,\n  \"name\": \"airblower\",\n  \"desc\": \"Air Blower\"\n },\n {\n  \"val\": 3,\n  \"name\": \"aux1\",\n  \"desc\": \"AUX 1\"\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "6d28aaef-f660-4928-8ae3-4e793a0ff4df",
                            "name": "Get an array of objects that can include circuits, features, groups, virtual circuits.",
                            "request": {
                                "name": "Get an array of objects that can include circuits, features, groups, virtual circuits.",
                                "description": {
                                    "content": "Get an array of objects that can include circuits, features, groups, virtual circuits.  Any parameter not\nincluded will be included (must specify false to exclude values)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuit",
                                        "references",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [
                                        {
                                            "description": "Include/exclude circuitss in the references object",
                                            "key": "circuits",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude features in the references object",
                                            "key": "features",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude groupss in the references object",
                                            "key": "groups",
                                            "value": "<boolean>"
                                        },
                                        {
                                            "description": "Include/exclude virtuals in the references object",
                                            "key": "virtual",
                                            "value": "<boolean>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "66ddf216-3dad-4e72-8de3-5d53018681fa",
                                    "name": "Array of circuits/features/groups/virtual circuit objects.",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuit",
                                                "references",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [
                                                {
                                                    "key": "circuits",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "features",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "groups",
                                                    "value": "<boolean>"
                                                },
                                                {
                                                    "key": "virtual",
                                                    "value": "<boolean>"
                                                }
                                            ],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "[\n {\n  \"id\": 11,\n  \"name\": \"Spillway\",\n  \"type\": 14,\n  \"equipmentType\": \"feature\",\n  \"nameId\": 79\n },\n {\n  \"id\": 12,\n  \"name\": \"Waterfall 1\",\n  \"type\": 0,\n  \"equipmentType\": \"feature\",\n  \"nameId\": 87\n }\n]",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "fdc45128-c6cf-4824-8a6e-dc70f6b44a1a",
                    "name": "options",
                    "item": [
                        {
                            "id": "25c70d98-5f39-43e7-a2b8-01049eca34c3",
                            "name": "Get all available options needed to configure general options",
                            "request": {
                                "name": "Get all available options needed to configure general options",
                                "description": {
                                    "content": "Retrieves: countries, tempUnits, timeZones, clockSources, clockModes, pool, sensors",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "657cf041-bc9d-41ec-a3b6-15ff2fcdfece",
                                    "name": "Object containing all available general options for the pool type",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "general",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"countries\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"tempUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"timeZones\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"loc\": \"<string>\",\n   \"abbrev\": \"<string>\",\n   \"utcOffset\": \"<integer>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"loc\": \"<string>\",\n   \"abbrev\": \"<string>\",\n   \"utcOffset\": \"<integer>\"\n  }\n ],\n \"clockSources\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"clockModes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"pool\": {\n  \"options\": {\n   \"adjustDST\": \"<boolean>\",\n   \"clockMode\": \"<integer>\",\n   \"clockSource\": \"<string>\",\n   \"pumpDelay\": \"<boolean>\",\n   \"manualHeat\": \"<boolean>\",\n   \"units\": \"<integer>\"\n  },\n  \"owner\": {\n   \"name\": \"<string>\",\n   \"phone\": \"<string>\",\n   \"email\": \"<string>\",\n   \"email2\": \"<string>\",\n   \"phone2\": \"<string>\"\n  },\n  \"location\": {\n   \"address\": \"<string>\",\n   \"city\": \"<string>\",\n   \"state\": \"<string>\",\n   \"zip\": \"<string>\",\n   \"country\": \"<string>\",\n   \"latitude\": \"<string>\",\n   \"longitude\": \"<string>\",\n   \"timeZone\": \"<integer>\"\n  },\n  \"alias\": \"<string>\"\n },\n \"sensors\": [\n  {\n   \"name\": \"<string>\",\n   \"temp\": \"<integer>\",\n   \"tempAdj\": \"<integer>\",\n   \"binding\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"temp\": \"<integer>\",\n   \"tempAdj\": \"<integer>\",\n   \"binding\": \"<string>\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "63ddf7a3-0598-4ff3-95ee-ec548ae7dc63",
                            "name": "Get all available options to set circuits",
                            "request": {
                                "name": "Get all available options to set circuits",
                                "description": {
                                    "content": "Returns: maxCircuits, invalidIds, equipmentIds, equipmentNames, functions, circuits",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "circuits",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "dec4b635-f1d8-4c4e-a5a8-74fb59a2d400",
                                    "name": "Object containing all available general options for the circuits",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "circuits",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"invalidIds\": [\n  \"<integer>\",\n  \"<integer>\"\n ],\n \"equipmentIds\": {\n  \"start\": \"<integer>\",\n  \"stop\": \"<integer>\"\n },\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"functions\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"maxCircuits\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "2c976eb7-6466-4779-bb2c-567564712f97",
                            "name": "Get all options needed to set circuit groups",
                            "request": {
                                "name": "Get all options needed to set circuit groups",
                                "description": {
                                    "content": "Get all options needed to set circuit groups",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "circuitGroups",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "fbc0bad0-dddf-4cd0-b141-0ecdde3c8d64",
                                    "name": "Object containing all available general options for the circuit groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "circuitGroups",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"circuitGroups\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    }\n   ]\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\"\n    }\n   ]\n  }\n ],\n \"maxCircuitGroups\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "441fcdde-5095-48ff-97eb-41d8dd0fe06e",
                            "name": "Get all available options to set lightGroups",
                            "request": {
                                "name": "Get all available options to set lightGroups",
                                "description": {
                                    "content": "Returns: maxLightGroups, invalidIds, equipmentIds, equipmentNames, functions, features",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "lightGroups",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "90bd313f-e81f-45b2-b9c3-9339cd76fa65",
                                    "name": "Object containing all available general options for the light groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "lightGroups",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"maxLightGroups\": 1,\n \"equipmentNames\": [\n  {\n   \"val\": 1,\n   \"name\": \"aerator\",\n   \"desc\": \"Aerator\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"airblower\",\n   \"desc\": \"Air Blower\"\n  },\n  {\n   \"val\": 3,\n   \"name\": \"aux1\",\n   \"desc\": \"AUX 1\"\n  },\n  {\n   \"val\": 4,\n   \"name\": \"aux2\",\n   \"desc\": \"AUX 2\"\n  }\n ],\n \"themes\": [\n  {\n   \"val\": 0,\n   \"name\": \"off\",\n   \"desc\": \"Off\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 1,\n   \"name\": \"on\",\n   \"desc\": \"On\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 128,\n   \"name\": \"colorsync\",\n   \"desc\": \"Color Sync\",\n   \"type\": \"intellibrite\"\n  },\n  {\n   \"val\": 144,\n   \"name\": \"colorswim\",\n   \"desc\": \"Color Swim\",\n   \"type\": \"intellibrite\"\n  }\n ],\n \"colors\": [\n  {\n   \"val\": 0,\n   \"name\": \"white\",\n   \"desc\": \"White\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"lightgreen\",\n   \"desc\": \"Light Green\"\n  },\n  {\n   \"val\": 4,\n   \"name\": \"green\",\n   \"desc\": \"Green\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": 2,\n   \"name\": \"Pool LtDeep\",\n   \"type\": 16,\n   \"equipmentType\": \"circuit\",\n   \"nameId\": 205\n  },\n  {\n   \"id\": 7,\n   \"name\": \"Spa Light\",\n   \"type\": 16,\n   \"equipmentType\": \"circuit\",\n   \"nameId\": 74\n  }\n ],\n \"lightGroups\": [\n  {\n   \"id\": 192,\n   \"circuits\": [\n    {\n     \"id\": 1,\n     \"circuit\": 2,\n     \"position\": 2,\n     \"color\": 6,\n     \"swimDelay\": 0,\n     \"isActive\": true\n    },\n    {\n     \"id\": 2,\n     \"circuit\": 7,\n     \"position\": 2,\n     \"color\": 14,\n     \"swimDelay\": 2,\n     \"isActive\": true\n    },\n    {\n     \"id\": 3,\n     \"circuit\": 8,\n     \"position\": 3,\n     \"color\": 2,\n     \"swimDelay\": 4,\n     \"isActive\": true\n    }\n   ],\n   \"isActive\": true,\n   \"name\": \"Intellibrite\",\n   \"type\": 3,\n   \"lightingTheme\": 195\n  }\n ],\n \"functions\": [\n  {\n   \"val\": 0,\n   \"name\": \"generic\",\n   \"desc\": \"Generic\"\n  },\n  {\n   \"val\": 1,\n   \"name\": \"spa\",\n   \"desc\": \"Spa\"\n  },\n  {\n   \"val\": 2,\n   \"name\": \"pool\",\n   \"desc\": \"Pool\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a4cd0489-634c-4d09-a895-f48210fca415",
                            "name": "Get all available options to set features",
                            "request": {
                                "name": "Get all available options to set features",
                                "description": {
                                    "content": "Returns: maxCircuitGroups, equipmentNames, circuits, circuitGroups",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "features",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "e35e0e8f-6e1c-4bb9-9b3f-61273e74e3e9",
                                    "name": "Object containing all available general options for the circuit groups",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "features",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"invalidIds\": [\n  \"<integer>\",\n  \"<integer>\"\n ],\n \"equipmentIds\": {\n  \"start\": \"<integer>\",\n  \"stop\": \"<integer>\"\n },\n \"equipmentNames\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"functions\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"features\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"nameId\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"macro\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"nameId\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"macro\": \"<boolean>\"\n  }\n ],\n \"maxFeatures\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "70928fc5-24d8-43f4-96ca-110009307eb3",
                            "name": "Get all available options to set bodies",
                            "request": {
                                "name": "Get all available options to set bodies",
                                "description": {
                                    "content": "Returns: maxBodies, bodyTypes, bodies",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "bodies",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "de6f4f63-30e3-4886-bfb6-0dbd7f1238fd",
                                    "name": "Object containing all available general options for the bodies",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "bodies",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"bodyTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  }\n ],\n \"maxBodies\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7674765f-a51b-4681-961d-7bcddd513647",
                            "name": "Get all available options to set valves",
                            "request": {
                                "name": "Get all available options to set valves",
                                "description": {
                                    "content": "Returns: maxValves, valveTypes, circuits, valves",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "valves",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "712866ef-f4b5-41b0-8ac3-b0e999bce36c",
                                    "name": "Object containing all available general options for the valves",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "valves",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"valveTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"valves\": [\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"isIntake\": \"<boolean>\",\n   \"isReturn\": \"<boolean>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"isIntake\": \"<boolean>\",\n   \"isReturn\": \"<boolean>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"maxValves\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "f181b8b1-7e75-42a8-a75f-6f2d353fe095",
                            "name": "Get all available options to set pumps",
                            "request": {
                                "name": "Get all available options to set pumps",
                                "description": {
                                    "content": "Returns: maxPumps, pumpUnits, pumpTypes, models, circuits, bodies, pumps",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "pumps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "82055740-e145-4883-a51d-d3133a9c3429",
                                    "name": "Object containing all available general options for the pumps",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "pumps",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"pumpUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"pumpTypes\": {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\",\n  \"maxCircuits\": \"<integer>\",\n  \"hasAddress\": \"<boolean>\",\n  \"hasBody\": \"<boolean>\"\n },\n \"models\": {\n  \"ss\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"ds\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vs\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vf\": [\n   {\n    \"ss\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"ds\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vf\": [\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     },\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     }\n    ],\n    \"vsf\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vssvrs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ]\n   },\n   {\n    \"ss\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"ds\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vf\": [\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     },\n     {\n      \"ss\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"ds\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vf\": [\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       },\n       {\n        \"ss\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"ds\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vf\": [\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         },\n         {\n          \"ss\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"ds\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vf\": [\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           },\n           {\n            \"ss\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"ds\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vsf\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ],\n            \"vssvrs\": [\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             },\n             {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n             }\n            ]\n           }\n          ],\n          \"vsf\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ],\n          \"vssvrs\": [\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           },\n           {\n            \"loAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiAmps\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"pf\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"volts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"loWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hiWatts\": {\n             \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n           }\n          ]\n         }\n        ],\n        \"vsf\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ],\n        \"vssvrs\": [\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         },\n         {\n          \"val\": \"<integer>\",\n          \"name\": \"<string>\",\n          \"desc\": \"<string>\",\n          \"loAmps\": \"<number>\",\n          \"hiAmps\": \"<number>\",\n          \"pf\": \"<number>\",\n          \"volts\": \"<integer>\",\n          \"loWatts\": \"<integer>\",\n          \"hiWatts\": \"<integer>\"\n         }\n        ]\n       }\n      ],\n      \"vsf\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ],\n      \"vssvrs\": [\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       },\n       {\n        \"val\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"desc\": \"<string>\",\n        \"loAmps\": \"<number>\",\n        \"hiAmps\": \"<number>\",\n        \"pf\": \"<number>\",\n        \"volts\": \"<integer>\",\n        \"loWatts\": \"<integer>\",\n        \"hiWatts\": \"<integer>\"\n       }\n      ]\n     }\n    ],\n    \"vsf\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ],\n    \"vssvrs\": [\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     },\n     {\n      \"val\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"desc\": \"<string>\",\n      \"loAmps\": \"<number>\",\n      \"hiAmps\": \"<number>\",\n      \"pf\": \"<number>\",\n      \"volts\": \"<integer>\",\n      \"loWatts\": \"<integer>\",\n      \"hiWatts\": \"<integer>\"\n     }\n    ]\n   }\n  ],\n  \"vsf\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ],\n  \"vssvrs\": [\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   },\n   {\n    \"val\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"loAmps\": \"<number>\",\n    \"hiAmps\": \"<number>\",\n    \"pf\": \"<number>\",\n    \"volts\": \"<integer>\",\n    \"loWatts\": \"<integer>\",\n    \"hiWatts\": \"<integer>\"\n   }\n  ]\n },\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"capacity\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"heatMode\": \"<integer>\",\n   \"setPoint\": \"<integer>\",\n   \"circuit\": \"<integer>\"\n  }\n ],\n \"pumps\": [\n  {\n   \"id\": \"<integer>\",\n   \"model\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    }\n   ],\n   \"flowStepSize\": \"<integer>\",\n   \"minFlow\": \"<integer>\",\n   \"maxFlow\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"primingTime\": \"<integer>\",\n   \"speedStepSize\": \"<integer>\",\n   \"minSpeed\": \"<integer>\",\n   \"maxSpeed\": \"<integer>\",\n   \"primingSpeed\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"model\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"circuits\": [\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    },\n    {\n     \"id\": \"<integer>\",\n     \"circuit\": \"<integer>\",\n     \"speed\": \"<integer>\",\n     \"units\": \"<integer>\"\n    }\n   ],\n   \"flowStepSize\": \"<integer>\",\n   \"minFlow\": \"<integer>\",\n   \"maxFlow\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"primingTime\": \"<integer>\",\n   \"speedStepSize\": \"<integer>\",\n   \"minSpeed\": \"<integer>\",\n   \"maxSpeed\": \"<integer>\",\n   \"primingSpeed\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"maxPumps\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "28436c8d-3e59-4249-8ca1-b25d106af5bd",
                            "name": "Get all available options to set schedules",
                            "request": {
                                "name": "Get all available options to set schedules",
                                "description": {
                                    "content": "Returns: maxSchedules, tempUnits, scheduleTimeTypes, schedules, scheduleTypes, scheduleDays,",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "schedules",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "95e89cbb-b78b-46b7-b953-b6f21da63d43",
                                    "name": "Object containing all available general options for the schedules",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "schedules",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"tempUnits\": {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n \"scheduleTimeTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"scheduleTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\",\n   \"startDate\": \"<boolean>\",\n   \"startTime\": \"<boolean>\",\n   \"endTime\": \"<boolean>\",\n   \"days\": \"<string>\",\n   \"heatSource\": \"<boolean>\",\n   \"heatSetpoint\": \"<boolean>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\",\n   \"startDate\": \"<boolean>\",\n   \"startTime\": \"<boolean>\",\n   \"endTime\": \"<boolean>\",\n   \"days\": \"<string>\",\n   \"heatSource\": \"<boolean>\",\n   \"heatSetpoint\": \"<boolean>\"\n  }\n ],\n \"scheduleDays\": [\n  {\n   \"val\": \"<integer>\",\n   \"days\": {\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"down\": \"<integer>\"\n   }\n  },\n  {\n   \"val\": \"<integer>\",\n   \"days\": {\n    \"name\": \"<string>\",\n    \"desc\": \"<string>\",\n    \"down\": \"<integer>\"\n   }\n  }\n ],\n \"heatSources\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"circuits\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isOn\": \"<boolean>\",\n   \"nameId\": \"<string>\",\n   \"isActive\": \"<boolean>\",\n   \"freeze\": \"<boolean>\",\n   \"showInFeatures\": \"<boolean>\",\n   \"eggTimer\": \"<integer>\",\n   \"equipmentType\": \"<string>\"\n  }\n ],\n \"schedules\": [\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"startTime\": \"<integer>\",\n   \"endTime\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"scheduleDays\": \"<integer>\",\n   \"runOnce\": \"<integer>\",\n   \"scheduleType\": \"<integer>\",\n   \"startTimeType\": \"<integer>\",\n   \"endTimeType\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"circuit\": \"<integer>\",\n   \"startTime\": \"<integer>\",\n   \"endTime\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"scheduleDays\": \"<integer>\",\n   \"runOnce\": \"<integer>\",\n   \"scheduleType\": \"<integer>\",\n   \"startTimeType\": \"<integer>\",\n   \"endTimeType\": \"<integer>\"\n  }\n ],\n \"maxSchedules\": \"<integer>\",\n \"clockMode\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "9bb4a593-3c3f-446b-9cf4-e1242014eb32",
                            "name": "Get all available options to set heaters",
                            "request": {
                                "name": "Get all available options to set heaters",
                                "description": {
                                    "content": "Returns: maxHeaters, heaters, heaterTypes, heatModes",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "heaters",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "4b115d0a-533d-4550-81de-756c6dd4b8e8",
                                    "name": "Object containing all available general options for the heaters",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "heaters",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"heatModes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"heaterTypes\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"heaters\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"freeze\": \"<boolean>\",\n   \"coolingEnabled\": \"<boolean>\",\n   \"startTempDelta\": \"<integer>\",\n   \"stopTempDelta\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"freeze\": \"<boolean>\",\n   \"coolingEnabled\": \"<boolean>\",\n   \"startTempDelta\": \"<integer>\",\n   \"stopTempDelta\": \"<integer>\"\n  }\n ],\n \"maxHeaters\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0e74cad2-ea8a-49bc-abd3-ac9b3e11da63",
                            "name": "Get a list of custom names (*Touch only)",
                            "request": {
                                "name": "Get a list of custom names (*Touch only)",
                                "description": {
                                    "content": "Returns: customNames, maxCustomNames. (*Touch only)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "3b24f4b2-1f61-47ba-97e6-07e0419668df",
                                    "name": "Object with maxCustomNames and customNames",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "customNames",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"maxCustomNames\": 10,\n \"customNames\": [\n  {\n   \"id\": 0,\n   \"name\": \"WtrFall 1\"\n  },\n  {\n   \"id\": 1,\n   \"name\": \"WtrFall 1.5\"\n  },\n  {\n   \"id\": 2,\n   \"name\": \"WtrFall 2\"\n  },\n  {\n   \"id\": 3,\n   \"name\": \"WtrFall 3\"\n  },\n  {\n   \"id\": 4,\n   \"name\": \"Pool High\"\n  },\n  {\n   \"id\": 5,\n   \"name\": \"Pool LtDeep\"\n  },\n  {\n   \"id\": 8,\n   \"name\": \"USERNAME-09\"\n  },\n  {\n   \"id\": 9,\n   \"name\": \"USERNAME-aa\"\n  },\n  {\n   \"id\": 6,\n   \"name\": \"Pool LtShlw\"\n  },\n  {\n   \"id\": 7,\n   \"name\": \"USERNAME-08\"\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "f2f029cb-3302-4bea-bf15-596f198c2823",
                            "name": "Get all available options to set chem controllers",
                            "request": {
                                "name": "Get all available options to set chem controllers",
                                "description": {
                                    "content": "Returns: types, bodies, tempUnits, status, status1, status2, waterflow, controllers, maxChemControllers",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "chemControllers",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "1f0873c3-9726-4469-8a16-862916096fab",
                                    "name": "Object containing all available general options for the chlorinators",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "chemControllers",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"types\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"tempUnits\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"status\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"status1\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"status2\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"waterFlow\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"controllers\": [\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"isVirtual\": \"<boolean>\",\n   \"name\": \"<integer>\",\n   \"phSetpoint\": \"<number>\",\n   \"orpSetpoint\": \"<boolean>\",\n   \"alkalinity\": \"<integer>\",\n   \"calciumHardness\": \"<integer>\",\n   \"cyanuricAcid\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"type\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"isVirtual\": \"<boolean>\",\n   \"name\": \"<integer>\",\n   \"phSetpoint\": \"<number>\",\n   \"orpSetpoint\": \"<boolean>\",\n   \"alkalinity\": \"<integer>\",\n   \"calciumHardness\": \"<integer>\",\n   \"cyanuricAcid\": \"<integer>\"\n  }\n ],\n \"maxChemControllers\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "355bc02f-b2ac-4aa8-bd77-e56b1d5b3763",
                            "name": "Get all available options to set chlorinators",
                            "request": {
                                "name": "Get all available options to set chlorinators",
                                "description": {
                                    "content": "Returns: types, bodies, chlorinators, maxChlorinators",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "chlorinators",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "24a0f345-6bbc-4228-9910-aeec3bdc6839",
                                    "name": "Object containing all available general options for the chlorinators",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "chlorinators",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"types\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"bodies\": [\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  },\n  {\n   \"val\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"desc\": \"<string>\"\n  }\n ],\n \"chlorinators\": [\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"spaSetpoint\": \"<integer>\",\n   \"poolSetpoint\": \"<integer>\",\n   \"superChlor\": \"<boolean>\",\n   \"superChlorHours\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"address\": \"<integer>\",\n   \"isActive\": \"<boolean>\",\n   \"body\": \"<integer>\",\n   \"spaSetpoint\": \"<integer>\",\n   \"poolSetpoint\": \"<integer>\",\n   \"superChlor\": \"<boolean>\",\n   \"superChlorHours\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"type\": \"<integer>\"\n  }\n ],\n \"maxChlorinators\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0a39be03-65f4-43c7-98a4-85b27c67abea",
                            "name": "Get days of week that are valid for the current OCP.  This can also be retrieved as `scheduleDays` in the /config/options/schedules object.",
                            "request": {
                                "name": "Get days of week that are valid for the current OCP.  This can also be retrieved as `scheduleDays` in the /config/options/schedules object.",
                                "description": {
                                    "content": "Get Days of week; info now contained in /config/options/schedules",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "options",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "5106ad02-b564-437b-b1b9-7761289bcefe",
                                    "name": "Array of days",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "options",
                                                "dateTime",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "ae426c87-9e07-4eaa-ac8d-23e9c5acaac9",
                    "name": "Set options related to the \"Pool\" section in poolConfig.json.",
                    "request": {
                        "name": "Set options related to the \"Pool\" section in poolConfig.json.",
                        "description": {
                            "content": "To set general settings, send an object with the value you want to change from /config/options/general.",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "config",
                                "general",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "82592ce2-6705-4d56-ac80-a6c211a2636b",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"adjustDST\": \"<boolean>\",\n \"clockMode\": \"<integer>\",\n \"clockSource\": \"<string>\",\n \"pumpDelay\": \"<boolean>\",\n \"manualHeat\": \"<boolean>\",\n \"units\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c0de2a97-89cb-45b5-8f67-94d3a094399c",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "general",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"adjustDST\": \"<boolean>\",\n    \"clockMode\": \"<integer>\",\n    \"clockSource\": \"<string>\",\n    \"pumpDelay\": \"<boolean>\",\n    \"manualHeat\": \"<boolean>\",\n    \"units\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f681a9fa-3e03-4edd-a3f3-5fdb66260cee",
                    "name": "Set options related to the \"Valve\" section in poolConfig.json",
                    "request": {
                        "name": "Set options related to the \"Valve\" section in poolConfig.json",
                        "description": {
                            "content": "To set valve settings, send an object with the values you want to change from /config/options/general.",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "config",
                                "valve",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "955a9d35-d886-4abd-affb-4ef253099cb0",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "valve",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"circuit\": 128,\n \"isActive\": true,\n \"name\": \"Solar\",\n \"type\": 0,\n \"isReturn\": false,\n \"isIntake\": false\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "197308e8-9356-4328-8796-5902d76f386a",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "valve",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"isIntake\": \"<boolean>\",\n    \"isReturn\": \"<boolean>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e4443c28-20b9-4618-882b-24d62b9c766c",
                    "name": "feature",
                    "item": [
                        {
                            "id": "f0305aa0-a33f-456f-9c00-fc268c6b54a3",
                            "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/features.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "feature",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "fe03f09c-efa4-474e-a01d-8f01b68dc3d7",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 12,\n \"name\": \"Waterfall 1\",\n \"nameId\": 87,\n \"type\": 0,\n \"isActive\": true,\n \"freeze\": false,\n \"showInFeatures\": true,\n \"eggTimer\": 420,\n \"macro\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "6b22960a-b842-487a-b932-711791feae3a",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"nameId\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"freeze\": \"<boolean>\",\n    \"showInFeatures\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"macro\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "3f53f791-ae2b-429e-8fdf-7b4de086496c",
                            "name": "Delete a feature at the specified id",
                            "request": {
                                "name": "Delete a feature at the specified id",
                                "description": {
                                    "content": "Delete a feature at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "feature",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "aefcd070-685a-471f-967d-fb7278d518f3",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "5beb3b18-c76d-4b27-a4a5-e2111d85283f",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "feature",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4dedac4f-27c3-48d0-9597-065a5e10e06c",
                    "name": "circuit Group",
                    "item": [
                        {
                            "id": "3e11ffd9-7e49-49dd-be3e-1b77988d3892",
                            "name": "Set options related to the \"Circuit Groups\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"Circuit Groups\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/circuitGroups.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "b5b2599e-1e46-4a8d-abf1-64f57ce9af42",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"Need Example\": null\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "cf4317b1-c253-466f-bd18-97a8f3b65650",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"eggTimer\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a5277b71-790c-43b7-a860-3536a3aa5011",
                            "name": "Delete a circuit group at the specified id",
                            "request": {
                                "name": "Delete a circuit group at the specified id",
                                "description": {
                                    "content": "Delete a circuit group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "91d0ec4d-8cfc-4dc4-a138-d535a7b1ef9f",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "885cc10f-d70b-4dd3-831e-5ef4956fdf34",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "8b377bc5-9fbb-4c4b-9194-de6f7933fa5d",
                            "name": "Get a single circuit group at the specified id",
                            "request": {
                                "name": "Get a single circuit group at the specified id",
                                "description": {
                                    "content": "Get a single circuit group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "circuitGroup",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d491a374-c107-4996-9e0e-80891c933d62",
                                    "name": "Circuit group extended object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "circuitGroup",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d6869149-01d8-4865-a108-7da59b0cb1f6",
                    "name": "light Group",
                    "item": [
                        {
                            "id": "48d7c0b9-b564-4a8b-a0d3-540011c7a592",
                            "name": "Set options related to the \"lightGroups\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"lightGroups\" section in poolConfig.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the values you want to change from /config/options/lightGroups.\n\n*NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, \nsend an empty array `[]`.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "5e524415-9d51-4ecb-86b0-f59435054d86",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": 2,\n   \"position\": 2,\n   \"color\": 6,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": 7,\n   \"position\": 2,\n   \"color\": 14,\n   \"swimDelay\": 2,\n   \"isActive\": true\n  },\n  {\n   \"id\": 3,\n   \"circuit\": 8,\n   \"position\": 3,\n   \"color\": 2,\n   \"swimDelay\": 4,\n   \"isActive\": true\n  }\n ],\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": 3,\n \"lightingTheme\": 195\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "8c9df483-a200-4caf-b086-4ea3fb1e68a8",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\",\n    \"lightingTheme\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"nameId\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"freeze\": \"<boolean>\",\n            \"showInFeatures\": \"<boolean>\",\n            \"eggTimer\": \"<integer>\",\n            \"macro\": \"<boolean>\"\n        }\n    ]\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ea3e63c7-8ff6-425c-b148-e1e132283e7e",
                            "name": "Delete a light group at the specified id",
                            "request": {
                                "name": "Delete a light group at the specified id",
                                "description": {
                                    "content": "Delete a light group at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "97cfec2c-aa38-4364-b705-a1c2d8905973",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "b16e6744-bf76-43b8-9a53-a9f6f286c38d",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "d644f529-3e32-44e0-8453-7a6c17a4eeb2",
                            "name": "{id}",
                            "item": [
                                {
                                    "id": "5976c966-7878-42c8-84ec-38200ffe1315",
                                    "name": "Get a single lightGroup at the specified id This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                    "request": {
                                        "name": "Get a single lightGroup at the specified id This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                        "description": {
                                            "content": "Get a single lightGroup at the specified id",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ":id",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of http,https)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server:port}}",
                                                    "key": "server:port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "fd03c907-652b-4528-9645-aef2a824d961",
                                            "name": "Object with deep linking",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "port}}",
                                                    "path": [
                                                        "",
                                                        "config",
                                                        "lightGroup",
                                                        "<integer>",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "GET",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "text/plain"
                                                }
                                            ],
                                            "body": "",
                                            "cookie": [],
                                            "_postman_previewlanguage": "text"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "1a842af0-c55d-4f86-803c-42a20957a335",
                                    "name": "set lg attribs\nThis endpoint is going away.  Use /config/lightGroup instead.",
                                    "request": {
                                        "name": "set lg attribs\nThis endpoint is going away.  Use /config/lightGroup instead.",
                                        "description": {
                                            "content": "",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                ":id",
                                                "setColors",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of http,https)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server:port}}",
                                                    "key": "server:port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "2515fbef-d503-4d62-af39-927b9f1e82dd",
                                            "name": "Array of",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "port}}",
                                                    "path": [
                                                        "",
                                                        "config",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "setColors",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "text/plain"
                                                }
                                            ],
                                            "body": "",
                                            "cookie": [],
                                            "_postman_previewlanguage": "text"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "da72808b-3825-4f61-a98e-02a57a0645ad",
                            "name": "Get lightgroup colors, theme, action\nThis endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                            "request": {
                                "name": "Get lightgroup colors, theme, action\nThis endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.",
                                "description": {
                                    "content": "Get lightgroup colors, theme, action",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroup",
                                        "colors",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "1a8aeb77-3d0f-4fa4-8972-5b2cc15e6daa",
                                    "name": "Object of items...",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "lightGroup",
                                                "colors",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "3869d738-3a54-44fa-a4d6-0f3ab8c777e2",
                    "name": "pump",
                    "item": [
                        {
                            "id": "1d3b69f2-1a03-4e83-986d-1cdec08aea0b",
                            "name": "Set options related to the \"pumps\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"pumps\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/pumps.\n\n*NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, \nsend an empty array `[]`.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "1444b574-5751-43d4-9b6e-d0efbbe1ce98",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"type\": 128,\n \"address\": 96,\n \"isActive\": true,\n \"model\": 0,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": 255,\n   \"speed\": 1830,\n   \"units\": 0\n  },\n  {\n   \"id\": 2,\n   \"circuit\": 4,\n   \"speed\": 2460,\n   \"units\": 0\n  }\n ],\n \"primingSpeed\": 3000,\n \"primingTime\": 1,\n \"minSpeed\": 450,\n \"maxSpeed\": 3450,\n \"speedStepSize\": 10,\n \"name\": \"Pool\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "e3500831-0d11-4f0a-b785-ef3cfa2430ea",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"model\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"circuits\": [\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"circuit\": \"<integer>\",\n            \"speed\": \"<integer>\",\n            \"units\": \"<integer>\"\n        }\n    ],\n    \"flowStepSize\": \"<integer>\",\n    \"minFlow\": \"<integer>\",\n    \"maxFlow\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"primingTime\": \"<integer>\",\n    \"speedStepSize\": \"<integer>\",\n    \"minSpeed\": \"<integer>\",\n    \"maxSpeed\": \"<integer>\",\n    \"primingSpeed\": \"<integer>\",\n    \"name\": \"<string>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "beb632bc-fd3a-4ae5-93e6-7b5190b40d7a",
                            "name": "Delete a pump at the specified id",
                            "request": {
                                "name": "Delete a pump at the specified id",
                                "description": {
                                    "content": "Delete a pump at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "e7c1a4b5-42a4-4f4b-8e6c-1f692cab7c1d",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "3cd9953c-30d5-4299-9004-3618a514d9f8",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a8fd05c3-c5ba-4cf7-86a5-4dbdf94548d5",
                            "name": "Delete a pump at the specified Id",
                            "request": {
                                "name": "Delete a pump at the specified Id",
                                "description": {
                                    "content": "Delete a pump at the specified Id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "pump",
                                        ":pumpId",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "33443659-965e-4403-84cf-7a34df166f33",
                                    "name": "Array of",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "pump",
                                                ":pumpId",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "pumpId"
                                                }
                                            ]
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "193546ff-fbff-4e63-aabc-5d6ec3c22ce5",
                    "name": "Set custom names on OCP (*Touch only)",
                    "request": {
                        "name": "Set custom names on OCP (*Touch only)",
                        "description": {
                            "content": "Set custom names on OCP (*Touch only)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "config",
                                "customNames",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                        }
                    },
                    "response": [
                        {
                            "id": "fe90343d-9ae0-481e-8d50-d69f90e80042",
                            "name": "Object with custom name",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "bd0c8059-3ded-433a-af55-4a73d33731e3",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customNames",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n    {\n        \"id\": 0,\n        \"name\": \"WtrFall 1\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"WtrFall 1.5\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"WtrFall 2\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"WtrFall 3\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Pool High\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Pool LtDeep\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"USERNAME-09\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"USERNAME-aa\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Pool LtShlw\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"USERNAME-08\"\n    }\n]"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "3f5d7282-fd4d-4c2f-a3b2-d364cd49560f",
                    "name": "Set a single custom names on OCP (*Touch only)",
                    "request": {
                        "name": "Set a single custom names on OCP (*Touch only)",
                        "description": {
                            "content": "Set a single custom names on OCP (*Touch only)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "config",
                                "customName",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "3ebfe152-e8b3-4286-a0d8-7e246e691b5d",
                            "name": "Object with custom name",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customName",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "57381453-2d17-4fb4-936c-cc7fc041ad7e",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "customName",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": 0,\n    \"name\": \"WtrFall 1\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "8fea5b86-6dc4-414b-9fa0-e98268ccfa7c",
                    "name": "schedule",
                    "item": [
                        {
                            "id": "406bf35f-b931-41e5-ac87-4f2113d82bfb",
                            "name": "Set options related to the \"schedules\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"schedules\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/schedules.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "61c3a4b7-5a46-412d-b873-f1b8ca54c0a8",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"circuit\": 6,\n \"startTime\": 495,\n \"endTime\": 960,\n \"isActive\": true,\n \"scheduleDays\": 127,\n \"runOnce\": 128,\n \"scheduleType\": 128,\n \"startTimeType\": 0,\n \"endTimeType\": 0\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "fe52066d-f9bb-487a-96e5-159878407187",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"circuit\": \"<integer>\",\n    \"startTime\": \"<integer>\",\n    \"endTime\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"scheduleDays\": \"<integer>\",\n    \"runOnce\": \"<integer>\",\n    \"scheduleType\": \"<integer>\",\n    \"startTimeType\": \"<integer>\",\n    \"endTimeType\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "e2486a43-8f18-4221-bd46-d43e2a360b34",
                            "name": "Delete a schedule at the specified id",
                            "request": {
                                "name": "Delete a schedule at the specified id",
                                "description": {
                                    "content": "Delete a schedule at the specified id",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "89e12bb5-9497-49e2-bac8-925fd96fa683",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 19,\n \"isActive\": false\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "3e4572b7-37f3-4026-bd4d-dafb778a2d99",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "DELETE",
                                        "body": {}
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0059f2be-9b6a-4106-9d5d-fb581d3e5d68",
                            "name": "Get an individual schedule\nThis endpoint will be going away.  Please use /config/schedules or /config/options/schedules instead.",
                            "request": {
                                "name": "Get an individual schedule\nThis endpoint will be going away.  Please use /config/schedules or /config/options/schedules instead.",
                                "description": {
                                    "content": "Get an individual schedule",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "schedule",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "181c933f-a415-43bf-a8f3-99e2bbbe0c09",
                                    "name": "Circuit object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "schedule",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\",\n \"isOn\": \"<boolean>\",\n \"nameId\": \"<string>\",\n \"isActive\": \"<boolean>\",\n \"freeze\": \"<boolean>\",\n \"showInFeatures\": \"<boolean>\",\n \"eggTimer\": \"<integer>\",\n \"equipmentType\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "8d134254-70d6-4fc6-a591-2fdcb29b3b92",
                    "name": "chlorinator",
                    "item": [
                        {
                            "id": "1e8e8092-8225-4730-8ad7-2ca291ac0655",
                            "name": "Set options related to the \"chlorinators\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"chlorinators\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/chlorinators.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinator",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "28c90685-7ec4-44f2-9ca8-37e618ff91ba",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"address\": 80,\n \"isActive\": true,\n \"body\": 32,\n \"spaSetpoint\": 15,\n \"poolSetpoint\": 2,\n \"superChlor\": true,\n \"superChlorHours\": 10,\n \"name\": \"Intellichlor--40\",\n \"type\": 2\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "031eb757-4505-4315-9a8d-781bf00e0ffe",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "90ff824e-cb4f-4286-b6de-278316201deb",
                            "name": "Get a single chlorinator object",
                            "request": {
                                "name": "Get a single chlorinator object",
                                "description": {
                                    "content": "Get a single chlorinator object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinator",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "ade8969b-0b95-43ee-88b5-83c46d25c8df",
                                    "name": "Chlorinator object",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chlorinator",
                                                ":id",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "type": "any",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": \"<integer>\",\n \"address\": \"<integer>\",\n \"isActive\": \"<boolean>\",\n \"body\": \"<integer>\",\n \"spaSetpoint\": \"<integer>\",\n \"poolSetpoint\": \"<integer>\",\n \"superChlor\": \"<boolean>\",\n \"superChlorHours\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "b3ffad3e-8d49-4cd3-88a3-2b4eb35ce0ca",
                    "name": "Get a list of valid controller functions for features\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                    "request": {
                        "name": "Get a list of valid controller functions for features\nThis endpoint is going away.  Use the functions object in /config/options/circuits\nor /config/options/features instead.",
                        "description": {
                            "content": "Get a list of valid controller functions for features",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "config",
                                "features",
                                "functions",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "fbb5a1de-54b9-4813-89fa-03254fc5bb56",
                            "name": "Array of controller function objects valid for features",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "features",
                                        "functions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "91a874d4-0b1a-4fbb-bfcf-5aee582e5a57",
                    "name": "Start a search for standalone chlorinators",
                    "request": {
                        "name": "Start a search for standalone chlorinators",
                        "description": {
                            "content": "Start a search for standalone chlorinators",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "config",
                                "chlorinators",
                                "search",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "1145adef-b398-4a32-b95e-dcb80bffe264",
                            "name": "Chlorinator object (isActive and isVirtual should be checked)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chlorinators",
                                        "search",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": \"<integer>\",\n \"address\": \"<integer>\",\n \"isActive\": \"<boolean>\",\n \"body\": \"<integer>\",\n \"spaSetpoint\": \"<integer>\",\n \"poolSetpoint\": \"<integer>\",\n \"superChlor\": \"<boolean>\",\n \"superChlorHours\": \"<integer>\",\n \"name\": \"<string>\",\n \"type\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f4f033f5-81b6-4e7f-aa07-50fd3e522361",
                    "name": "Set date and time options",
                    "request": {
                        "name": "Set date and time options",
                        "description": {
                            "content": "Set date and time options",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "config",
                                "dateTime",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "0802f669-dc8f-4d34-b58d-deabbbb9ddc2",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"min\": \"<integer>\",\n \"hour\": \"<integer>\",\n \"date\": \"<integer>\",\n \"month\": \"<integer>\",\n \"year\": \"<integer>\",\n \"dow\": \"<integer>\",\n \"dst\": \"<integer>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "867b16f7-9989-46ca-9a99-141d78af1a50",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "dateTime",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"min\": \"<integer>\",\n    \"hour\": \"<integer>\",\n    \"date\": \"<integer>\",\n    \"month\": \"<integer>\",\n    \"year\": \"<integer>\",\n    \"dow\": \"<integer>\",\n    \"dst\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f22df133-7cf2-4e45-95a6-d48775ae9225",
                    "name": "Get a list of light group themes \nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                    "request": {
                        "name": "Get a list of light group themes \nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                        "description": {
                            "content": "Get a list of light group themes",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "config",
                                "lightGroups",
                                "themes",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "6e355805-78c8-41d8-afd2-f43e6aed8191",
                            "name": "Array of",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "lightGroups",
                                        "themes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "da00eeb5-99ed-4a4c-88b7-5033537d330e",
                    "name": "Get lightGroup themes - can be retrieved with /config/options/lightGroups; also it sends enumerated state info and not just identifiers.\nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                    "request": {
                        "name": "Get lightGroup themes - can be retrieved with /config/options/lightGroups; also it sends enumerated state info and not just identifiers.\nThis endpoint is going away.  Use themes object in /config/options/lightGroups instead.",
                        "description": {
                            "content": "",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "config",
                                "intellibrite",
                                "themes",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "ec69acda-fef9-48c4-8a75-ff0d73b8faed",
                            "name": "Array of",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "intellibrite",
                                        "themes",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6dece54b-3c8d-420a-b9c1-4d2aa0c93c0c",
                    "name": "chem Controller",
                    "item": [
                        {
                            "id": "c9961c49-9045-42e8-91f8-4ee70648de3f",
                            "name": "Set options related to the \"chemControllers\" section in poolConfig.json",
                            "request": {
                                "name": "Set options related to the \"chemControllers\" section in poolConfig.json",
                                "description": {
                                    "content": "To set schedule settings, send an object with the values you want to change from /config/options/chemControllers.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chemController",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "8278c107-49ed-44c0-a18a-87f9f0e53e21",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"type\": 3,\n \"isActive\": true,\n \"isVirtual\": true,\n \"name\": \"Chem Controller\",\n \"pHSetpoint\": 7.4,\n \"orpSetpoint\": 660,\n \"alkalinity\": 40,\n \"calciumHardness\": 710,\n \"cyanuricAcid\": 10\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "a96a5f6a-feeb-4a1f-aa96-dcf2960ff74e",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"type\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"isVirtual\": \"<boolean>\",\n    \"name\": \"<integer>\",\n    \"phSetpoint\": \"<number>\",\n    \"orpSetpoint\": \"<boolean>\",\n    \"alkalinity\": \"<integer>\",\n    \"calciumHardness\": \"<integer>\",\n    \"cyanuricAcid\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "23421f31-1328-41c6-bc44-04b469551d4f",
                            "name": "NOT IMPLEMENTED YET.  Begin a search on the server for any chem controllers",
                            "request": {
                                "name": "NOT IMPLEMENTED YET.  Begin a search on the server for any chem controllers",
                                "description": {
                                    "content": "Begin a search on the server for any chem controllers",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "chemController",
                                        "search",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d0b665a2-14d7-44df-8b03-0fa12508bd35",
                                    "name": "Searching for chem controllers.",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "config",
                                                "chemController",
                                                "search",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a9cc50e4-6678-446e-8a40-4ffb9d93d01d",
                    "name": "Return a section of poolConfig.json",
                    "request": {
                        "name": "Return a section of poolConfig.json",
                        "description": {
                            "content": "Return a section of poolConfig.json",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "config",
                                ":section",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "all",
                                    "key": "section"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "1eff76db-caf6-4c3b-bf8c-cf3e72e6bc68",
                            "name": "{Section} of poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "config",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "15d6c45f-ed66-4cf1-b4e5-e96f8a9fb395",
            "name": "app",
            "item": [
                {
                    "id": "537b853d-2d31-4111-bbf8-99e292c94a4e",
                    "name": "Get all available options to set logger",
                    "request": {
                        "name": "Get all available options to set logger",
                        "description": {
                            "content": "Returns: app logger",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "app",
                                "options",
                                "logger",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "f9f93c22-5bf0-49fb-90b5-a24e85e5633b",
                            "name": "Object containing all available options for the logger",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "options",
                                        "logger",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"logger\": {\n  \"packet\": {\n   \"enabled\": true,\n   \"logToConsole\": false,\n   \"logToFile\": false,\n   \"filename\": \"packetLog\",\n   \"invalid\": true,\n   \"broadcast\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"pump\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"chlorinator\": {\n    \"enabled\": false,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"intellichem\": {\n    \"enabled\": true,\n    \"includeActions\": [],\n    \"exclueActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"intellivalve\": {\n    \"enabled\": true,\n    \"includeActions\": [],\n    \"exclueActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"unidentified\": {\n    \"enabled\": true,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   },\n   \"unknown\": {\n    \"enabled\": true,\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   }\n  },\n  \"app\": {\n   \"enabled\": true,\n   \"level\": \"debug\",\n   \"captureForReplay\": false\n  }\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "348b53fe-b1dd-4d75-9e18-2db379dc0106",
                    "name": "logger",
                    "item": [
                        {
                            "id": "cf4db7ad-b6b6-4248-9ff6-08a9921490db",
                            "name": "Set options related to the \"log\" section in config.json",
                            "request": {
                                "name": "Set options related to the \"log\" section in config.json",
                                "description": {
                                    "content": "To set logger settings, send an object with the values you want to change from /config/options/logger.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "logger",
                                        "setOptions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "5a0fd51f-e9cb-4576-b427-b5efe7ddc00a",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "setOptions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"logger\": {\n  \"packet\": {\n   \"enabled\": true,\n   \"logToConsole\": false,\n   \"logToFile\": false,\n   \"filename\": \"packetLog\",\n   \"invalid\": true,\n   \"broadcast\": {\n    \"enabled\": false,\n    \"includeActions\": [],\n    \"includeSource\": [],\n    \"includeDest\": [],\n    \"excludeActions\": [],\n    \"excludeSource\": [],\n    \"excludeDest\": []\n   }\n  },\n  \"app\": {\n   \"enabled\": true,\n   \"level\": \"debug\",\n   \"captureForReplay\": false\n  }\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "a7c3e6e1-4197-4e0e-a0f6-c7250e0240e2",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "setOptions",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"packet\": {\n        \"enabled\": \"<boolean>\",\n        \"logToConsole\": \"<boolean>\",\n        \"logToFile\": \"<boolean>\",\n        \"filename\": \"<string>\",\n        \"invalid\": \"<boolean>\",\n        \"broadcast\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"pump\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"chlorinator\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellichem\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"intellivalve\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unidentified\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        },\n        \"unknown\": {\n            \"id\": \"<integer>\",\n            \"type\": \"<integer>\",\n            \"capacity\": \"<integer>\",\n            \"isActive\": \"<boolean>\",\n            \"name\": \"<string>\",\n            \"heatMode\": \"<integer>\",\n            \"setPoint\": \"<integer>\",\n            \"circuit\": \"<integer>\"\n        }\n    }\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "92b6af9b-c992-4d1a-a660-145f476a4413",
                            "name": "Delete current logfile from disk",
                            "request": {
                                "name": "Delete current logfile from disk",
                                "description": {
                                    "content": "Delete current logfile from disk",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "logger",
                                        "clearMessages",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "0f65f645-ea38-4b4f-a679-4b6091fd619d",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "logger",
                                                "clearMessages",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "c8cd34a3-b6da-49c6-b474-256e049a664c",
                    "name": "Get all broadcast packets identifiers",
                    "request": {
                        "name": "Get all broadcast packets identifiers",
                        "description": {
                            "content": "Get all broadcast packets identifiers",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "app",
                                "message",
                                "broadcast",
                                "actions",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "38e063b3-7d6d-448f-8b71-9d40763e8f29",
                            "name": "Array of broadcast actions",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "message",
                                        "broadcast",
                                        "actions",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "[\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n },\n {\n  \"val\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"desc\": \"<string>\"\n }\n]",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "b6acbdf2-83ac-4170-830b-826d8045763a",
                    "name": "config",
                    "item": [
                        {
                            "id": "34a0dd6f-e7dd-4ea1-a066-d72ad51d77e1",
                            "name": "Reload the app with files from disk",
                            "request": {
                                "name": "Reload the app with files from disk",
                                "description": {
                                    "content": "Reload the app with files from disk",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "reload",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "d1724582-c0c9-4d9e-880e-f40c2fce82dd",
                                    "name": "Successful Reload",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "reload",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "PUT",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7a75b26a-6e90-46bb-a970-4d4a883e91fc",
                            "name": "Starts a packet capture on the server WITHOUT a reset",
                            "request": {
                                "name": "Starts a packet capture on the server WITHOUT a reset",
                                "description": {
                                    "content": "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "startPacketCapture",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "501b56a1-0f6c-4fa9-a05b-f187367d69be",
                                    "name": "OK",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "startPacketCapture",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "76237333-40bc-4878-8cc0-2b12faf7a843",
                            "name": "Starts a packet capture on the server WITH a reset",
                            "request": {
                                "name": "Starts a packet capture on the server WITH a reset",
                                "description": {
                                    "content": "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "startPacketCaptureWithoutReset",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "e1d89a8d-909f-4b5e-ac5e-a1f34f233d4f",
                                    "name": "OK",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "startPacketCaptureWithoutReset",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "text/plain"
                                        }
                                    ],
                                    "body": "",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7ddaa274-362a-4e52-9e9a-e4f6c1857606",
                            "name": "Stop an in-progress packet capture and download a zipped file",
                            "request": {
                                "name": "Stop an in-progress packet capture and download a zipped file",
                                "description": {
                                    "content": "Stop an in-progress packet capture and download a zipped file",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "app",
                                        "config",
                                        "stopPacketCapture",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "fd5c2d71-9645-4f55-944c-714d5ac291b7",
                                    "name": "Zip file of packet capture",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "app",
                                                "config",
                                                "stopPacketCapture",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "zip"
                                        }
                                    ],
                                    "body": "<binary>",
                                    "cookie": [],
                                    "_postman_previewlanguage": "text"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "81cb1228-37cd-4a91-bb80-0ef8207f9bc3",
            "name": "state",
            "item": [
                {
                    "id": "92d63f3c-0df1-4f7a-ab03-ed5e3803856f",
                    "name": "Return all sections for the current state of the pool",
                    "request": {
                        "name": "Return all sections for the current state of the pool",
                        "description": {
                            "content": "Retrieve a JSON object of all sections",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "state",
                                "all",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "fd592be8-cbec-43af-8f45-fe83dda298ff",
                            "name": "JSON Object",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "b4aadf97-6884-4f5b-bb08-d208f1374a27",
                    "name": "Return a section of poolState.json",
                    "request": {
                        "name": "Return a section of poolState.json",
                        "description": {
                            "content": "Return a section of poolState.json",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "state",
                                ":section",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "all",
                                    "key": "section"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "dda285a2-30ce-454e-a1a6-e9e7c55a65d6",
                            "name": "{Section} of poolConfig.json",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "all",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "16e4f65d-cf7d-4d91-8d2f-1f3eee0fad54",
                    "name": "Return an individual chem controller object",
                    "request": {
                        "name": "Return an individual chem controller object",
                        "description": {
                            "content": "Return an individual chem controller object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "state",
                                "chemController",
                                ":id",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                },
                                {
                                    "description": {
                                        "content": "Id of the chem controller",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "<integer>",
                                    "key": "id"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "9c50ec81-2fbc-4ab8-9240-ca1a39058ff2",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chemController",
                                        "<integer>",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"type\": {\n  \"val\": 3,\n  \"name\": \"homegrown\",\n  \"desc\": \"Homegrown\"\n },\n \"name\": \"Chem Controller\",\n \"status\": {\n  \"val\": 1,\n  \"name\": \"nocomms\",\n  \"desc\": \"No Communication\"\n },\n \"saltLevel\": 2900,\n \"status1\": {\n  \"val\": 101,\n  \"name\": \"monitoring\",\n  \"desc\": \"Monitoring\"\n },\n \"status2\": {\n  \"val\": 20,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"temp\": 86,\n \"tempUnits\": {\n  \"val\": 0,\n  \"name\": \"F\",\n  \"desc\": \"Fahrenheit\"\n },\n \"acidTankLevel\": 6,\n \"orpTankLevel\": 6,\n \"pHLevel\": 7.166,\n \"orpLevel\": 818.3,\n \"waterFlow\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"pHDosingTime\": 217,\n \"orpDosingTime\": 219,\n \"saturationIndex\": -0.034,\n \"equipmentType\": \"chemController\",\n \"alkalinity\": 40,\n \"body\": {\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"calciumHardness\": 710,\n \"cyanuricAcid\": 10,\n \"orpSetpoint\": 660,\n \"pHSetpoint\": 7.4\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "0cf30643-0759-462b-bd3b-51de10bff12a",
                    "name": "Return an individual chem controller object",
                    "request": {
                        "name": "Return an individual chem controller object",
                        "description": {
                            "content": "Return an individual chem controller object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "state",
                                "chemControllers",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "39fdd7aa-e191-4639-a220-0382dfc5cf68",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chemControllers",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"type\": \"array\",\n \"items\": {\n  \"$ref\": \"#/components/examples/stateChemController\"\n }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6e18f525-a30a-4dbe-8dcd-70daa3deea7b",
                    "name": "chlorinator",
                    "item": [
                        {
                            "id": "44b543b7-e63a-4815-9fbd-d3938402fac7",
                            "name": "Set attributes for a given chlorinator",
                            "request": {
                                "name": "Set attributes for a given chlorinator",
                                "description": {
                                    "content": "See /config/options/chlorinators for values that can be sent",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "e6771cf3-ae73-4323-9761-8c74ba4bc480",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "0f062b4e-d285-46a0-9d06-89f09faa46da",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "2b6fe08b-c248-4f18-a786-0e5e0a7c2ce7",
                            "name": "Return an individual chlorinator object",
                            "request": {
                                "name": "Return an individual chlorinator object",
                                "description": {
                                    "content": "Return an individual chlorinator object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        },
                                        {
                                            "description": {
                                                "content": "Id of the chlorinator",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "ba24f494-340d-4e2c-b9d5-907f57d8ed24",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "574a1f1e-4b6c-41d4-a019-08c6fce783d7",
                            "name": "Set attributes for a given chlorinator.  Duplicate of /state/chlorinator.",
                            "request": {
                                "name": "Set attributes for a given chlorinator.  Duplicate of /state/chlorinator.",
                                "description": {
                                    "content": "See /config/options/chlorinators for values that can be sent",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "setChlor"
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "41311615-3a8d-48cd-8259-afdc84356e51",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "setChlor"
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "34154f1c-083d-4890-8a27-4d0bf0599fdd",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "setChlor"
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"address\": \"<integer>\",\n    \"isActive\": \"<boolean>\",\n    \"body\": \"<integer>\",\n    \"spaSetpoint\": \"<integer>\",\n    \"poolSetpoint\": \"<integer>\",\n    \"superChlor\": \"<boolean>\",\n    \"superChlorHours\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"type\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "a2826628-81a9-4e5c-a4d3-202c8839561b",
                            "name": "Set super chlorinate true for a chlorinator.",
                            "request": {
                                "name": "Set super chlorinate true for a chlorinator.",
                                "description": {
                                    "content": "Set super chlorinate true for a chlorinator.  Will set superChlorHours to 24.  Attributes can be set via /state/setChlor.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "superChlorinate"
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "5c8933e1-5be3-4773-825a-521180f2c41b",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorinate"
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "fc889cc9-a6d9-4786-a6ab-7b1d3f15c7b3",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorinate"
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"superChlorinate\": \"<boolean>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "16f3dbad-bd94-4baa-84b8-1478c7989213",
                            "name": "Set super chlorinate hours for a chlorinator.",
                            "request": {
                                "name": "Set super chlorinate hours for a chlorinator.",
                                "description": {
                                    "content": "Set super chlorinate hours for a chlorinator.  Will set superChlor to true.\nAttributes can be set via /state/setChlor.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "superChlorHours"
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "758fa0ec-61ae-45fc-8068-2b5bc8530489",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorHours"
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "b709174d-0acd-4948-b506-4beb70743463",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "superChlorHours"
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"hour\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "8ae01096-85c6-4711-9eb0-b2f91e92f044",
                            "name": "Set pool Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                            "request": {
                                "name": "Set pool Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                                "description": {
                                    "content": "Set poolSetpoint for a chlorinator",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "poolSetpoint"
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "332b5244-d2b4-48f3-a36c-43cf9a5ba5f7",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "poolSetpoint"
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "16fa150d-cd30-42a4-907f-3e65ae36a23e",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "poolSetpoint"
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "ccbbafc4-a5d2-46d2-8801-7974db4bd401",
                            "name": "Set spa Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                            "request": {
                                "name": "Set spa Setpoint for a given chlorinator. This can be set with /state/chlorinator.",
                                "description": {
                                    "content": "Set spa Setpoint for a chlorinator",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "chlorinator",
                                        "spaSetpoint"
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "f4369a23-a8b6-4b1d-a36b-052eb5f84aad",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "spaSetpoint"
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"lastComm\": 1596147442405,\n \"currentOutput\": 2,\n \"saltLevel\": 2900,\n \"saltRequired\": 0,\n \"status\": {\n  \"val\": 0,\n  \"name\": \"ok\",\n  \"desc\": \"Ok\"\n },\n \"poolSetpoint\": 2,\n \"spaSetpoint\": 15,\n \"superChlor\": false,\n \"superChlorHours\": 0,\n \"name\": \"Intellichlor--40\",\n \"body\": {\n  \"val\": 32,\n  \"name\": \"poolspa\",\n  \"desc\": \"Pool/Spa\"\n },\n \"targetOutput\": 2,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"aquarite\",\n  \"desc\": \"Aquarite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "0a9aab2e-b558-488d-8d26-8accf35e1433",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "chlorinator",
                                                "spaSetpoint"
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "625f7da9-fee7-4b97-97ae-4a2c854bbd17",
                    "name": "circuit",
                    "item": [
                        {
                            "id": "df4365f1-27d8-4d2b-8b4a-9f1319a49aed",
                            "name": "Return an individual circuit object",
                            "request": {
                                "name": "Return an individual circuit object",
                                "description": {
                                    "content": "Return an individual circuit object",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        ":id",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        },
                                        {
                                            "description": {
                                                "content": "Id of the circuit",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "<integer>",
                                            "key": "id"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "id": "150bc99f-0e54-4816-8f83-46355e2efef3",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "<integer>",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "method": "GET",
                                        "body": {}
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "23098331-ebce-4fde-978f-b406aa6c9dc7",
                            "name": "Set options for a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a circuit in poolState.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "5a6f907a-c686-4c7c-8839-98baf8bdaa5c",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "7ab4a115-ff05-4434-b032-9aec8d7fe9ac",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "0fa00bb7-97dc-416a-ac45-37fae1555747",
                            "name": "Set options for a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a circuit in poolState.json",
                                "description": {
                                    "content": "To set circuit settings, send an object with the id and it will be toggled.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "toggleState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "24e7c3b7-a63a-4756-8a9a-4ae5fac04693",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "ad892ad4-2af9-44f6-9c95-2c81b576dc91",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "2ebae440-9e4e-4f53-bd11-73827e89e9ad",
                            "name": "Set options for a theme of a circuit in poolState.json",
                            "request": {
                                "name": "Set options for a theme of a circuit in poolState.json",
                                "description": {
                                    "content": "To set theme of a circuit settings, send an object with the id and theme.  Themes are found in /config/options/lightGroups.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setTheme",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "aa7e9ce4-abfb-493c-989e-b19f97abf235",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 193,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"circuit\",\n  \"desc\": \"Circuit\"\n },\n \"isOn\": true,\n \"equipmentType\": \"circuitGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaPUMP\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 200,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 2,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaCTRL\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 215,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 9,\n   \"circuit\": {\n    \"id\": 9,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa Low\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 75,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 10,\n   \"circuit\": {\n    \"id\": 10,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa High\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 73,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  }\n ]\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "1ef98db0-1cdc-4306-bb72-596e55b3037c",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"theme\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "46e7a74c-9473-4a5b-b7c8-27c926add540",
                            "name": "Set options for the dimmer levels of a circuit in poolState.json",
                            "request": {
                                "name": "Set options for the dimmer levels of a circuit in poolState.json",
                                "description": {
                                    "content": "To set dimmer level of a circuit settings, send an object with the id and level.  \n\n*EXPERIMENTAL* - Should work on IntelliCenter; needs testing on *Touch.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuit",
                                        "setDimmerLevel",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "481e8180-5d7c-4921-a61e-b5e9211c9555",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setDimmerLevel",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "b67fe845-3122-4b24-af7b-8ae6f6a1c804",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "circuit",
                                                "setDimmerLevel",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"level\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "b0a95d76-b876-4eae-a471-405690c7906f",
                    "name": "Return an individual pump object",
                    "request": {
                        "name": "Return an individual pump object",
                        "description": {
                            "content": "Return an individual pump object",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "state",
                                "pump",
                                ":id",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                },
                                {
                                    "description": {
                                        "content": "Id of the pump",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "<integer>",
                                    "key": "id"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "ddc2a222-5511-4221-9710-3e3003df15f9",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "pump",
                                        "<integer>",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 1,\n \"command\": 10,\n \"mode\": 0,\n \"driveState\": 0,\n \"watts\": 693,\n \"rpm\": 2250,\n \"flow\": 0,\n \"ppc\": 0,\n \"status\": {\n  \"name\": \"ok\",\n  \"desc\": \"Ok\",\n  \"val\": 1\n },\n \"time\": 929,\n \"type\": {\n  \"val\": 128,\n  \"name\": \"vs\",\n  \"desc\": \"Intelliflo VS\",\n  \"maxPrimingTime\": 6,\n  \"minSpeed\": 450,\n  \"maxSpeed\": 3450,\n  \"maxCircuits\": 8,\n  \"hasAddress\": true\n },\n \"name\": \"Pool\",\n \"equipmentType\": \"pump\",\n \"minSpeed\": 450,\n \"maxSpeed\": 3450,\n \"speedStepSize\": 10,\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 0,\n    \"equipmentType\": \"circuit\",\n    \"name\": \"Not Used\",\n    \"speed\": 0\n   },\n   \"speed\": 1830,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 4,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Cleaner\",\n    \"type\": {\n     \"val\": 5,\n     \"name\": \"mastercleaner\",\n     \"desc\": \"Master Cleaner\"\n    },\n    \"nameId\": 22,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 2460,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 3,\n   \"circuit\": {\n    \"id\": 11,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spillway\",\n    \"type\": {\n     \"val\": 14,\n     \"name\": \"spillway\",\n     \"desc\": \"Spillway\"\n    },\n    \"nameId\": 79,\n    \"equipmentType\": \"feature\"\n   },\n   \"speed\": 2500,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 4,\n   \"circuit\": {\n    \"id\": 6,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Pool\",\n    \"type\": {\n     \"val\": 2,\n     \"name\": \"pool\",\n     \"desc\": \"Pool\"\n    },\n    \"nameId\": 61,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 1800,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 5,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 72,\n    \"equipmentType\": \"circuit\"\n   },\n   \"speed\": 1750,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 6,\n   \"circuit\": {\n    \"id\": 128,\n    \"isOn\": true,\n    \"type\": {\n     \"val\": 128,\n     \"name\": \"solar\",\n     \"desc\": \"Solar\",\n     \"assignableToPumpCircuit\": true\n    },\n    \"name\": \"Solar\",\n    \"equipmentType\": \"virtualCircuit\"\n   },\n   \"speed\": 2250,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 7,\n   \"circuit\": {\n    \"id\": 131,\n    \"isOn\": false,\n    \"type\": {\n     \"val\": 131,\n     \"name\": \"spaHeater\",\n     \"desc\": \"Spa Heater\",\n     \"assignableToPumpCircuit\": true\n    },\n    \"name\": \"Spa Heater\",\n    \"equipmentType\": \"virtualCircuit\"\n   },\n   \"speed\": 2650,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  },\n  {\n   \"id\": 8,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Jets\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 46,\n    \"equipmentType\": \"feature\"\n   },\n   \"speed\": 3050,\n   \"units\": {\n    \"val\": 0,\n    \"name\": \"rpm\",\n    \"desc\": \"RPM\"\n   }\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "ccb8f71c-f299-4fc3-a32c-7b6135a4eb7a",
                    "name": "feature",
                    "item": [
                        {
                            "id": "a97bba55-b570-40b3-b937-b795a61622b4",
                            "name": "Set options for a feature in poolState.json",
                            "request": {
                                "name": "Set options for a feature in poolState.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "feature",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "7581ccec-b5a8-4eb2-96d6-9972d7d9de7e",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 11,\n \"showInFeatures\": true,\n \"isOn\": false,\n \"name\": \"Spillway\",\n \"type\": {\n  \"val\": 14,\n  \"name\": \"spillway\",\n  \"desc\": \"Spillway\"\n },\n \"nameId\": 79,\n \"equipmentType\": \"feature\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "aecc63c5-de0a-48d6-ac0c-edcab892a692",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "9d67f165-bc47-4fbc-aa0d-dfb67d2e2b9e",
                            "name": "Set options for a feature in poolState.json",
                            "request": {
                                "name": "Set options for a feature in poolState.json",
                                "description": {
                                    "content": "To set feature settings, send an object with the id and it will be toggled.",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "feature",
                                        "toggleState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "8662d447-63ea-430f-8853-5651ed76b301",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "d592f425-1106-4e5d-9e47-da2433ca729f",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "feature",
                                                "toggleState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6fc4fec1-0735-4d30-b94a-5184495af899",
                    "name": "Set options for a circuitgroup in poolState.json",
                    "request": {
                        "name": "Set options for a circuitgroup in poolState.json",
                        "description": {
                            "content": "To set circuitGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "state",
                                "circuitGroup",
                                "setState",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "3dac523c-7c81-4a59-8698-8d5c670c7116",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuitGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"id\": 193,\n \"name\": \"Spa\",\n \"nameId\": 72,\n \"type\": {\n  \"val\": 2,\n  \"name\": \"circuit\",\n  \"desc\": \"Circuit\"\n },\n \"isOn\": true,\n \"equipmentType\": \"circuitGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 1,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaPUMP\",\n    \"type\": {\n     \"val\": 1,\n     \"name\": \"spa\",\n     \"desc\": \"Spa\"\n    },\n    \"nameId\": 200,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 2,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"SpaCTRL\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 215,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 9,\n   \"circuit\": {\n    \"id\": 9,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa Low\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 75,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  },\n  {\n   \"id\": 10,\n   \"circuit\": {\n    \"id\": 10,\n    \"showInFeatures\": true,\n    \"isOn\": true,\n    \"name\": \"Spa High\",\n    \"type\": {\n     \"val\": 0,\n     \"name\": \"generic\",\n     \"desc\": \"Generic\"\n    },\n    \"nameId\": 73,\n    \"equipmentType\": \"circuit\"\n   },\n   \"desiredStateOn\": true\n  }\n ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a40ae202-a654-4860-bb47-54312feb29f7",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "circuitGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f113b1d5-3206-4568-bde1-a07070529cdc",
                    "name": "light Group",
                    "item": [
                        {
                            "id": "d4ed4948-2f63-4383-8451-8f497226d6f1",
                            "name": "Set options for a lightGroup in poolState.json",
                            "request": {
                                "name": "Set options for a lightGroup in poolState.json",
                                "description": {
                                    "content": "To set lightGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "lightGroup",
                                        "setState",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "f1e96dfe-b514-48bf-8380-fe803421c2a5",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"action\": {\n  \"val\": 0,\n  \"name\": \"ready\",\n  \"desc\": \"Ready\"\n },\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": {\n  \"val\": 3,\n  \"name\": \"intellibrite\",\n  \"desc\": \"IntelliBrite\"\n },\n \"equipmentType\": \"lightGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 15,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 74,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Entry Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 28,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  }\n ],\n \"lightingTheme\": {\n  \"val\": 196,\n  \"name\": \"white\",\n  \"desc\": \"White\",\n  \"type\": \"intellibrite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "6f89376d-ba86-4fa6-8a29-026530c19951",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setState",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "90fbf7a4-c219-4eaa-b0c9-fc7c8d836f08",
                            "name": "Set options for a lightGroup in poolState.json",
                            "request": {
                                "name": "Set options for a lightGroup in poolState.json",
                                "description": {
                                    "content": "To set lightGroup settings, send an object with the id and isOn.  isOn can take any thuthy value (true, \"true\", 1, yes, etc)",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "lightGroup",
                                        "setTheme",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "338418d7-7650-48d6-8d32-cdfd93e7066f",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 192,\n \"action\": {\n  \"val\": 0,\n  \"name\": \"ready\",\n  \"desc\": \"Ready\"\n },\n \"isActive\": true,\n \"name\": \"Intellibrite\",\n \"type\": {\n  \"val\": 3,\n  \"name\": \"intellibrite\",\n  \"desc\": \"IntelliBrite\"\n },\n \"equipmentType\": \"lightGroup\",\n \"circuits\": [\n  {\n   \"id\": 1,\n   \"circuit\": {\n    \"id\": 15,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Spa Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 74,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  },\n  {\n   \"id\": 2,\n   \"circuit\": {\n    \"id\": 16,\n    \"showInFeatures\": true,\n    \"isOn\": false,\n    \"name\": \"Entry Light\",\n    \"type\": {\n     \"val\": 16,\n     \"name\": \"intellibrite\",\n     \"desc\": \"Intellibrite\",\n     \"isLight\": true\n    },\n    \"nameId\": 28,\n    \"equipmentType\": \"circuit\"\n   },\n   \"position\": 1,\n   \"color\": 8,\n   \"swimDelay\": 0,\n   \"isActive\": true\n  }\n ],\n \"lightingTheme\": {\n  \"val\": 196,\n  \"name\": \"white\",\n  \"desc\": \"White\",\n  \"type\": \"intellibrite\"\n }\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "26d99420-633e-4717-9c44-79e8ce5cd75f",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                "setTheme",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"isOn\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "7f23ba0e-ddc4-4f2d-9371-5fd5aace1737",
                            "name": "{id}",
                            "item": [
                                {
                                    "id": "0978945b-8fe1-4065-9a45-3b7849c3ba51",
                                    "name": "Set lightGroup at specified Id to colorSync mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to colorSync mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to colorSync mode.",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSync",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of http,https)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server:port}}",
                                                    "key": "server:port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "313c1761-2f59-4f93-9a43-3c30c52ca9ec",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.  ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSync",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "f55a2eaf-4de9-4910-9129-9287e1d45f30",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSync",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "61ce9eee-31ac-4ec6-b3c8-337cd61d1572",
                                    "name": "Set lightGroup at specified Id to color mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to color mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to color mode.  Obtain valid colors from /config/options/lightGroups",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSet",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of http,https)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server:port}}",
                                                    "key": "server:port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "06692d24-ed76-40ee-945f-ccc9891ac983",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.      ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSet",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "8cf72179-2233-4608-943b-e4a95d5b0f81",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSet",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                },
                                {
                                    "id": "f3fb63ee-f4c1-4eda-9266-251f171414ec",
                                    "name": "Set lightGroup at specified Id to colorSwim mode",
                                    "request": {
                                        "name": "Set lightGroup at specified Id to colorSwim mode",
                                        "description": {
                                            "content": "Set lightGroup at specified Id to colorSwim mode. ",
                                            "type": "text/plain"
                                        },
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "lightGroup",
                                                ":id",
                                                "colorSwim",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": [
                                                {
                                                    "description": {
                                                        "content": " (This can only be one of http,https)",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{protocol}}",
                                                    "key": "protocol"
                                                },
                                                {
                                                    "description": {
                                                        "content": "",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "{{server:port}}",
                                                    "key": "server:port"
                                                },
                                                {
                                                    "description": {
                                                        "content": "id of the body",
                                                        "type": "text/plain"
                                                    },
                                                    "type": "any",
                                                    "value": "<integer>",
                                                    "key": "id"
                                                }
                                            ]
                                        },
                                        "method": "PUT",
                                        "auth": {
                                            "type": "noauth"
                                        }
                                    },
                                    "response": [
                                        {
                                            "id": "c8e2dacc-622b-4ffa-b891-7ae030ad3d88",
                                            "name": "Success.  Returned object will contain an `action` object with name/val/desc properties.  Any value other than 0 (\"ready\") means the njsPC is counting down a 20s timer for the lights to finish sequencing.  Once they are done, a second emit with 'lightGroup' will return the action to ready state.      ",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSwim",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "OK",
                                            "code": 200,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"id\": 1,\n \"action\": {\n  \"val\": 1,\n  \"name\": \"sync\",\n  \"desc\": \"Synchronizing\"\n },\n \"equipmentType\": \"lightGroup\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        },
                                        {
                                            "id": "3c5085a9-73ea-4b38-af95-77b0f6e85972",
                                            "name": "400 or 500 return codes (See Schema)",
                                            "originalRequest": {
                                                "url": {
                                                    "protocol": "{{protocol}}",
                                                    "port": "port}}",
                                                    "path": [
                                                        "",
                                                        "state",
                                                        "lightGroup",
                                                        "<integer>",
                                                        "colorSwim",
                                                        ""
                                                    ],
                                                    "host": [
                                                        "{{server"
                                                    ],
                                                    "query": [],
                                                    "variable": []
                                                },
                                                "method": "PUT",
                                                "body": {}
                                            },
                                            "status": "Internal Server Error",
                                            "code": 500,
                                            "header": [
                                                {
                                                    "key": "Content-Type",
                                                    "value": "application/json"
                                                }
                                            ],
                                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                            "cookie": [],
                                            "_postman_previewlanguage": "json"
                                        }
                                    ],
                                    "event": []
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "cf3521ae-9733-4b62-8c82-a2f655626ce4",
                    "name": "Manually input temperatures.  This is only for virtual/standalone controllers.  Values will be overwritten by any OCP",
                    "request": {
                        "name": "Manually input temperatures.  This is only for virtual/standalone controllers.  Values will be overwritten by any OCP",
                        "description": {
                            "content": "To adjust the temperature, send an object with the current temp.  If there is an offset stored in sys.general.options it will be applied to the input temperature.  (`air` or `solar` can bu used in place of airSensor1/solarSensor1.)",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "state",
                                "temps",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                        }
                    },
                    "response": [
                        {
                            "id": "fc6c3975-fe2f-4f82-801d-8b737e53df01",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "temps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"units\": {\n  \"val\": 0,\n  \"name\": \"F\",\n  \"desc\": \"Fahrenheit\"\n },\n \"waterSensor1\": 80,\n \"bodies\": [\n  {\n   \"id\": 1,\n   \"heatMode\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"setPoint\": 92,\n   \"temp\": 80,\n   \"isOn\": true,\n   \"name\": \"Pool\",\n   \"circuit\": 6,\n   \"heatStatus\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"heaterOptions\": {\n    \"total\": 2,\n    \"gas\": 1,\n    \"solar\": 1,\n    \"heatpump\": 0,\n    \"ultratemp\": 0,\n    \"hybrid\": 0\n   }\n  },\n  {\n   \"id\": 2,\n   \"isOn\": false,\n   \"heatMode\": {\n    \"val\": 1,\n    \"name\": \"heater\",\n    \"desc\": \"Heater\"\n   },\n   \"name\": \"Spa\",\n   \"circuit\": 1,\n   \"heatStatus\": {\n    \"val\": 0,\n    \"name\": \"off\",\n    \"desc\": \"Off\"\n   },\n   \"heaterOptions\": {\n    \"total\": 2,\n    \"gas\": 1,\n    \"solar\": 1,\n    \"heatpump\": 0,\n    \"ultratemp\": 0,\n    \"hybrid\": 0\n   },\n   \"setPoint\": 99\n  }\n ],\n \"air\": 64,\n \"solar\": 99,\n \"equipmentType\": \"temps\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b8ab75bb-5913-442d-a093-83350021f8b0",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "temps",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"airSensor1\": \"<integer>\",\n    \"temp\": \"<integer>\"\n}"
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d82443c5-dad4-4c58-bc30-0b386cd0cb20",
                    "name": "body",
                    "item": [
                        {
                            "id": "d6d7dd81-8ba2-4d79-b354-4118c91c9b0d",
                            "name": "Set heat mode for a body in poolState.json",
                            "request": {
                                "name": "Set heat mode for a body in poolState.json",
                                "description": {
                                    "content": "To set heat mode of a body, send an object with the id and mode.  `mode` can be a numeric value or string value as referenced in /config/options/heaters.  ",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "body",
                                        "heatMode",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "1e0d9b3b-9f41-4e38-8451-d0b70eb75205",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "heatMode",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 6,\n \"showInFeatures\": true,\n \"isOn\": true,\n \"name\": \"Pool\",\n \"type\": {\n  \"val\": 2,\n  \"name\": \"pool\",\n  \"desc\": \"Pool\"\n },\n \"nameId\": 61,\n \"equipmentType\": \"circuit\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "2b670531-8cec-4797-a777-6b30d725f6d8",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "heatMode",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"body\": \"<integer>\",\n    \"mode\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        },
                        {
                            "id": "c08af272-db88-4c7c-9b5e-f3236195d767",
                            "name": "Set temp for a body in poolState.json",
                            "request": {
                                "name": "Set temp for a body in poolState.json",
                                "description": {
                                    "content": "To set temp of a body, send an object with the id and identifier for the body (name, id or circuit).  See schema example. ",
                                    "type": "text/plain"
                                },
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "body",
                                        "setPoint",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": {
                                                "content": " (This can only be one of http,https)",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{protocol}}",
                                            "key": "protocol"
                                        },
                                        {
                                            "description": {
                                                "content": "",
                                                "type": "text/plain"
                                            },
                                            "type": "any",
                                            "value": "{{server:port}}",
                                            "key": "server:port"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "method": "PUT",
                                "auth": {
                                    "type": "noauth"
                                },
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                }
                            },
                            "response": [
                                {
                                    "id": "a1e2d52d-aa17-4f47-ba56-c35b3f961afc",
                                    "name": "Success",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "setPoint",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"id\": 1,\n \"heatMode\": {\n  \"val\": 0,\n  \"name\": \"off\",\n  \"desc\": \"Off\"\n },\n \"name\": \"Pool\",\n \"circuit\": 6,\n \"heatStatus\": {\n  \"val\": 0,\n  \"name\": \"off\",\n  \"desc\": \"Off\"\n },\n \"isOn\": false,\n \"setPoint\": 89\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                },
                                {
                                    "id": "923b4840-41e6-42d2-92f6-5ab3c449150b",
                                    "name": "400 or 500 return codes (See Schema)",
                                    "originalRequest": {
                                        "url": {
                                            "protocol": "{{protocol}}",
                                            "port": "port}}",
                                            "path": [
                                                "",
                                                "state",
                                                "body",
                                                "setPoint",
                                                ""
                                            ],
                                            "host": [
                                                "{{server"
                                            ],
                                            "query": [],
                                            "variable": []
                                        },
                                        "header": [
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "method": "PUT",
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\n    \"id\": \"<integer>\",\n    \"setPoint\": \"<integer>\"\n}"
                                        }
                                    },
                                    "status": "Internal Server Error",
                                    "code": 500,
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json"
                                        }
                                    ],
                                    "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                                    "cookie": [],
                                    "_postman_previewlanguage": "json"
                                }
                            ],
                            "event": []
                        }
                    ],
                    "event": []
                },
                {
                    "id": "2ae88de9-9487-4239-b541-e75605abb663",
                    "name": "Cancel all delays on OCP",
                    "request": {
                        "name": "Cancel all delays on OCP",
                        "description": {
                            "content": "Cancel all delays on OCP",
                            "type": "text/plain"
                        },
                        "url": {
                            "protocol": "{{protocol}}",
                            "port": "port}}",
                            "path": [
                                "",
                                "state",
                                "cancelDelay",
                                ""
                            ],
                            "host": [
                                "{{server"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": {
                                        "content": " (This can only be one of http,https)",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{protocol}}",
                                    "key": "protocol"
                                },
                                {
                                    "description": {
                                        "content": "",
                                        "type": "text/plain"
                                    },
                                    "type": "any",
                                    "value": "{{server:port}}",
                                    "key": "server:port"
                                }
                            ]
                        },
                        "method": "PUT",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "id": "464040f5-3f89-439a-a001-6a5a6d038b85",
                            "name": "OK",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "cancelDelay",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "78adebef-6a8f-4064-959c-973cf1ffb180",
                            "name": "400 or 500 return codes (See Schema)",
                            "originalRequest": {
                                "url": {
                                    "protocol": "{{protocol}}",
                                    "port": "port}}",
                                    "path": [
                                        "",
                                        "state",
                                        "cancelDelay",
                                        ""
                                    ],
                                    "host": [
                                        "{{server"
                                    ],
                                    "query": [],
                                    "variable": []
                                },
                                "method": "PUT",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n \"stack\": \"<string>\",\n \"message\": \"<string>\",\n \"code\": \"<integer>\",\n \"httpCode\": \"<integer>\",\n \"position\": {\n  \"column\": \"<integer>\",\n  \"line\": \"<integer>\",\n  \"dir\": \"<string>\",\n  \"file\": \"<string>\"\n },\n \"name\": \"<string>\",\n \"equipmentType\": \"<string>\",\n \"level\": \"<string>\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        }
    ],
    "event": [],
    "variable": [
        {
            "id": "protocol",
            "description": {
                "content": "undefined (is one of http,https)",
                "type": "text/plain"
            },
            "type": "any",
            "value": "http"
        },
        {
            "id": "server:port",
            "description": {
                "content": "undefined",
                "type": "text/plain"
            },
            "type": "any",
            "value": "server:4200"
        },
        {
            "id": "baseUrl",
            "type": "string",
            "value": "{{protocol}}://{{server:port}}/"
        }
    ],
    "info": {
        "_postman_id": "71f08b76-7232-49dd-b0f0-4050c0051815",
        "name": "nodejs-poolController API",
        "version": {
            "raw": "6.0.0",
            "major": 6,
            "minor": 0,
            "patch": 0,
            "prerelease": [],
            "build": [],
            "string": "6.0.0"
        },
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": {
            "content": "API's to access, manage and control your pool equipment.  You can find the main project at [nodejs-poolController](https://github.com/tagyoureit/nodejs-poolController/).\nThe data structures are defined in the main app's [wiki](https://github.com/tagyoureit/nodejs-poolController/wiki/Version-6-Data-Structures).\n\nThese api's are `live` in the sense that you can execute any of them against your local nodejs-poolController app.  However, if you are viewing this API documentation via a github.io page you likely won't be able to access your local install.\n\nTo execute these locally, you can do one of the following: ",
            "type": "text/plain"
        }
    }
}