openapi: 3.0.2
info:
  title: nodejs-poolController API
  description: |-
    API's to access, manage and control your pool equipment.  You can find the main project at [nodejs-poolController](https://github.com/tagyoureit/nodejs-poolController/).
    The data structures are defined in the main app's [wiki](https://github.com/tagyoureit/nodejs-poolController/wiki/Version-6-Data-Structures).

  version: 6.0.0

servers:
  - url: "{protocol}://localhost:4200"
    description: Local Server
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
  - url: "{protocol}://raspberrypi.local:4200"
    description: Default RasPi server name
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
  - url: "{protocol}://{server:port}/"
    description: Type in your server address
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      server:port:
        default: "server:4200"
tags:
  - name: state
    description: Any endpoints that relate to the current state of your pool
  - name: config
    description: Any endpoints that relate to the configuration of your pool
  - name: circuits
    description: API endpoints for operating on all circuits
  - name: features
    description: API endpoints for features
  - name: circuit groups
    description: API endpoints for circuit groups
  - name: light groups
    description: API endpoints for light groups
  - name: chlorinators
    description: API endpoints for chlorinators
  - name: chem controllers
    description: API endpoints for chemical controllers
paths:
  /state/all/:
    get:
      summary: Return all sections for the current state of the pool
      description: Retrieve a JSON object of all sections
      tags:
        - state
      responses:
        "200":
          description: JSON Object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configCircuit"
  /config/circuits/:
    get:
      summary: Get an array of all circuit objects with config data
      description: Array of circuit config objects
      tags:
        - config
        - circuits
      responses:
        "200":
          description: Circuit config array
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configCircuits"

  /config/body/{id}/heatModes/:
    get:
      summary: |-
        Get heat modes for the body specified by the id
        This endpoint is going away.  Use heatModes in /config/options/heatModes instead.
      description: "Get heat modes for the body specified by the id"
      tags:
        - config
      deprecated: true
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: id of the body
      responses:
        "200":
          description: Array of heat mode objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/valNameDescArr"
  /config/circuit/names/:
    get:
      summary: |-
        Get all available names (built-in and custom).  (*Touch only)
        This endpoint will be going away.  Please use the equipmentNames object 
        in /config/options/circuits or /config/options/features instead.
      description: "Get all available names (built-in and custom).  (*Touch only)"
      deprecated: true
      tags:
        - config
        - circuits
        - equipment names
      responses:
        "200":
          description: Array of name objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/valNameDescArr"
              example:
                [
                {
                "val": 1,
                "name": "aerator",
                "desc": "Aerator"
                },
                {
                "val": 2,
                "name": "airblower",
                "desc": "Air Blower"
                },
                {
                "val": 3,
                "name": "aux1",
                "desc": "AUX 1"
                }]

  /config/circuit/references/:
    get:
      summary: Get an array of objects that can include circuits, features, groups, virtual circuits.
      description: |-
        Get an array of objects that can include circuits, features, groups, virtual circuits.  Any parameter not
        included will be included (must specify false to exclude values)      
      tags:
        - config
        - circuit
      parameters:
        - in: query
          name: circuits
          required: false
          schema:
            type: boolean
          description: Include/exclude circuitss in the references object
        - in: query
          name: features
          required: false
          schema:
            type: boolean
          description: Include/exclude features in the references object
        - in: query
          name: groups
          required: false
          schema:
            type: boolean
          description: Include/exclude groupss in the references object
        - in: query
          name: virtual
          required: false
          schema:
            type: boolean
          description: Include/exclude virtuals in the references object
      responses:
        "200":
          description: Array of circuits/features/groups/virtual circuit objects.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configCircuits"
              example:
                [
                  {
                  "id": 11,
                  "name": "Spillway",
                  "type": 14,
                  "equipmentType": "feature",
                  "nameId": 79
                  },
                  {
                  "id": 12,
                  "name": "Waterfall 1",
                  "type": 0,
                  "equipmentType": "feature",
                  "nameId": 87
                  }]
  /config/options/general/:
    get:
      summary: Get all available options needed to configure general options
      description: "Retrieves: countries, tempUnits, timeZones, clockSources, clockModes, pool, sensors"
      tags:
        - config
        - general
      responses:
        "200":
          description: Object containing all available general options for the pool type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configOptionsGeneral"
  /config/options/circuits/:
    get:
      summary: Get all available options to set circuits
      description: "Returns: maxCircuits, invalidIds, equipmentIds, equipmentNames, functions, circuits"
      tags:
        - config
        - options
        - circuits
      responses:
        "200":
          description: Object containing all available general options for the circuits
          content:
            application/json:
              schema:
                type: object
                properties:
                  invalidIds:
                    type: array
                    items:
                      type: integer
                  equipmentIds:
                    type: object
                    properties:
                      start:
                        type: integer
                      stop:
                        type: integer
                  equipmentNames:
                    $ref: "#/components/schemas/valNameDescArr"
                  functions:
                    $ref: "#/components/schemas/valNameDescArr"
                  circuits:
                    $ref: "#/components/schemas/configCircuits"
                  maxCircuits:
                    type: integer
  /config/options/circuitGroups/:
    get:
      summary: Get all options needed to set circuit groups
      description: "Get all options needed to set circuit groups"
      tags:
        - config
        - options
        - circuit groups
      responses:
        "200":
          description: Object containing all available general options for the circuit groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  equipmentNames:
                    $ref: "#/components/schemas/valNameDescArr"
                  circuits:
                    $ref: "#/components/schemas/configCircuits"
                  circuitGroups:
                    $ref:  "#/components/schemas/configCircuitGroups"
                  maxCircuitGroups:
                    type: integer
  /config/options/lightGroups/:
    get:
      summary: Get all available options to set lightGroups
      description: "Returns: maxLightGroups, invalidIds, equipmentIds, equipmentNames, functions, features"
      tags:
        - config
        - options
        - light groups
      responses:
        "200":
          description: Object containing all available general options for the light groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  invalidIds:
                    type: array
                    items:
                      type: integer
                    example: [10, 19]
                  equipmentIds:
                    type: object
                    properties:
                      start:
                        type: integer
                        example: 192
                      stop:
                        type: integer
                        example: 194
                  equipmentNames:
                    $ref: "#/components/schemas/valNameDescArr"
                  themes:
                    allOf:
                      - $ref: "#/components/schemas/valNameDescTypeArr"
                      - type: string
                        enum: ['intellibrite', 'magicstream', null]
                  colors:
                    $ref: "#/components/schemas/valNameDescArr"
                  circuits:
                    $ref: "#/components/schemas/configCircuits"
                  lightGroups:
                    $ref: "#/components/schemas/configLightGroups"
                  maxFeatures:
                    type: integer
              examples:
                lightGroup:
                  $ref: "#/components/examples/configOptionsLightGroups"
  /config/options/features/:
    get:
      summary: Get all available options to set features
      description: "Returns: maxCircuitGroups, equipmentNames, circuits, circuitGroups"
      tags:
        - config
        - options
        - features
      responses:
        "200":
          description: Object containing all available general options for the circuit groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  invalidIds:
                    type: array
                    items:
                      type: integer
                  equipmentIds:
                    type: object
                    properties:
                      start:
                        type: integer
                      stop:
                        type: integer
                  equipmentNames:
                    $ref: "#/components/schemas/valNameDescArr"
                  functions:
                    $ref: "#/components/schemas/valNameDescArr"
                  features:
                    $ref: "#/components/schemas/configFeatures"
                  maxFeatures:
                    type: integer
  /config/options/bodies/:
    get:
      summary: Get all available options to set bodies
      description: "Returns: maxBodies, bodyTypes, bodies"
      tags:
        - config
        - options
        - bodies
      responses:
        "200":
          description: Object containing all available general options for the bodies
          content:
            application/json:
              schema:
                type: object
                properties:
                  bodyTypes:
                    $ref: "#/components/schemas/valNameDescArr"
                  bodies:
                    $ref: "#/components/schemas/configBodies"
                  maxBodies:
                    type: integer
  /config/options/valves/:
    get:
      summary: Get all available options to set valves
      description: "Returns: maxValves, valveTypes, circuits, valves"
      tags:
        - config
        - options
        - valves
      responses:
        "200":
          description: Object containing all available general options for the valves
          content:
            application/json:
              schema:
                type: object
                properties:
                  valveTypes:
                    $ref: "#/components/schemas/valNameDescArr"
                  circuits:
                    $ref: "#/components/schemas/configCircuits"
                  valves:
                    $ref: "#/components/schemas/configValves"
                  maxValves:
                    type: integer
  /config/options/pumps/:
    get:
      summary: Get all available options to set pumps
      description: "Returns: maxPumps, pumpUnits, pumpTypes, models, circuits, bodies, pumps"
      tags:
        - config
        - pumps
        - options
      responses:
        "200":
          description: Object containing all available general options for the pumps
          content:
            application/json:
              schema:
                type: object
                properties:
                  pumpUnits:
                    $ref: "#/components/schemas/valNameDescArr"
                  pumpTypes:
                    allOf:
                     - $ref: "#/components/schemas/valNameDescObj"
                     - type: object
                       properties:
                          maxCircuits: 
                            type: integer
                          hasAddress:
                            type: boolean
                          hasBody:
                            type: boolean
                  models:
                    $ref: "#/components/schemas/configPumpModels"
                  circuits:
                    $ref: "#/components/schemas/configCircuits"
                  bodies:
                    $ref: "#/components/schemas/configBodies"
                  pumps:
                    $ref: "#/components/schemas/configPumps"
                  maxPumps:
                    type: integer
  /app/options/logger/:
    get:
      summary: Get all available options to set logger
      description: "Returns: app logger"
      tags:
        - app
        - logger
        - options
      responses:
        "200":
          description: Object containing all available options for the logger
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configLogger"
              example:
                      {
                      "logger": {
                      "packet": {
                      "enabled": true,
                      "logToConsole": false,
                      "logToFile": false,
                      "filename": "packetLog",
                      "invalid": true,
                      "broadcast": {
                      "enabled": false,
                      "includeActions": [],
                      "includeSource": [],
                      "includeDest": [],
                      "excludeActions": [],
                      "excludeSource": [],
                      "excludeDest": []
                      },
                      "pump": {
                      "enabled": false,
                      "includeActions": [],
                      "includeSource": [],
                      "includeDest": [],
                      "excludeActions": [],
                      "excludeSource": [],
                      "excludeDest": []
                      },
                      "chlorinator": {
                      "enabled": false,
                      "includeSource": [],
                      "includeDest": [],
                      "excludeSource": [],
                      "excludeDest": []
                      },
                      "intellichem": {
                      "enabled": true,
                      "includeActions": [],
                      "exclueActions": [],
                      "includeSource": [],
                      "includeDest": [],
                      "excludeSource": [],
                      "excludeDest": []
                      },
                      "intellivalve": {
                      "enabled": true,
                      "includeActions": [],
                      "exclueActions": [],
                      "includeSource": [],
                      "includeDest": [],
                      "excludeSource": [],
                      "excludeDest": []
                      },
                      "unidentified": {
                      "enabled": true,
                      "includeSource": [],
                      "includeDest": [],
                      "excludeSource": [],
                      "excludeDest": []
                      },
                      "unknown": {
                      "enabled": true,
                      "includeSource": [],
                      "includeDest": [],
                      "excludeSource": [],
                      "excludeDest": []
                      }
                      },
                      "app": {
                      "enabled": true,
                      "level": "debug",
                      "captureForReplay": false
                      }
                      }
                      }    

  /config/options/schedules/:
    get:
      summary: Get all available options to set schedules
      description: "Returns: maxSchedules, tempUnits, scheduleTimeTypes, schedules, scheduleTypes, scheduleDays,"
      tags:
        - config
        - options
        - schedules
      responses:
        "200":
          description: Object containing all available general options for the schedules
          content:
            application/json:
              schema:
                type: object
                properties:
                  tempUnits:
                    $ref: "#/components/schemas/valNameDescObj"
                  scheduleTimeTypes:
                    $ref: "#/components/schemas/valNameDescArr"
                  scheduleTypes:
                    $ref: "#/components/schemas/configScheduleTypesArr"
                  scheduleDays:
                    $ref: "#/components/schemas/configScheduleDaysArr"
                  heatSources:
                    $ref: "#/components/schemas/valNameDescArr"
                  circuits:
                    $ref: "#/components/schemas/configCircuits"
                  schedules:
                    $ref: "#/components/schemas/configSchedules"
                  maxSchedules:
                    type: integer
                  clockMode:
                    type: integer
                    enum: [12, 24]

  /config/options/heaters/:
    get:
      summary: Get all available options to set heaters
      description: "Returns: maxHeaters, heaters, heaterTypes, heatModes"
      tags:
        - config
        - options
        - heaters
      responses:
        "200":
          description: Object containing all available general options for the heaters
          content:
            application/json:
              schema:
                type: object
                properties:
                  heatModes:
                    $ref: "#/components/schemas/valNameDescArr"
                  heaterTypes:
                    $ref: "#/components/schemas/valNameDescArr"
                  heaters:
                    $ref: "#/components/schemas/configHeaters"
                  maxHeaters:
                    type: integer
  /config/options/customNames/:
    get:
      summary: Get a list of custom names (*Touch only)
      description: "Returns: customNames, maxCustomNames. (*Touch only)"
      tags:
        - config
        - options
        - custom names
      operationId: getCustomNames
      responses:
        "200":
          description: Object with maxCustomNames and customNames
          content:
            application/json:
              schema:
                type: object
                properties:
                  customNames:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                  maxCustomNames:
                    type: integer
              example:
                {
                "maxCustomNames": 10,
                "customNames": [
                {
                "id": 0,
                "name": "WtrFall 1"
                },
                {
                "id": 1,
                "name": "WtrFall 1.5"
                },
                {
                "id": 2,
                "name": "WtrFall 2"
                },
                {
                "id": 3,
                "name": "WtrFall 3"
                },
                {
                "id": 4,
                "name": "Pool High"
                },
                {
                "id": 5,
                "name": "Pool LtDeep"
                },
                {
                "id": 8,
                "name": "USERNAME-09"
                },
                {
                "id": 9,
                "name": "USERNAME-aa"
                },
                {
                "id": 6,
                "name": "Pool LtShlw"
                },
                {
                "id": 7,
                "name": "USERNAME-08"
                }
                ]
                }
  /config/options/chemControllers/:
    get:
      summary: Get all available options to set chem controllers
      description: "Returns: types, bodies, tempUnits, status, status1, status2, waterflow, controllers, maxChemControllers"
      tags:
        - config
        - options
        - chem controllers
      responses:
        "200":
          description: Object containing all available general options for the chlorinators
          content:
            application/json:
              schema:
                type: object
                properties:
                  types:
                    $ref: "#/components/schemas/valNameDescArr"
                  bodies:
                    $ref: "#/components/schemas/valNameDescArr"
                  tempUnits:
                    $ref: "#/components/schemas/valNameDescArr"
                  status:
                    $ref: "#/components/schemas/valNameDescArr"
                  status1:
                    $ref: "#/components/schemas/valNameDescArr"
                  status2:
                    $ref: "#/components/schemas/valNameDescArr"
                  waterFlow:
                    $ref: "#/components/schemas/valNameDescArr"
                  controllers:
                    $ref: "#/components/schemas/configChemControllers"
                  maxChemControllers:
                    type: integer

  /config/options/chlorinators/:
    get:
      summary: Get all available options to set chlorinators
      description: "Returns: types, bodies, chlorinators, maxChlorinators"
      tags:
        - config
        - options
        - chlorinators
      responses:
        "200":
          description: Object containing all available general options for the chlorinators
          content:
            application/json:
              schema:
                type: object
                properties:
                  types:
                    $ref: "#/components/schemas/valNameDescArr"
                  bodies:
                    $ref: "#/components/schemas/valNameDescArr"
                  chlorinators:
                    $ref: "#/components/schemas/configChlorinators"
                  maxChlorinators:
                    type: integer
  /config/general/:
    put:
      summary: Set options related to the "Pool" section in poolConfig.json.
      description: "To set general settings, send an object with the value you want to change from /config/options/general."
      tags:
        - config
        - pool
        - general
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              anyOf:
              - $ref: '#/components/schemas/configGeneralOptions'
              - $ref: '#/components/schemas/configGeneralLocation'
              - $ref: '#/components/schemas/configGeneralOwner'
              - type: object
                properties:
                  alias:
                    type: string
              example: {
                  "options": {
                      "clockMode": 24,
                      "clockSource": "server",
                      "adjustDST": true
                  },
                  "location": {
                      "timeZone": 131
                  },
                  "owner": {
                      "name": "Pool Boy"
                  }
              }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/configGeneralOptions"
                  - $ref: "#/components/schemas/configGeneralLocation"
                  - $ref: "#/components/schemas/configGeneralOwner"
                  - type: object
                    properties:  
                      alias:  
                        type: string
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/valve/:
    put:
      summary: Set options related to the "Valve" section in poolConfig.json
      description: "To set valve settings, send an object with the values you want to change from /config/options/general."
      tags:
        - config
        - valves
      requestBody:
        description: Create/Update a valve
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configValve'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configValve"
              example: {
                "id": 1,
                "circuit": 128,
                "isActive": true,
                "name": "Solar",
                "type": 0,
                "isReturn": false,
                "isIntake": false
                }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/body/:
    put:
      summary: Set options related to the "Body" section in poolConfig.json
      description: "To set body settings, send an object with the values you want to change from /config/options/bodies."
      tags:
        - config
        - body
      requestBody:
        description: Create/Update a body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBody'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configBody"
              example: {
                "id": 2,
                "name": "Spa",
                "type": 0,
                "isActive": true,
                "heatMode": 3,
                "circuit": 1,
                "setPoint": 95
                }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/circuit/:
    put:
      summary: Set options related to the "Circuit" section in poolConfig.json
      description: "To set circuit settings, send an object with the values you want to change from /config/options/bodies."
      tags:
        - config
        - circuit
      requestBody:
        description: Create/Update a circuit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configCircuit'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configCircuit"
              example: {
                "id": 1,
                "name": "Spa",
                "nameId": 72,
                "type": 1,
                "isActive": true,
                "freeze": false,
                "showInFeatures": true,
                "eggTimer": 0
                }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a circuit at the specified id
      description: "Delete a circuit at the specified id"
      tags:
        - config
        - circuits
      responses:
        "200":
          description: Success
          content:  
            application/json:
              example: {
                "id": 19,
                "isActive": false
                }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/feature/:
    put:
      summary: Set options related to the "Circuit" section in poolConfig.json
      description: "To set feature settings, send an object with the values you want to change from /config/options/circuits."
      tags:
        - config
        - feature
      requestBody:
        description: Create/Update a feature
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configFeature'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configFeature"
              example: {
                "id": 12,
                "name": "Waterfall 1",
                "nameId": 87,
                "type": 0,
                "isActive": true,
                "freeze": false,
                "showInFeatures": true,
                "eggTimer": 420,
                "macro": false
                }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a feature at the specified id
      description: "Delete a feature at the specified id"
      tags:
        - config
        - features
      responses:
        "200":
          description: Success
          content:  
            application/json:
              example: {
                "id": 19,
                "isActive": false
                }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/circuitGroup/:
    put:
      summary: Set options related to the "Circuit Groups" section in poolConfig.json
      description: "To set feature settings, send an object with the values you want to change from /config/options/circuitGroups."
      tags:
        - config
        - feature
      requestBody:
        description: Create/Update a circuitGroup
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configCircuitGroup'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configCircuitGroup"
              example: {"Need Example"}
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a circuit group at the specified id
      description: "Delete a circuit group at the specified id"
      tags:
        - config
        - circuit groups
      responses:
        "200":
          description: Success
          content:  
            application/json:
              example: {
                "id": 19,
                "isActive": false
                }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/lightGroup/:
    put:
      summary: Set options related to the "lightGroups" section in poolConfig.json
      description: |-
        To set feature settings, send an object with the values you want to change from /config/options/lightGroups.
        
        *NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, 
        send an empty array `[]`.
      tags:
        - config
        - light groups
      requestBody:
        description: Create/Update a light group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLightGroup'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configLightGroup"
              example: {
                  "id": 192,
                  "circuits": [
                  {
                  "id": 1,
                  "circuit": 2,
                  "position": 2,
                  "color": 6,
                  "swimDelay": 0,
                  "isActive": true
                  },
                  {
                  "id": 2,
                  "circuit": 7,
                  "position": 2,
                  "color": 14,
                  "swimDelay": 2,
                  "isActive": true
                  },
                  {
                  "id": 3,
                  "circuit": 8,
                  "position": 3,
                  "color": 2,
                  "swimDelay": 4,
                  "isActive": true
                  }
                  ],
                  "isActive": true,
                  "name": "Intellibrite",
                  "type": 3,
                  "lightingTheme": 195
                  }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a light group at the specified id
      description: "Delete a light group at the specified id"
      tags:
        - config
        - light groups
      responses:
        "200":
          description: Success
          content:  
            application/json:
              example: {
                "id": 192,
                "isActive": false
                }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/pump/:
    put:
      summary: Set options related to the "pumps" section in poolConfig.json
      description: |-
        To set schedule settings, send an object with the values you want to change from /config/options/pumps.

        *NOTE:* Circuits can be omitted, but if you include them ALL circuits must be sent.  To delete all circuits, 
        send an empty array `[]`.
      tags:
        - config
        - pumps
      requestBody:
        description: Create/Update a pump
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPump'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configPump"
              example: {
                    "id": 1,
                    "type": 128,
                    "address": 96,
                    "isActive": true,
                    "model": 0,
                    "circuits": [
                    {
                    "id": 1,
                    "circuit": 255,
                    "speed": 1830,
                    "units": 0
                    },
                    {
                    "id": 2,
                    "circuit": 4,
                    "speed": 2460,
                    "units": 0
                    }
                    ],
                    "primingSpeed": 3000,
                    "primingTime": 1,
                    "minSpeed": 450,
                    "maxSpeed": 3450,
                    "speedStepSize": 10,
                    "name": "Pool"
                    }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a pump at the specified id
      description: "Delete a pump at the specified id"
      tags:
        - config
        - pumps
      responses:
        "200":
          description: Success
          content:  
            application/json:
              example: {
                "id": 19,
                "isActive": false
                }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/customNames/:
    put:
      summary: Set custom names on OCP (*Touch only)
      description: "Set custom names on OCP (*Touch only)"
      tags:
        - config
        - custom names
      requestBody:
        description: Create/Update a custom name
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
            example:
              [
                {
                "id": 0,
                "name": "WtrFall 1"
                },
                {
                "id": 1,
                "name": "WtrFall 1.5"
                },
                {
                "id": 2,
                "name": "WtrFall 2"
                },
                {
                "id": 3,
                "name": "WtrFall 3"
                },
                {
                "id": 4,
                "name": "Pool High"
                },
                {
                "id": 5,
                "name": "Pool LtDeep"
                },
                {
                "id": 8,
                "name": "USERNAME-09"
                },
                {
                "id": 9,
                "name": "USERNAME-aa"
                },
                {
                "id": 6,
                "name": "Pool LtShlw"
                },
                {
                "id": 7,
                "name": "USERNAME-08"
                }
                ]

      responses:
        "200":
          description: Object with custom name
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
          links:
            GetCustomNameLink:
              description: >
                The `id` value returned by /config/options/customNames can be used
                as the `id` value when setting the custom name.
              operationId: getCustomNames
              parameters:
                id: "$response.body#/id"
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/customName/:
    put:
      summary: Set a single custom names on OCP (*Touch only)
      description: "Set a single custom names on OCP (*Touch only)"
      tags:
        - config
        - custom names
      requestBody:
        description: Create/Update a custom name
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
            example:

                {
                "id": 0,
                "name": "WtrFall 1"
                }

      responses:
        "200":
          description: Object with custom name
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
          links:
            GetCustomNameLink:
              description: >
                The `id` value returned by /config/options/customNames can be used
                as the `id` value when setting the custom name.
              operationId: getCustomNames
              parameters:
                id: "$response.body#/id"
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'

  /config/schedule/{id}/:
    get:
      summary: |-
        Get an individual schedule
        This endpoint will be going away.  Please use /config/schedules or /config/options/schedules instead.
      description: "Get an individual schedule"
      tags:
        - config
        - schedules
      deprecated: true
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        "200":
          description: Circuit object
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/configCircuit"

  /config/schedule/:
    put:
      summary: Set options related to the "schedules" section in poolConfig.json
      description: |-
        To set schedule settings, send an object with the values you want to change from /config/options/schedules.
      tags:
        - config
        - schedules
      requestBody:
        description: Create/Update a schedule
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configSchedule'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configSchedule"
              example: {
                  "id": 1,
                  "circuit": 6,
                  "startTime": 495,
                  "endTime": 960,
                  "isActive": true,
                  "scheduleDays": 127,
                  "runOnce": 128,
                  "scheduleType": 128,
                  "startTimeType": 0,
                  "endTimeType": 0
                  }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a schedule at the specified id
      description: "Delete a schedule at the specified id"
      tags:
        - config
        - schedules
      responses:
        "200":
          description: Success
          content:  
            application/json:
              example: {
                "id": 19,
                "isActive": false
                }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/chlorinator/:
    put:
      summary: Set options related to the "chlorinators" section in poolConfig.json
      description: |-
        To set schedule settings, send an object with the values you want to change from /config/options/chlorinators.
      tags:
        - config
        - chlorinators
      requestBody:
        description: Create/Update a chlorinator
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configChlorinator'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configChlorinator"
              example: {
                "id": 1,
                "address": 80,
                "isActive": true,
                "body": 32,
                "spaSetpoint": 15,
                "poolSetpoint": 2,
                "superChlor": true,
                "superChlorHours": 10,
                "name": "Intellichlor--40",
                "type": 2
                }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/circuits/names/:
    get:
      summary: |-
        Get a list of valid controller names for circuits (*Touch only)
        This endpoint will be going away.  Please use the equipmentNames object in
        /config/options/circuits or /config/options/features instead.
      description: "Get a list of valid controller names for circuits"
      tags:
        - config
        - circuits
      deprecated: true
      responses:
        "200":
          description: Array of controller function objects valid for names
          content:
              application/json:
                  schema:
                      $ref:  "#/components/schemas/valNameDescArr"

  /config/circuits/functions/:
    get:
      summary: |-
        Get a list of valid controller functions for circuits
        This endpoint is going away.  Use the functions object in /config/options/circuits
        or /config/options/features instead.  
      description: "Get a list of valid controller functions for circuits"
      tags:
        - config
        - circuits
      deprecated: true
      responses:
        "200":
          description: Array of controller function objects valid for circuits
          content:
              application/json:
                  schema:
                      $ref:  "#/components/schemas/valNameDescArr"

  /config/features/functions/:
    get:
      summary: |-
        Get a list of valid controller functions for features
        This endpoint is going away.  Use the functions object in /config/options/circuits
        or /config/options/features instead.  
      description: "Get a list of valid controller functions for features"
      tags:
        - config
        - features
      deprecated: true
      responses:
        "200":
          description: Array of controller function objects valid for features
          content:
              application/json:
                  schema:
                      $ref:  "#/components/schemas/valNameDescArr"

  /config/chlorinator/:id/:
    get:
      summary: Get a single chlorinator object
      description: "Get a single chlorinator object"
      tags:
        - chlorinators
        - config
      responses:
        "200":
          description: Chlorinator object
          content:
              application/json:
                  schema:
                      $ref:  "#/components/schemas/configChlorinator"

  /config/chlorinators/search/:
    get:
      summary: Start a search for standalone chlorinators
      description: "Start a search for standalone chlorinators"
      tags:
        - chlorinators
        - virtual controllers
      responses:
        "200":
          description: Chlorinator object (isActive and isVirtual should be checked)
          content:
              application/json:
                  schema:
                      $ref:  "#/components/schemas/configChlorinator"

  /config/pump/:pumpId/:
    delete:
      summary: Delete a pump at the specified Id
      description: "Delete a pump at the specified Id"
      deprecated: true
      tags:
        - config
        - pumps
      responses:
        "200":
          description: Array of

  /config/dateTime/:
    put:
      summary: Set date and time options 
      description:  Set date and time options 
      tags:
        - config
        - dateTime
      requestBody:
        description: Update the date/time
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDateTime'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configDateTime"
              
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'


  /config/options/dateTime/:
    get:
      summary: |-
        Get days of week that are valid for the current OCP.  This can also be retrieved as `scheduleDays` in the /config/options/schedules object.
      description: "Get Days of week; info now contained in /config/options/schedules"
      tags:
        - config
      responses:
        "200":
          description: Array of days

  /config/lightGroups/themes/:
    get:
      summary: |-
        Get a list of light group themes 
        This endpoint is going away.  Use themes object in /config/options/lightGroups instead.
      description: "Get a list of light group themes"
      tags:
        - config
        - light groups
      deprecated: true
      responses:
        "200":
          description: Array of

  /config/lightGroup/{id}/:
    get:
      summary: Get a single lightGroup at the specified id
        This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.
      description: "Get a single lightGroup at the specified id"
      tags:
        - config
        - light groups
      deprecated: true
      parameters: 
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        "200":
          description: Object with deep linking 

  /config/lightGroup/colors/:
    get:
      summary: |-
        Get lightgroup colors, theme, action
        This endpoint is going away.  Use /config/lightGroups or /config/options/lightGroups instead.
      description: "Get lightgroup colors, theme, action"
      tags:
        - broken
        - config
        - light groups
      deprecated: true
      responses:
        "200":
          description: Object of items...
  /config/lightGroup/{id}/setColors/:
    put:
      summary: |- 
        set lg attribs
        This endpoint is going away.  Use /config/lightGroup instead.
      description: ""
      deprecated: true
      tags:
        - light groups
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        "200":
          description: Array of
  /config/intellibrite/themes/:
    get:
      summary: |-
        Get lightGroup themes - can be retrieved with /config/options/lightGroups; also it sends enumerated state info and not just identifiers.
        This endpoint is going away.  Use themes object in /config/options/lightGroups instead.
      description: ""
      tags:
        - light groups
      deprecated: true
      responses:
        "200":
          description: Array of
  /config/circuitGroup/{id}/:
    get:
      summary: Get a single circuit group at the specified id
      description: "Get a single circuit group at the specified id"
      tags:
        - config
        - circuit groups
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        "200":
          description: Circuit group extended object
  /config/chemController/search/:
    get:
      summary: NOT IMPLEMENTED YET.  Begin a search on the server for any chem controllers
      description: "Begin a search on the server for any chem controllers"
      tags:
        - chem controllers
        - config
        - virtual controllers
        - not implemented yet
      responses:
        "200":
          description: "Searching for chem controllers."
  /config/chemController/:
    put:
      summary: Set options related to the "chemControllers" section in poolConfig.json
      description: |-
        To set schedule settings, send an object with the values you want to change from /config/options/chemControllers.
      tags:
        - config
        - chemControllers
      requestBody:
        description: Create/Update a chem controller
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configChemController'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configChemController"
              example:
                  {
                  "id": 1,
                  "type": 3,
                  "isActive": true,
                  "isVirtual": true,
                  "name": "Chem Controller",
                  "pHSetpoint": 7.4,
                  "orpSetpoint": 660,
                  "alkalinity": 40,
                  "calciumHardness": 710,
                  "cyanuricAcid": 10
                  }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /config/:
    get:
      summary: Shortcut for /config/all
      description: "Shortcut for /config/all"
      tags:
        - config
      responses:
        "200":
          description: poolConfig.json
  /config/{section}/:
    get:
      summary: Return a section of poolConfig.json
      description: "Return a section of poolConfig.json"
      tags:
        - config
      parameters:
        - in: path
          required: true
          name: section
          schema:
            type: string
            default: all
            enum:
              - all
              - pool
              - equipment
              - configVersion
              - bodies
              - schedules
              - circuits
              - features
              - pumps
              - chlorinators
              - valves
              - heaters
              - configVersion
              - circuitGroups
              - lightGroups
              - remotes
              - security
              - customNames
              - eggTimers
              - chemControllers
              - appVersion
              - lastUpdated
              - general
              - controllerType
      responses:
        "200":
          description: "{Section} of poolConfig.json"
  /app/logger/setOptions/:
    put:
      summary: Set options related to the "log" section in config.json
      description: |-
        To set logger settings, send an object with the values you want to change from /config/options/logger.
      tags:
        - app
        - logger
      requestBody:
        description: Update logger options
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLogger'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configLogger"
              example:
                    {
                    "logger": {
                    "packet": {
                    "enabled": true,
                    "logToConsole": false,
                    "logToFile": false,
                    "filename": "packetLog",
                    "invalid": true,
                    "broadcast": {
                    "enabled": false,
                    "includeActions": [],
                    "includeSource": [],
                    "includeDest": [],
                    "excludeActions": [],
                    "excludeSource": [],
                    "excludeDest": []
                    }
                    },
                    "app": {
                    "enabled": true,
                    "level": "debug",
                    "captureForReplay": false
                    }
                    }
                    }
        default: 
            description: 400 or 500 return codes (See Schema)
            content:
              application/json: 
                schema:
                  $ref: '#/components/schemas/Error'
  /app/logger/clearMessages/:
    put:
      summary: Delete current logfile from disk
      description: Delete current logfile from disk
      tags:
        - logger
        - app
      responses:
        "200":
          description: Success
  /app/message/broadcast/actions/:
    get:
      summary: Get all broadcast packets identifiers
      description: "Get all broadcast packets identifiers"
      tags:
        - packets
        - app
      responses:
        "200":
          description: Array of broadcast actions
          content:
              application/json:
                  schema:
                      $ref:  "#/components/schemas/valNameDescArr"
  /app/config/reload/:
    put:
      summary: Reload the app with files from disk
      description: "Reload the app with files from disk"
      tags:
        - config
        - app
      responses:
        "200":
          description: Successful Reload
  /app/config/startPacketCapture/:
    get:
      summary: Starts a packet capture on the server WITHOUT a reset
      description: "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture."
      tags:
        - packet capture
        - app
        - config
      responses:
        "200":
          description: 'OK'
  /app/config/startPacketCaptureWithoutReset/:
    get:
      summary: Starts a packet capture on the server WITH a reset
      description: "This will start a packet capture and turn on all logging necessary to submit a bug request.  End with /stopPacketCapture."
      tags:
        - packet capture
        - app
        - config
      responses:
        "200":
          description: 'OK'
  /app/config/stopPacketCapture/:
    get:
      summary: Stop an in-progress packet capture and download a zipped file
      description: "Stop an in-progress packet capture and download a zipped file"
      tags:
        - packet capture
        - config
      responses:
        "200":
          description: Zip file of packet capture
          content:
            zip:
              schema:
                type: string
                format: binary

components:
  schemas:
    configLogger:
          anyOf:
            - type: object
              properties:
                packet:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                    logToConsole:
                      type: boolean
                    logToFile:
                      type: boolean
                    filename:
                      type: string
                    invalid:
                      type: boolean
                    broadcast:
                      type: object
                      $ref: "#/components/schemas/configBody"
                    pump:
                      type: object
                      $ref: "#/components/schemas/configBody"
                    chlorinator:
                      type: object
                      $ref: "#/components/schemas/configBody"
                    intellichem:
                      type: object
                      $ref: "#/components/schemas/configBody"
                    intellivalve:
                      type: object
                      $ref: "#/components/schemas/configBody"
                    unidentified:
                      type: object
                      $ref: "#/components/schemas/configBody"
                    unknown:
                      type: object
                      $ref: "#/components/schemas/configBody"

            - type: object
              properties:
                app:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                    level:
                        enum: ["error", "warn", "info", "debug", "verbose", "silly"]
                    captureForReplay:
                      type: boolean
    configLoggerBase:
      type: object
      required:
        - enabled
        - includeSource
        - includeDest
        - excludeSource
        - excludeDest
      properties:
        enabled:
          type: boolean
        includeActions:
          type: array
          items: 
            type: integer 
        includeSource:
          type: array
          items: 
            type: integer 
        includeDest:
          type: array
          items: 
            type: integer 
        excludeActions:
          type: array
          items: 
            type: integer 
        excludeSource:
          type: array
          items: 
            type: integer 
        excludeDest:
          type: array
          items: 
            type: integer 
      example:
            {
            "enabled": true,
            "includeActions": [2, 24],
            "exclueActions": [],
            "includeSource": [],
            "includeDest": [80],
            "excludeSource": [],
            "excludeDest": []
            }
    Error:
      description: |-
        Errors can have the following codes:
           # HTTP 400 Errors
            204: Equipment not found
            210: Equipment Error
            250: Invalid Equipment Id
            270: Invalid data
            280: Invalid data service
           # HTTP 500 Errors
            100: Invalid data service
            500: Error with message
            501: Error sending outbound message
            502: Error receiving inbound message
      type: object
      properties:
        stack: 
          type: string
        message: 
          type: string
        code:
          type: integer
        httpCode:
          type: integer
        position:
          type: object
          properties:
            column:
              type: integer
            line: 
              type: integer
            dir:
              type: string
            file:
              type: string
        name:
          type: string
        equipmentType:
          type: string
        level:
          type: string
      example:
        {
          "stack": "ApiError: Invalid group id: 999\n    at IntelliCenterCircuitCommands.deleteCircuitGroupAsync ...",
          "message": "Invalid group id: 999",
          "code": 210,
          "httpCode": 400,
          "position": {
              "column": 101,
              "line": 1356,
              "dir": "/Users/.../programming/nodejs-poolController/controller/boards",
              "file": "IntelliCenterBoard.ts"
          },
          "name": "EquipmentNotFound",
          "equipmentType": "CircuitGroup",
          "level":"error"
        }
    
    valNameObj:
      type: object
      properties:
        val:
          type: integer
        name:
          type: string
    valNameDescArr:
      type: array
      items:
        $ref: "#/components/schemas/valNameDescObj"
    valNameDescObj:
      type: object
      properties:
        val:
          type: integer
        name:
          type: string
        desc:
          type: string
    valNameDescTypeArr:
      type: array
      items:
        $ref: "#/components/schemas/valNameDescTypeObj"
    valNameDescTypeObj:
      type: object
      properties:
        val:
          type: integer
        name:
          type: string
        desc:
          type: string
        type:
          type: string
    timeZoneObj:
      type: object
      properties:
        val:
          type: integer
        name:
          type: string
        loc:
          type: string
        abbrev:
          type: string
        utcOffset:
          type: integer
      example:
        val: 128
        name: Samoa Standard Time
        loc: Pacific
        abbrev: SST
        utcOffset: -11

    sensorsObj:
      type: object
      properties:
        name:
          type: string
        temp:
          type: integer
        tempAdj:
          type: integer
        binding:
          type: string
      example:
        name: Air Sensor
        temp: 66
        tempAdj: 0
        binding: airTempAdj
    configDateTime:
      type: object
      properties:
        min:
          type: integer
        hour:
          type: integer
        date:
          type: integer
        month:
          type: integer
        year:
          type: integer
        dow:
          type: integer
        dst:
          type: integer
      example: {
          "hour": 13,
          "min": 24,
          "date": 21,
          "month": 1,
          "year": 2020,
          "dst": 1,
          "dow": 8
          }  
    configCircuits:
      type: array
      items:
        $ref: "#/components/schemas/configCircuit"
    configCircuit:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
        isOn:
          type: boolean
        name:
          type: string
        nameId:
          type: string
        type:
          type: integer
        isActive:
          type: boolean
        freeze:
          type: boolean
        showInFeatures:
          type: boolean
        eggTimer:
          type: integer
        equipmentType:
          type: string
      example:
        id: 1
        name: Spa
        nameId: 72
        type: 1
        isActive: true
        freeze: false
        showInFeatures: true
        eggTimer: 0
    configCircuitGroups:
      type: array
      items:
        $ref: "#/components/schemas/configCircuitGroup"
    configCircuitGroup:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
        type:
          type: integer
        isActive:
          type: boolean
        name:
          type: string
        eggTimer:
          type: integer
        circuits:
            type: array 
            items:
              type: object
              properties:
                  id:
                      type: integer
                  circuit:
                      type: integer
      example:
        {
        "id": 195,
        "type": 2,
        "isActive": true,
        "circuits": [
        {
        "id": 1,
        "circuit": 140
        },
        {
        "id": 2,
        "circuit": 131
        }
        ],
        "name": "Group 2",
        "eggTimer": 720
        }
    configGeneralOptions:
      type: object
      properties:
        adjustDST:
          type: boolean
        clockMode:
          type: integer
          enum: [12, 24]
        clockSource:
          $ref: "#/components/schemas/clockSourceEnum"
        pumpDelay:
          type: boolean
        manualHeat:
          type: boolean
        units:
          type: integer
      example:
        adjustDST: false
        clockMode: 12
        clockSource: manual
        pumpDelay: false
        manualHeat: false
        units: 0
    configGeneralOwner:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        email:
          type: string
        email2:
          type: string
        phone2:
          type: string
      example:
        name: "Mrs. Owner"
        phone: "555-1212"
        email: "owner@pool.com"
        email2: "otherowner@pool.com"
        phone2: "837-5609"
    configGeneralLocation:
      type: object
      properties:
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        country:
          type: string
        latitude:
          type: string
        longitude:
          type: string
        timeZone:
          type: integer
      example:
        address: "123 Main St"
        city: "Anywhere"
        state: "MO"
        zip: "33445"
        country: "US"
        latitude: "45.2112"
        longitude: "28.012"
        timeZone: 6
    clockSourceEnum:
      type: string
      enum: [manual, server, internet]
      description: >
        Clock Source Values:
          * `manual` - OCP keeps time
          * `server` - njsPC syncs time to OCP
          * `internet` - IntelliCenter only - OCP syncs with Internet
    configOptionsGeneral:
      type: object
      properties:
        countries:
          $ref: "#/components/schemas/valNameDescArr"
        tempUnits:
          $ref: "#/components/schemas/valNameDescArr"
        timeZones:
          type: array 
          items:
            $ref: "#/components/schemas/timeZoneObj"
        clockSources:
          $ref: "#/components/schemas/valNameDescArr"
        clockModes:
          type: array 
          items:
            $ref: "#/components/schemas/valNameObj"
        pool:
          type: object  
          properties:
            options:
              $ref: "#/components/schemas/configGeneralOptions"
            owner:
              $ref: "#/components/schemas/configGeneralOwner"
            location:
              $ref: "#/components/schemas/configGeneralLocation"
            alias:
              type: string
              example: "My pool"
        sensors:
          type: array
          items:
            $ref: "#/components/schemas/sensorsObj"
    configOptionsChlorinators:
      type: object
      properties:
        types:
          $ref: "#/components/schemas/valNameDescObj"
        bodies:
          $ref: "#/components/schemas/valNameDescObj"
    configChlorinators:
      type: array
      items:
        $ref: "#/components/schemas/configChlorinator"
    configChlorinator:
      type: object
      properties:
        id:
          type: integer
        address:
          type: integer
        isActive:
          type: boolean
        body:
          type: integer
        spaSetpoint:
          type: integer
        poolSetpoint:
          type: integer
        superChlor:
          type: boolean
        superChlorHours:
          type: integer
        name:
          type: string
        type:
          type: integer
      example:
        id: 1
        address: 80
        isActive: true
        body: 32
        spaSetpoint: 15
        poolSetpoint: 50
        superChlor: false
        superChlorHours: 0
        name: Intellichlor--40
        type: 2
    configChemControllers:
      type: array
      items:
        $ref: "#/components/schemas/configChemController"
    configChemController:
      type: object
      properties:
        id:
          type: integer
        type:
          type: integer
        isActive:
          type: boolean
        isVirtual:
          type: boolean
        name:
          type: integer
        phSetpoint:
          type: number
        orpSetpoint:
          type: boolean
        alkalinity:
          type: integer
        calciumHardness:
          type: integer
        cyanuricAcid:
          type: integer
      example:
            {
            "id": 1,
            "type": 3,
            "isActive": true,
            "isVirtual": true,
            "name": "Chem Controller",
            "pHSetpoint": 7.4,
            "orpSetpoint": 660,
            "alkalinity": 40,
            "calciumHardness": 710,
            "cyanuricAcid": 10
            }
    configHeaters:
      type: array
      items:
        $ref: "#/components/schemas/configHeater"
    configHeater:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: integer
        isActive:
          type: boolean
        body:
          type: integer
        freeze:
          type: boolean
        coolingEnabled:
          type: boolean
        startTempDelta:
          type: integer
        stopTempDelta:
          type: integer
      example:
        id: 2
        name: Solar Heater
        type: 2
        isActive: true
        body: 32
        freeze: true
        coolingEnabled: false
        startTempDelta: 3
        stopTempDelta: 2
    configFeatures:
      type: array
      items:
        $ref: "#/components/schemas/configFeature"
    configFeature:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        nameId:
          type: integer
        type:
          type: integer
        isActive:
          type: boolean
        freeze:
          type: boolean
        showInFeatures:
          type: boolean
        eggTimer:
          type: integer
        macro:
          type: boolean
      example:
        id: 11
        name: Spillway
        nameId: 79
        type: 14
        isActive: true
        freeze: false
        showInFeatures: true
        eggTimer: 0
        macro: false
    configLightGroups:
      type: array
      items:
        $ref: "#/components/schemas/configLightGroup"
    configLightGroup:
      type: object
      properties:
        id:
          type: integer
        isActive:
          type: boolean
        name:
          type: string
        type:
          type: integer
        lightingTheme:
          type: integer
        circuits:
          type: array
          items:
            $ref: "#/components/schemas/configFeature"
      example:
        - id: 192
          circuits:
            - id: 1
              circuit: 2
              position: 2
              color: 6
              swimDelay: 0
              isActive: true
            - id: 2
              circuit: 7
              position: 2
              color: 14
              swimDelay: 2
              isActive: true
            - id: 3
              circuit: 8
              position: 3
              color: 2
              swimDelay: 4
              isActive: true
          isActive: true
          name: Intellibrite
          type: 3
          lightingTheme: 195
    configScheduleTypesArr:
      type: array
      items:
        $ref: "#/components/schemas/configScheduleType"
    configScheduleType:
      type: object
      properties:
        val:
          type: integer
        name:
          type: string
        desc:
          type: string
        startDate:
          type: boolean
        startTime:
          type: boolean
        endTime:
          type: boolean
        days:
          type: string
          enum:
            - single
            - multi
            - false
        heatSource:
          type: boolean
        heatSetpoint:
          type: boolean
      example:
        Repeat:
          {
            "val": 128,
            "name": "repeat",
            "desc": "Repeats",
            "startDate": false,
            "startTime": true,
            "entTime": true,
            "days": "multi",
            "heatSource": true,
            "heatSetpoint": false,
          }
        RunOnce:
          {
            "val": 0,
            "name": "runonce",
            "desc": "Run Once",
            "startDate": false,
            "startTime": true,
            "endTime": false,
            "days": "single",
            "heatSource": true,
            "heatSetpoint": false,
          }
    configScheduleDaysArr:
      type: array
      items:
        $ref: "#/components/schemas/configScheduleDay"
    configScheduleDay:
      type: object
      properties:
        val:
          type: integer
        days:
          type: object
          properties:
            name:
              type: string
            desc:
              type: string
            down:
              type: integer

      example:
        { "val": 1, "days": [{ "name": "sun", "desc": "Sunday", "dow": 0 }] }
    configSchedules:
      type: array
      items:
        $ref: "#/components/schemas/configSchedule"
    configSchedule:
      type: object
      properties:
        id:
          type: integer
        circuit:
          type: integer
        startTime:
          type: integer
        endTime:
          type: integer
        isActive:
          type: boolean
        scheduleDays:
          type: integer
        runOnce:
          type: integer
        scheduleType:
          type: integer
        startTimeType:
          type: integer
        endTimeType:
          type: integer
      example:
        {
          "id": 1,
          "circuit": 6,
          "startTime": 495,
          "endTime": 960,
          "isActive": true,
          "scheduleDays": 127,
          "runOnce": 128,
          "scheduleType": 128,
          "startTimeType": 0,
          "endTimeType": 0,
        }
    configBodies:
      type: array
      items:
        $ref: "#/components/schemas/configBody"
    configBody:
      type: object
      properties:
        id:
          type: integer
        type:
          type: integer
        capacity:
          type: integer
        isActive:
          type: boolean
        name:
          type: string
        heatMode:
          type: integer
        setPoint:
          type: integer
        circuit:
          type: integer
      example:
        {
        "id": 1,
        "type": 0,
        "capacity": 34000,
        "isActive": true,
        "name": "Pool",
        "heatMode": 5,
        "setPoint": 90,
        "circuit": 6
        }
    configValves:
      type: array
      items:
        $ref: "#/components/schemas/configValve"
    configValve:
      type: object
      properties:
        id:
          type: integer
        circuit:
          type: integer
        isIntake:
          type: boolean
        isReturn:
          type: boolean
        type:
          type: integer
        isActive:
          type: boolean
        name:
          type: string
    configPumpModels:
      type: object
      properties:
        ss: 
          type: array 
          items:
              $ref: "#/components/schemas/configPumpModel"
        ds: 
          type: array 
          items:
              $ref: "#/components/schemas/configPumpModel"
        vs: 
          type: array 
          items:
              $ref: "#/components/schemas/configPumpModel"
        vf: 
          type: array 
          items:
              $ref: "#/components/schemas/configPumpModels"
        vsf: 
          type: array 
          items:
              $ref: "#/components/schemas/configPumpModel"
        vssvrs: 
          type: array 
          items:
              $ref: "#/components/schemas/configPumpModel"
    configPumpModel:
      anyOf:
       - allOf:
          - $ref: '#/components/schemas/valNameDescObj'
          - type: object
            properties:
              loAmps:
                type: number
              hiAmps:
                type: number
              pf:
                type: number
              volts:
                type: integer
              loWatts:
                type: integer
              hiWatts:
                type: integer
          - $ref: '#/components/schemas/valNameDescObj'
      example:
            {
            "val": 3,
            "name": "generic2hp",
            "desc": "2hp Pump",
            "loAmps": 2.9,
            "hiAmps": 12,
            "pf": 0.9,
            "volts": 230,
            "loWatts": 600,
            "hiWatts": 2484
            }

 

    configPumps:
      type: array
      items:
        $ref: "#/components/schemas/configPump"
    configPump:      
      type: object
      properties:
          id:
            type: integer
          model:
            type: integer
          type:
            type: integer
          circuits:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                circuit:
                  type: integer
                speed:
                  type: integer
                units:
                  type: integer
          flowStepSize:
            type: integer
          minFlow:
            type: integer
          maxFlow:
            type: integer
          address:
            type: integer
          primingTime:
            type: integer
          speedStepSize:
            type: integer
          minSpeed:
            type: integer
          maxSpeed:
            type: integer
          primingSpeed:
            type: integer
          name:
            type: string

      example:
            {
            "val": 3,
            "name": "generic2hp",
            "desc": "2hp Pump",
            "loAmps": 2.9,
            "hiAmps": 12,
            "pf": 0.9,
            "volts": 230,
            "loWatts": 600,
            "hiWatts": 2484
            }



  examples:
    configOptionsLightGroups:
      value:
        maxLightGroups: 1
        equipmentNames:
          - val: 1
            name: aerator
            desc: Aerator
          - val: 2
            name: airblower
            desc: Air Blower
          - val: 3
            name: aux1
            desc: AUX 1
          - val: 4
            name: aux2
            desc: AUX 2
        themes:
          - val: 0
            name: "off"
            desc: "Off"
            type: intellibrite
          - val: 1
            name: "on"
            desc: "On"
            type: intellibrite
          - val: 128
            name: colorsync
            desc: Color Sync
            type: intellibrite
          - val: 144
            name: colorswim
            desc: Color Swim
            type: intellibrite
        colors:
          - val: 0
            name: white
            desc: White
          - val: 2
            name: lightgreen
            desc: Light Green
          - val: 4
            name: green
            desc: Green
        circuits:
          - id: 2
            name: Pool LtDeep
            type: 16
            equipmentType: circuit
            nameId: 205
          - id: 7
            name: Spa Light
            type: 16
            equipmentType: circuit
            nameId: 74
        lightGroups:
          - id: 192
            circuits:
              - id: 1
                circuit: 2
                position: 2
                color: 6
                swimDelay: 0
                isActive: true
              - id: 2
                circuit: 7
                position: 2
                color: 14
                swimDelay: 2
                isActive: true
              - id: 3
                circuit: 8
                position: 3
                color: 2
                swimDelay: 4
                isActive: true
            isActive: true
            name: Intellibrite
            type: 3
            lightingTheme: 195
        functions:
          - val: 0
            name: generic
            desc: Generic
          - val: 1
            name: spa
            desc: Spa
          - val: 2
            name: pool
            desc: Pool

  responses:
   EquipmentNotFoundError:
     description: "204: The specified equipment cannot be found."
     content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
   InvalidEquipmentIdError:
     description: "250: The specified equipment Id cannot be found."
     content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
   InvalidEquipmentDataError:
     description: "270: The data provided is invalid."
     content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
   ServiceParameterError:
     description: "280: The data service is invalid."
     content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
   InvalidOperationError:
     description: "100: The data service is invalid."
     content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
   ParameterOutOfRangeError:
     description: "100: The data service is invalid."
     content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
   MessageError:
     description: "500: General error sending messages."
     content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
   OutboundMessageError:
     description: "501: Error sending outbound message."
     content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
   InboundMessageError:
     description: "502: Error receiving inbound message."
     content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
